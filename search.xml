<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>19博客框架升级</title>
    <url>/2019/19%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6%E5%8D%87%E7%BA%A7/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我的博客框架已经好久没有动过了。印象中，去年升级过一次。只不过当时没有升级上最新版，用的是V5最后一个版本，也是iissnan维护的最后一个版本。后续版本都交给<a href="https://github.com/theme-next/hexo-theme-next">theme-next</a>这一组织来管理。这个组织的官方网站和文档在<a href="https://theme-next.org/">NexT - Theme for Hexo</a>。新版的信息都在这上面可以找得到<br>闲的没事，需要找些东西玩一下，所以决定在最近升级我的博客框架。我看到网上其他人的NexT主题又开始花里胡哨起来了。只不过我的要求不高，只要简洁，好看，速度快就好了，花里胡哨的东西，还是少些为好。<br>在此之前，我就已经意识到我会遇到很多坑，现在看来坑真的很多。</p>
<h1 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h1><h2 id="hexo框架升级"><a href="#hexo框架升级" class="headerlink" title="hexo框架升级"></a>hexo框架升级</h2><p>hexo框架升级相当之简单，基本不会遇到很多坑。<br>参考下面这篇教程<br><a href="https://blog.csdn.net/whjkm/article/details/81088518">Hexo版本升级和Next主题升级之坑</a><br>核心代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i hexo-cli -g</span><br></pre></td></tr></table></figure>
<h2 id="next主题升级"><a href="#next主题升级" class="headerlink" title="next主题升级"></a>next主题升级</h2><p>我怕会有各种兼容性问题，所以我没有使用git pull来升级，我每次都是用蠢办法，直接从官网的Release页面下载最新版的主题包，再解压到主题目录中。<br>然后在通过对配置文件的比对，和网页效果的比对，将主题功能一个个配置和调试好。<br>然而我发现最新版的7.3.0是有Bug的。WTF…<br>Bug见下面这个issue<br><a href="https://github.com/theme-next/hexo-theme-next/issues/1050">Problem with v7.3</a><br>所以我只好下上一个版本7.2.0的包，然后再重新配置。因为版本差异比较大，再加上以前些的文章不规范，所以渲染文章时又出问题了。所有文章的图片全部挂掉了。<del>不慌，小事</del>，看了下链接，发现是用的当前页面做的相对链接，正确的应该是站点的相对链接。<br>然后仔细观察发现MathJax也挂了，我明明开了，但是就是没有效果。最后上网查发现，MathJax被设计成默认关闭，需要在每篇文章声明才会开启，为了加快页面的加载速度。主要是这两个问题，让我在文章中进行大改。<br>后面，我还记得我以前通过修改代码，增加了两个功能。最后在网上找到了相关的修改教程。<br><a href="https://www.cnblogs.com/Mayfly-nymph/p/10622307.html">Hexo解决页面过小问题与设置透明背景</a><br><a href="https://blog.csdn.net/csdnSR/article/details/78300820">修改hexo的主题nexT中的Pisces主题宽度</a><br>阿里云OSS可以设置静态页面，然后我就想把我的博客也弄上去，这样就不用担心我的服务器更换或者挂了的情况。而且速度快，用香港的OSS还不用流量费(5G以下免费)<br>但是部署上去发现一个问题，就是阿里云oss的URL必须带index.html，而hexo并没有提供类似的功能。所以，只能手动修改hexo文件了。<br>参考<a href="https://www.0daybug.com/2019/0326/hexo-on-oss/index.html">基于阿里云OSS搭建hexo博客</a></p>
<h2 id="新增功能"><a href="#新增功能" class="headerlink" title="新增功能"></a>新增功能</h2><p>升级肯定要有些变化，不能变成刷版本号似的升级。所以我又新开了如下这些功能。</p>
<ul>
<li>文章字数，时长统计</li>
<li>Tag logo显示</li>
<li>版权声明标记</li>
<li>网页顶部加载条</li>
<li>博客头部加入副标题显示</li>
<li>评论系统</li>
</ul>
]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>19天梯杯旅游记</title>
    <url>/2019/19%E5%A4%A9%E6%A2%AF%E6%9D%AF%E6%97%85%E6%B8%B8%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我也不知道哪里来的一个<code>天梯杯</code>比赛，压根就没听过的比赛，也不知道是谁举办的！好不容易有机会能够去学校外比赛，那当然是选择<del>公费旅游</del>啦！<br>旅游目的地： <code>深圳</code> <code>深职院</code><br>深圳我去的不多，毕竟省内还是广州跑的多。而且目的地还是分数线高出本科线超多的深职院，那更要体验一波了。听说硬件实力超强，但我感觉表面上确实挺好的，机子挺垃圾的。(或许这个锅应该比赛方去背)</p>
<p><del>顺便说句题外话，现在notepad++对Markdown语法支持变好了，起码有语法高亮了。</del></p>
<span id="more"></span>

<h1 id="一波美图"><a href="#一波美图" class="headerlink" title="一波美图"></a>一波美图</h1><p>说到这，肯定要先上一波图。<br>此次使用的图库由Github提供，BTW，真的让我很难相信国内的免费服务，各种坑。<code>七牛云</code>再见！<br>但不得不说这增加了我插入图片的难度！毕竟那次修改链接，修改的我快吐血！<br>在此，请允许我盗一波图！（如果有要求撤下的，请直接联系我）因为我的摄影角度太直男了，尽管技术还OK！<br><img data-src="/images/19天梯杯旅游记/001.jpg" style="zoom:50%"><br><img data-src="/images/19天梯杯旅游记/002.jpg" style="zoom:50%"><br><img data-src="/images/19天梯杯旅游记/003.jpg" style="zoom:50%"><br><img data-src="/images/19天梯杯旅游记/004.jpg" style="zoom:25%"><br><img data-src="/images/19天梯杯旅游记/005.jpg" style="zoom:50%"><br><img data-src="/images/19天梯杯旅游记/006.jpg" style="zoom:50%"><br><img data-src="/images/19天梯杯旅游记/007.jpg" style="zoom:50%"><br><img data-src="/images/19天梯杯旅游记/008.jpg" style="zoom:50%"><br><img data-src="/images/19天梯杯旅游记/009.jpg" style="zoom:50%"><br><img data-src="/images/19天梯杯旅游记/010.jpg" style="zoom:50%"><br><img data-src="/images/19天梯杯旅游记/011.jpg" style="zoom:50%"><br><img data-src="/images/19天梯杯旅游记/012.jpg" style="zoom:50%"><br><img data-src="/images/19天梯杯旅游记/013.jpg" style="zoom:50%"><br><img data-src="/images/19天梯杯旅游记/014.jpg" style="zoom:50%"><br><img data-src="/images/19天梯杯旅游记/015.jpg" style="zoom:50%"><br>我自己的丑图就不放了，虽然我也传到了博客上，就看你能不能找到了。</p>
<h1 id="比赛前"><a href="#比赛前" class="headerlink" title="比赛前"></a>比赛前</h1><p>我记得比赛前我听到那个判作弊规则，我当场就想敲桌子。只不过我好像已经忘了为什么我要敲桌子了。<br>吃了个中午饭，没有想象中的好，可能期望值太高，然后就看到了一个令人窒息的画面。(亮点自寻)<br><img data-src="/images/19天梯杯旅游记/highlight.jpg" style="zoom:50%"></p>
<h1 id="比赛中"><a href="#比赛中" class="headerlink" title="比赛中"></a>比赛中</h1><p>我敲桌子其实是没错的，那个垃圾考试客户端浏览器既然崩溃了，然后找人来扫码才进去的。<br>在此之前，我还发现那个排行榜不是实时的，报给工作人员，他们说就是这样。（无话可说）<br>毕竟我是裸考，考试中才发现原来那么多道题，因为我有点担心基础题分数不够，所以在那死磕。<br>但不得不说，这是我所有比赛中遇到字符串题最多的一场。差点要了我的命，欺负我不擅长使用<code>C</code>弄字符串题，还是高级语言好，<code>Java</code>组应该在那窃喜。如果用我的母语<code>Pascal</code>应该能更快搞定，只不过要是考试真的允许，估计我也不行，函数都忘得差不多了。</p>
<h1 id="比赛后"><a href="#比赛后" class="headerlink" title="比赛后"></a>比赛后</h1><p>我在排行榜竟然看到了身处UESTC的同学，L1全过，L2有一题没管过，L3没做。我敢肯定L3是没做，就他这水平AK不是问题。毕竟ganxi。<br>只不过我觉得挺惊讶他来打这个比赛的，难道也是来公费旅游的？？！！要不就是他们学校的人数不够，只好拿他这种顶级选手来凑数。</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="L1-1-PTA使我精神焕发"><a href="#L1-1-PTA使我精神焕发" class="headerlink" title="L1-1 PTA使我精神焕发"></a>L1-1 PTA使我精神焕发</h2><p>搞笑题，我都有点不想贴代码了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;PTA shi3 wo3 jing1 shen2 huan4 fa1 !&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>注意<code>bits/stdc++.h</code>在考场上有可能不能用，而且用了后<code>Dev-Cpp</code>的函数提示功能无法使用</p>
<h2 id="L1-2-6翻了"><a href="#L1-2-6翻了" class="headerlink" title="L1-2 6翻了"></a>L1-2 6翻了</h2><p>考试时挂了1个点，只不过当时想复杂了点，我搞成一个词去判断是不是666了。所以，我也知道那会有点问题。<br>下面是复盘之后的AC代码<br>之所以i要循环到strlen(s)溢出，是要给最后一个字符过后的判断机会。如果最后字符有连续的666，也要修改。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> s[<span class="number">1005</span>];</span><br><span class="line"><span class="type">int</span> tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin.<span class="built_in">getline</span>(s,<span class="keyword">sizeof</span> s);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;=(<span class="type">int</span>)<span class="built_in">strlen</span>(s);i ++)		<span class="comment">//多判断一位</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (s[i]==<span class="string">&#x27;6&#x27;</span>) tot ++;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (tot&gt;<span class="number">9</span>) <span class="built_in">printf</span>(<span class="string">&quot;27&quot;</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (tot&gt;<span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">&quot;9&quot;</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (tot&gt;<span class="number">0</span>)</span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;tot;j++) <span class="built_in">printf</span>(<span class="string">&quot;6&quot;</span>);</span><br><span class="line">			<span class="keyword">if</span> (i!=<span class="built_in">strlen</span>(s)) <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,s[i]);</span><br><span class="line">			tot = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>


<h2 id="L1-3-敲笨钟"><a href="#L1-3-敲笨钟" class="headerlink" title="L1-3 敲笨钟"></a>L1-3 敲笨钟</h2><p>挺有趣的一道题，换汤不换药，但是这次的汤比较新颖。<br>我用实力证明不需要记那些花里胡哨的函数，还不如自己手写来的快，来的好。<br>一个函数搞定字符串子串匹配，在借用c语言字符串数组的巧妙之处，强行插一个<code>&#39;\0&#39;</code>就能截断。<br>不需要把字符串捣鼓来捣鼓去的。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1005</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> s[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">(<span class="type">char</span> s[],<span class="type">char</span> st[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i+<span class="built_in">strlen</span>(st)<span class="number">-1</span>&lt;<span class="built_in">strlen</span>(s);i ++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="built_in">strlen</span>(st);j ++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (s[i+j]!=st[j])</span><br><span class="line">			&#123;</span><br><span class="line">				flag = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">char</span> s[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="built_in">strlen</span>(s)<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i --)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (s[i]==<span class="string">&#x27; &#x27;</span>) tot ++;</span><br><span class="line">		<span class="keyword">if</span> (tot==<span class="number">3</span>) <span class="keyword">return</span> i<span class="number">+1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//freopen(&quot;L1-3.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d\n&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">while</span> (n --)</span><br><span class="line">	&#123; </span><br><span class="line">		cin.<span class="built_in">getline</span>(s,<span class="keyword">sizeof</span> s);</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">judge</span>(s,<span class="string">&quot;ong,&quot;</span>) &amp;&amp; <span class="built_in">judge</span>(s,<span class="string">&quot;ong.&quot;</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			s[<span class="built_in">find</span>(s)] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">			cout &lt;&lt; s &lt;&lt; <span class="string">&quot;qiao ben zhong.&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125; <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Skipped&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="L1-4-心理阴影面积"><a href="#L1-4-心理阴影面积" class="headerlink" title="L1-4 心理阴影面积"></a>L1-4 心理阴影面积</h2><p>不知道为什么，我一上手这道题，就想用海伦公式，看到题目提示说可以很容易的加减出来，我才发现还是加减三角形、矩形容易。只不过这道题有除法，但是输出格式中并没有明确怎么输出小数。只不过这也无所谓，反正不限制提交次数(不罚时)，当然是怎么快怎么来。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="type">double</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">	ans = <span class="number">100</span>*<span class="number">100</span>/<span class="number">2</span>-x*y*<span class="number">0.5</span>-(<span class="number">100</span>-x)*y-(<span class="number">100</span>-x)*(<span class="number">100</span>-y)*<span class="number">0.5</span>;</span><br><span class="line">	cout &lt;&lt; ans; </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h2 id="L1-5-新胖子公式"><a href="#L1-5-新胖子公式" class="headerlink" title="L1-5 新胖子公式"></a>L1-5 新胖子公式</h2><p>这题要注意的是公式是$\frac{体重(kg)}{身高(m)^2}$,mathjax那么好用，不知道为什么不用，就算是用纯文本的表示方式也要加个括号！！</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> n,m,ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	ans = <span class="number">1.0</span>*n/m/m;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.1f\n&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">if</span> (ans&gt;<span class="number">25</span>) cout &lt;&lt; <span class="string">&quot;PANG&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Hai Xing&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="L1-6-幸运彩票"><a href="#L1-6-幸运彩票" class="headerlink" title="L1-6 幸运彩票"></a>L1-6 幸运彩票</h2><p>没啥好说的</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> T,n,x,y; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (x)</span><br><span class="line">	&#123;</span><br><span class="line">		ret += x%<span class="number">10</span>;</span><br><span class="line">		x /= <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T--)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; n;</span><br><span class="line">		x = n/<span class="number">1000</span>;</span><br><span class="line">		y = n%<span class="number">1000</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">calc</span>(x) == <span class="built_in">calc</span>(y)) cout &lt;&lt; <span class="string">&quot;You are lucky!&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Wish you good luck.&quot;</span> &lt;&lt; endl; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="L1-7-吃鱼还是吃肉"><a href="#L1-7-吃鱼还是吃肉" class="headerlink" title="L1-7 吃鱼还是吃肉"></a>L1-7 吃鱼还是吃肉</h2><p>也没啥好说的，但是我在尽力想办法写简短清晰写，我也就只能做到这种程度了！</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> T,sex,height,weight;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; T;</span><br><span class="line">	<span class="keyword">while</span> (T --)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; sex &gt;&gt; height &gt;&gt; weight;</span><br><span class="line">		<span class="keyword">if</span> (sex==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (height==<span class="number">129</span>) cout &lt;&lt; <span class="string">&quot;wan mei!&quot;</span>;</span><br><span class="line">			<span class="keyword">if</span> (height&gt;<span class="number">129</span>) cout &lt;&lt; <span class="string">&quot;ni li hai!&quot;</span>;</span><br><span class="line">			<span class="keyword">if</span> (height&lt;<span class="number">129</span>) cout &lt;&lt; <span class="string">&quot;duo chi yu!&quot;</span>;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">			<span class="keyword">if</span> (weight==<span class="number">25</span>) cout &lt;&lt; <span class="string">&quot;wan mei!&quot;</span>;</span><br><span class="line">			<span class="keyword">if</span> (weight&gt;<span class="number">25</span>) cout &lt;&lt; <span class="string">&quot;shao chi rou!&quot;</span>;</span><br><span class="line">			<span class="keyword">if</span> (weight&lt;<span class="number">25</span>) cout &lt;&lt; <span class="string">&quot;duo chi rou!&quot;</span>;</span><br><span class="line">			cout &lt;&lt; endl;</span><br><span class="line">		&#125; <span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (height==<span class="number">130</span>) cout &lt;&lt; <span class="string">&quot;wan mei!&quot;</span>;</span><br><span class="line">			<span class="keyword">if</span> (height&gt;<span class="number">130</span>) cout &lt;&lt; <span class="string">&quot;ni li hai!&quot;</span>;</span><br><span class="line">			<span class="keyword">if</span> (height&lt;<span class="number">130</span>) cout &lt;&lt; <span class="string">&quot;duo chi yu!&quot;</span>;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">			<span class="keyword">if</span> (weight==<span class="number">27</span>) cout &lt;&lt; <span class="string">&quot;wan mei!&quot;</span>;</span><br><span class="line">			<span class="keyword">if</span> (weight&gt;<span class="number">27</span>) cout &lt;&lt; <span class="string">&quot;shao chi rou!&quot;</span>;</span><br><span class="line">			<span class="keyword">if</span> (weight&lt;<span class="number">27</span>) cout &lt;&lt; <span class="string">&quot;duo chi rou!&quot;</span>;</span><br><span class="line">			cout &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="L1-8-估值一亿的AI核心代码"><a href="#L1-8-估值一亿的AI核心代码" class="headerlink" title="L1-8 估值一亿的AI核心代码"></a>L1-8 估值一亿的AI核心代码</h2><p>出题者说这道题是扎实的字符串题，以至于我做到一半，害怕时间不够A不出来，就跑去做后面L2的题，结果因为后面的题目都太长，然后我很不幸的选择了一道需要很强阅读理解的题。就又滚回来做这道，考试时没有全部A出来。<br>像这种题就需要思路非常清晰，然后严格按照出题者说的做，比如我在考场就被I这个东西坑了，如果一个单词中有I，不需要转小写。<br>judge是用来判断是大写字母，小写字母，数字、标点符号还是空格的。<br>independ是用来判断是否是个独立的单词，也就是单词前后有空格，当然对于开头和结尾的单词需要特判，同时有些单词可能前后跟的是标点符号。<br>work按照要求去处理这些字符串。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1107</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> s[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">judge</span><span class="params">(<span class="type">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (ch&gt;=<span class="string">&#x27;A&#x27;</span> &amp;&amp; ch&lt;=<span class="string">&#x27;Z&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (ch&gt;=<span class="string">&#x27;a&#x27;</span> &amp;&amp; ch&lt;=<span class="string">&#x27;z&#x27;</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span> (ch&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; ch&lt;=<span class="string">&#x27;9&#x27;</span>) <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">	<span class="keyword">if</span> (ch==<span class="string">&#x27; &#x27;</span>) <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">independ</span><span class="params">(<span class="type">char</span> s[],<span class="type">char</span> st[],<span class="type">int</span> &amp;k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> L = k,R = k+<span class="built_in">strlen</span>(st)<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span> (L&lt;<span class="number">0</span> || R&gt;=<span class="built_in">strlen</span>(s)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;(<span class="type">int</span>)<span class="built_in">strlen</span>(st);i ++)</span><br><span class="line">		<span class="keyword">if</span> (s[k+i] != st[i]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="type">bool</span> flag;</span><br><span class="line">	<span class="keyword">if</span> (L==<span class="number">0</span> || <span class="built_in">judge</span>(s[L<span class="number">-1</span>])==<span class="number">4</span> || <span class="built_in">judge</span>(s[L<span class="number">-1</span>])==<span class="number">-1</span>) flag = <span class="number">1</span>; <span class="keyword">else</span> flag = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (R==<span class="built_in">strlen</span>(s)<span class="number">-1</span> || <span class="built_in">judge</span>(s[R<span class="number">+1</span>])==<span class="number">4</span> || <span class="built_in">judge</span>(s[R<span class="number">+1</span>])==<span class="number">-1</span>) flag &amp;= <span class="number">1</span>; <span class="keyword">else</span> flag = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (flag) k=R;</span><br><span class="line">	<span class="keyword">return</span> flag;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">(<span class="type">char</span> s[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;AI: &quot;</span>; </span><br><span class="line">	<span class="type">int</span> len = <span class="built_in">strlen</span>(s),L,R;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i ++)</span><br><span class="line">		<span class="keyword">if</span> (s[i]!=<span class="string">&#x27; &#x27;</span>) </span><br><span class="line">		&#123;</span><br><span class="line">			L = i;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i ++)</span><br><span class="line">		<span class="keyword">if</span> (s[i]!=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			R = i;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="comment">//删除首尾空格</span></span><br><span class="line">	<span class="type">char</span> news[M]=<span class="string">&quot;&quot;</span>;</span><br><span class="line">	len = <span class="number">0</span>;															<span class="comment">//新生成字符串长度</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=L;i&lt;=R;i ++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">judge</span>(s[i])==<span class="number">1</span> &amp;&amp; s[i]!=<span class="string">&#x27;I&#x27;</span>) s[i] = s[i]-<span class="string">&#x27;A&#x27;</span>+<span class="string">&#x27;a&#x27;</span>;			<span class="comment">//大写转小写</span></span><br><span class="line">		<span class="keyword">if</span> (s[i]==<span class="string">&#x27;?&#x27;</span>) s[i] = <span class="string">&#x27;!&#x27;</span>;										<span class="comment">//？转！</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">judge</span>(s[i])==<span class="number">4</span> &amp;&amp; len!=<span class="number">0</span> &amp;&amp; news[len<span class="number">-1</span>]==<span class="string">&#x27; &#x27;</span>) <span class="keyword">continue</span>;		<span class="comment">//删除连续空格</span></span><br><span class="line">		<span class="keyword">if</span> (len!=<span class="number">0</span> &amp;&amp; news[len<span class="number">-1</span>]==<span class="string">&#x27; &#x27;</span> &amp;&amp; <span class="built_in">judge</span>(s[i])==<span class="number">-1</span>) len --;		<span class="comment">//删除标点符号前的空格</span></span><br><span class="line">		news[len ++] = s[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;(<span class="type">int</span>)<span class="built_in">strlen</span>(news);i ++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">independ</span>(news,<span class="string">&quot;can you&quot;</span>,i)) cout &lt;&lt; <span class="string">&quot;I can&quot;</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">independ</span>(news,<span class="string">&quot;could you&quot;</span>,i)) cout &lt;&lt; <span class="string">&quot;I could&quot;</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">independ</span>(news,<span class="string">&quot;I&quot;</span>,i) || <span class="built_in">independ</span>(news,<span class="string">&quot;me&quot;</span>,i)) cout &lt;&lt; <span class="string">&quot;you&quot;</span>;</span><br><span class="line">		<span class="keyword">else</span> cout &lt;&lt; news[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//词汇替换</span></span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//cout &lt;&lt; news &lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//freopen(&quot;L1-8.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d\n&quot;</span>,&amp;n); </span><br><span class="line">	<span class="keyword">while</span> (n --)</span><br><span class="line">	&#123;</span><br><span class="line">		cin.<span class="built_in">getline</span>(s,<span class="keyword">sizeof</span> s);</span><br><span class="line">		cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">		<span class="built_in">work</span>(s);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;	</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h2 id="L2-1-特立独行的幸福"><a href="#L2-1-特立独行的幸福" class="headerlink" title="L2-1 特立独行的幸福"></a>L2-1 特立独行的幸福</h2><p>L2一上来就是这道题，被出题者的概念绕晕了，还好看了示例就明白了，就是一条路走到底，看看有没有环，有环就标记-1。输出时在判断一下素数就好，也不需要筛什么素数，这种难度的题，想超时都难。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span><span class="number">+7</span>;</span><br><span class="line"><span class="type">int</span> A,B;</span><br><span class="line"><span class="type">int</span> a[N],vis[N],p[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">prime</span><span class="params">(<span class="type">int</span> x)</span>				<span class="comment">//素数判断</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="built_in">floor</span>(<span class="built_in">sqrt</span>(x));i ++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (x%i==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> x)</span>					<span class="comment">//各位数字平方和</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (x)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> t = x%<span class="number">10</span>;</span><br><span class="line">		ret += t*t;</span><br><span class="line">		x/=<span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span>					<span class="comment">//一条路走到底</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a[x]) <span class="keyword">return</span> a[x];		<span class="comment">//走过了，直接返回信息</span></span><br><span class="line">	<span class="type">int</span> next = <span class="built_in">calc</span>(x);</span><br><span class="line">	<span class="keyword">if</span> (!vis[next])</span><br><span class="line">	&#123; </span><br><span class="line">		vis[next] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">dfs</span>(next) == <span class="number">-1</span>) <span class="keyword">return</span> a[x] = <span class="number">-1</span>;	<span class="comment">//走出了环，直接返回-1</span></span><br><span class="line">		p[next] = <span class="number">1</span>;</span><br><span class="line">		a[x] = <span class="built_in">dfs</span>(next)<span class="number">+1</span>;						<span class="comment">//每走一步，记录步数</span></span><br><span class="line">		vis[next] = <span class="number">0</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> a[x] = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">return</span> a[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	a[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;A,&amp;B);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=A;i&lt;=B;i ++)</span><br><span class="line">		a[i] = <span class="built_in">dfs</span>(i);</span><br><span class="line">	<span class="type">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=A;i&lt;=B;i ++)</span><br><span class="line">		<span class="keyword">if</span> (a[i]&gt;<span class="number">0</span> &amp;&amp; !p[i]) flag = <span class="number">1</span>,<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,i,(a[i]<span class="number">-1</span>)*(<span class="number">1</span>+<span class="built_in">prime</span>(i)));	<span class="comment">//这样写挺巧妙的吧</span></span><br><span class="line">	<span class="keyword">if</span> (!flag) <span class="built_in">printf</span>(<span class="string">&quot;SAD\n&quot;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h2 id="L2-2-冰岛人"><a href="#L2-2-冰岛人" class="headerlink" title="L2-2 冰岛人"></a>L2-2 冰岛人</h2><p>这是一道与树相关的题，没用到什么树的算法，只需要知道树这一概念即可A掉此题。<br>这道题我承认我的程序是有点问题的，但思路没啥大问题，最后通过特判过了那一个点。可以参考其他人AC的代码。<br>建树，找LCA，我看到有些人用并查集，其实可以不用。直接把所有的树根，指向虚拟化的根0。<br>首先读入时的字符串处理，直接砍掉后缀就好，顺便根据特征字符标记男女。<br>对这道题我用了<code>C++</code>的<code>map</code>，主要是为了方便映射字符串（名字）和对应的编号，对于<code>C</code>选手，可以选用更优雅的字符串<code>hash</code>，省去学习及使用<code>C++ STL</code>的烦恼。<br>后面发现<code>C++ string</code>转<code>C语言 char *s</code>可以不用<code>string()</code>强制类型转换。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">125</span>,N = <span class="number">1e5</span><span class="number">+7</span>;</span><br><span class="line"><span class="type">int</span> n,m,dep[N];</span><br><span class="line">map &lt;string,<span class="type">int</span>&gt; maps;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> name[M],fname[M];</span><br><span class="line">	<span class="type">int</span> sex;</span><br><span class="line">&#125; h[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gf</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="keyword">return</span> maps[<span class="built_in">string</span>(h[x].fname)];&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LCA</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>							<span class="comment">//垃圾一步步求LCA方法，想用logn方法我不拦你</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (dep[x]&gt;dep[y]) x = <span class="built_in">gf</span>(x);</span><br><span class="line">	<span class="keyword">while</span> (dep[x]&lt;dep[y]) y = <span class="built_in">gf</span>(y);</span><br><span class="line">	<span class="keyword">while</span> (x!=y) x = <span class="built_in">gf</span>(x),y = <span class="built_in">gf</span>(y);</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">char</span> s1[],<span class="type">char</span> s2[],<span class="type">char</span> s3[],<span class="type">char</span> s4[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (maps[<span class="built_in">string</span>(s1)]==<span class="number">0</span> || maps[<span class="built_in">string</span>(s3)]==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">	<span class="type">int</span> L = maps[<span class="built_in">string</span>(s1)],R = maps[<span class="built_in">string</span>(s3)];				<span class="comment">//找节点编号</span></span><br><span class="line">	<span class="keyword">if</span> (h[L].sex==h[R].sex) <span class="keyword">return</span> <span class="number">-1</span>;							<span class="comment">//同性恋</span></span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> id = <span class="built_in">LCA</span>(L,R);</span><br><span class="line">	<span class="comment">//if (id==L || id==R) return 0;</span></span><br><span class="line">	<span class="keyword">if</span> (dep[R]-dep[L]==<span class="number">4</span>) <span class="keyword">return</span> <span class="number">1</span>;								<span class="comment">//特判代码，不然有一个点会挂</span></span><br><span class="line">	<span class="keyword">if</span> ((dep[L]-dep[id]&lt;<span class="number">4</span> || dep[R]-dep[id]&lt;<span class="number">4</span>) &amp;&amp; id) <span class="keyword">return</span> <span class="number">0</span>; <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="comment">//判断两个人与他们最近公共祖先的关系，相差了几代</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span>		<span class="comment">//生成每个人所处于树的深度</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (dep[x]) <span class="keyword">return</span> dep[x];</span><br><span class="line">	<span class="keyword">return</span> dep[x] = <span class="built_in">dfs</span>(<span class="built_in">gf</span>(x))<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//freopen(&quot;L2-2.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i ++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; h[i].name &gt;&gt; h[i].fname;</span><br><span class="line">		<span class="type">char</span> ch = h[i].fname[<span class="built_in">strlen</span>(h[i].fname)<span class="number">-1</span>];</span><br><span class="line">		<span class="keyword">if</span> (ch==<span class="string">&#x27;m&#x27;</span> || ch==<span class="string">&#x27;n&#x27;</span>) h[i].sex = <span class="number">1</span>; <span class="keyword">else</span> h[i].sex = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (ch==<span class="string">&#x27;m&#x27;</span> || ch==<span class="string">&#x27;f&#x27;</span>) h[i].fname[<span class="built_in">strlen</span>(h[i].fname)<span class="number">-1</span>] =<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span> (ch==<span class="string">&#x27;n&#x27;</span>) h[i].fname[<span class="built_in">strlen</span>(h[i].fname)<span class="number">-4</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span> (ch==<span class="string">&#x27;r&#x27;</span>) h[i].fname[<span class="built_in">strlen</span>(h[i].fname)<span class="number">-7</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">		maps[<span class="built_in">string</span>(h[i].name)] = i;								<span class="comment">//映射此人名字及其编号</span></span><br><span class="line">		<span class="comment">//cout &lt;&lt; h[i].name &lt;&lt; &quot; &quot; &lt;&lt; h[i].fname &lt;&lt; &quot; &quot; &lt;&lt; h[i].sex &lt;&lt; endl;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//字符串处理，标记男女</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i ++)</span><br><span class="line">		<span class="built_in">dfs</span>(i);</span><br><span class="line">	<span class="comment">//为了生成每个人所在树的深度。也就是有多少个祖先</span></span><br><span class="line">	cin &gt;&gt; m;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i ++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">char</span> s1[M],s2[M],s3[M],s4[M];</span><br><span class="line">		cin &gt;&gt; s1 &gt;&gt; s2 &gt;&gt; s3 &gt;&gt; s4;</span><br><span class="line">		<span class="type">int</span> t = <span class="built_in">query</span>(s1,s2,s3,s4);</span><br><span class="line">		<span class="keyword">if</span> (t==<span class="number">-2</span>) cout &lt;&lt; <span class="string">&quot;NA&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">if</span> (t==<span class="number">-1</span>) cout &lt;&lt; <span class="string">&quot;Whatever&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">if</span> (t==<span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">if</span> (t==<span class="number">1</span>) cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h2 id="L2-3-深入虎穴"><a href="#L2-3-深入虎穴" class="headerlink" title="L2-3 深入虎穴"></a>L2-3 深入虎穴</h2><p>首先点名表扬我们2队第1，怒A此题，不给1队一点颜面。<br>这道题确实如出题着所说有坑，你要先找到入度为0的点，从哪一个口进入，然后找深度最深的节点。<br>当你会了搜索，你可以靠搜索完成70%的方案种类算法题%，然而效率是最差的。<br>我存树是采用存图的做法，用的模拟链表，照顾<code>C语言</code>选手，实际上一直以来我都是很少用<code>C++ STL</code>的，除非是因为我懒。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span><span class="number">+7</span>;</span><br><span class="line"><span class="type">int</span> rd[N],e[N],a[N];</span><br><span class="line"><span class="type">int</span> ans,maxx,tot,n,m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> y,next;</span><br><span class="line">&#125; h[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>				<span class="comment">//给图加边</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	tot ++;</span><br><span class="line">	h[tot].y = y;</span><br><span class="line">	h[tot].next = e[x];</span><br><span class="line">	e[x] = tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> dep,<span class="type">int</span> x)</span>				<span class="comment">//搜索走每一条边</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	a[x] = dep;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = e[x];i;i = h[i].next)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">dfs</span>(dep<span class="number">+1</span>,h[i].y);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//freopen(&quot;L2-3.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"></span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; m;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j ++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> t;</span><br><span class="line">			cin &gt;&gt; t;</span><br><span class="line">			<span class="built_in">add</span>(i,t);</span><br><span class="line">			rd[t] ++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i ++)</span><br><span class="line">		<span class="keyword">if</span> (!rd[i]) <span class="built_in">dfs</span>(<span class="number">1</span>,i);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i ++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (a[i]&gt;maxx) 			<span class="comment">//找最大值记录编号</span></span><br><span class="line">		&#123;</span><br><span class="line">			maxx = a[i];</span><br><span class="line">			ans = i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;	</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h2 id="L2-4-彩虹瓶"><a href="#L2-4-彩虹瓶" class="headerlink" title="L2-4 彩虹瓶"></a>L2-4 彩虹瓶</h2><p>考场上我看此题AC率挺高，就做了此题，结果发现废话了一堆，就是判断给定的入栈顺序，能否顺利出栈。并限定栈的大小。<br>考试时挂了挺多的，我也不明白为啥，只不过我是用<code>C++ stack</code>，复盘直接用数组模拟的栈就过了。<br>嗯！或许<code>C++ STL</code>不够友好</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e3</span><span class="number">+7</span>;</span><br><span class="line"><span class="type">int</span> n,m,k;</span><br><span class="line"><span class="type">int</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//freopen(&quot;L2-4.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i ++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> now = <span class="number">0</span>;</span><br><span class="line">		<span class="type">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">		s[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i ++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (s[<span class="number">0</span>]&gt;m) flag = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">while</span> (s[<span class="number">0</span>] &amp;&amp; s[s[<span class="number">0</span>]]==now<span class="number">+1</span>) now ++,s[<span class="number">0</span>] --;		<span class="comment">//弹出栈顶元素，while有可能会出去很多元素</span></span><br><span class="line">			<span class="type">int</span> t;</span><br><span class="line">			cin &gt;&gt; t;</span><br><span class="line">			<span class="keyword">if</span> (t==now<span class="number">+1</span>) 										<span class="comment">//是否不用存到栈中，直接出去</span></span><br><span class="line">			&#123;</span><br><span class="line">				now ++;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			s[++ s[<span class="number">0</span>]] = t;										<span class="comment">//压栈</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (s[<span class="number">0</span>] &amp;&amp; s[s[<span class="number">0</span>]]==now<span class="number">+1</span>) now ++,s[<span class="number">0</span>] --;</span><br><span class="line">		<span class="comment">//结束了在执行出栈操作一次</span></span><br><span class="line">		flag = flag &amp;&amp; !s[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">if</span> (flag) cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl; <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;	</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h2 id="L3"><a href="#L3" class="headerlink" title="L3"></a>L3</h2><p>等网上的大佬做吧<br>前面两题还好，后面那道题，幸亏没机会见此题，我高数也才刚学到偏导，这么大的数据量<code>C++</code>都要读入优化了，不知<code>java</code>怎么样。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>在知乎上似乎找到了出题者，顺着这位出题者的思路就容易写出代码了<br><a href="https://www.zhihu.com/question/318072788/answer/636876963?utm_source=wechat_session&utm_medium=social&utm_oi=592115167832838144">知乎</a></p>
]]></content>
      <categories>
        <category>信息学</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>天梯杯</tag>
      </tags>
  </entry>
  <entry>
    <title>2017高考试题分析</title>
    <url>/2017/2017%E9%AB%98%E8%80%83%E8%AF%95%E9%A2%98%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="语文"><a href="#语文" class="headerlink" title="语文"></a>语文</h1><h2 id="论述类文本阅读"><a href="#论述类文本阅读" class="headerlink" title="论述类文本阅读"></a>论述类文本阅读</h2><h3 id="失误分析"><a href="#失误分析" class="headerlink" title="失误分析"></a>失误分析</h3><p>缺少对文章应有的标记，时间分配不足，要在文章中找到相应的句子验证选项的正确性。</p>
<h2 id="文学类文本阅读"><a href="#文学类文本阅读" class="headerlink" title="文学类文本阅读"></a>文学类文本阅读</h2><h3 id="失误分析-1"><a href="#失误分析-1" class="headerlink" title="失误分析"></a>失误分析</h3><p>对文章主旨理解有误，造成大面积的失分。文章主旨：帮助别人，也是帮助自己<br>简答题答题的分析角度不够多<br>小说是为了塑造人物形象，而文章塑造出不畏艰险，认真负责，热心救人的科研工作者的形象。</p>
<h2 id="文言文阅读"><a href="#文言文阅读" class="headerlink" title="文言文阅读"></a>文言文阅读</h2><h3 id="失误分析-2"><a href="#失误分析-2" class="headerlink" title="失误分析"></a>失误分析</h3><p>断句需要对这段话有全面的了解，了解文意。<br>翻译题需要熟练掌握重要实词的意思。</p>
<h2 id="古代诗词阅读"><a href="#古代诗词阅读" class="headerlink" title="古代诗词阅读"></a>古代诗词阅读</h2><h3 id="失误分析-3"><a href="#失误分析-3" class="headerlink" title="失误分析"></a>失误分析</h3><p>对诗词的理解不足，答题的层次不够深。</p>
<h2 id="默写"><a href="#默写" class="headerlink" title="默写"></a>默写</h2><h3 id="失误分析-4"><a href="#失误分析-4" class="headerlink" title="失误分析"></a>失误分析</h3><p>诗词的背诵记忆较薄弱，考试时脑子容易一片空白，要加强背诵及关键字的记忆。</p>
<h2 id="成语题"><a href="#成语题" class="headerlink" title="成语题"></a>成语题</h2><h3 id="失误分析-5"><a href="#失误分析-5" class="headerlink" title="失误分析"></a>失误分析</h3><p>成语的意思，褒贬意用法，相近成语的区分，了解不足。</p>
<h2 id="语言表达得体题"><a href="#语言表达得体题" class="headerlink" title="语言表达得体题"></a>语言表达得体题</h2><h3 id="失误分析-6"><a href="#失误分析-6" class="headerlink" title="失误分析"></a>失误分析</h3><p>要了解常用的口语用词，谦辞敬辞，在什么样的语言环境下要用到什么词。</p>
<h2 id="句子填空题"><a href="#句子填空题" class="headerlink" title="句子填空题"></a>句子填空题</h2><h3 id="失误分析-7"><a href="#失误分析-7" class="headerlink" title="失误分析"></a>失误分析</h3><p>最后一句分析的还不是很到位。根据上下文语意的分析，填空句子与上下文的连贯性，以及上下文中的提示来填空，句子的唯一性一般能确定下来。</p>
<h1 id="理科数学"><a href="#理科数学" class="headerlink" title="理科数学"></a>理科数学</h1><h2 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h2><h3 id="3-复数有关知识的考察"><a href="#3-复数有关知识的考察" class="headerlink" title="(3)复数有关知识的考察"></a>(3)复数有关知识的考察</h3><h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>需要熟练掌握复数的形式 $ z &#x3D; a + bi (a,b \in R)$<br>找出题设的反例，或者根据复数的通用形式进行运算，判断命题是否成立。</p>
<h4 id="失误分析-8"><a href="#失误分析-8" class="headerlink" title="失误分析"></a>失误分析</h4><p>做题时思考反例的时间太长，没有合理的用到复数的基本形式进行运算，再进行命题的判断，过于依赖寻找反例</p>
<h3 id="7-三视图"><a href="#7-三视图" class="headerlink" title="(7)三视图"></a>(7)三视图</h3><h4 id="失误分析-9"><a href="#失误分析-9" class="headerlink" title="失误分析"></a>失误分析</h4><p>三视图所对应的立体图形的作图，花费了较长时间。对基本的三视图所对应的立体图形不熟悉。</p>
<h3 id="9-三角函数"><a href="#9-三角函数" class="headerlink" title="(9)三角函数"></a>(9)三角函数</h3><h4 id="做法-1"><a href="#做法-1" class="headerlink" title="做法"></a>做法</h4><p>三角函数间的相互转化的规则记忆<br>例如：左加右减，横坐标伸长$n$倍，$\omega &#x3D; \frac{1}{n}$</p>
<h4 id="失误分析-10"><a href="#失误分析-10" class="headerlink" title="失误分析"></a>失误分析</h4><p>对三角函数变化的方法记忆模糊，花了一定的时间验证自己的记忆，以及验证答案的正确性。</p>
<h3 id="10-圆锥曲线"><a href="#10-圆锥曲线" class="headerlink" title="(10)圆锥曲线"></a>(10)圆锥曲线</h3><h4 id="做法-2"><a href="#做法-2" class="headerlink" title="做法"></a>做法</h4><p>在抛物线中，焦点弦的长度等于两交点到准线的距离和。<br>联立直线与抛物线方程组求解，得到相应的表达式<br>使用基本不等式$ a + b &gt;&#x3D; 2\sqrt{ab}$求得最小值</p>
<h4 id="失误分析-11"><a href="#失误分析-11" class="headerlink" title="失误分析"></a>失误分析</h4><p>考场中没有想到将焦点弦进行转换，觉得列方程组求解的过程过于复杂。继而，随便举例算的答案。</p>
<h3 id="11-对数-指数的运算比较"><a href="#11-对数-指数的运算比较" class="headerlink" title="(11)对数||指数的运算比较"></a>(11)对数||指数的运算比较</h3><h4 id="做法-3"><a href="#做法-3" class="headerlink" title="做法"></a>做法</h4><p>分别将$x,y,z$通过中间量表示出来，用除法比较两个式子的大小，用换底公式约分。</p>
<h4 id="失误分析-12"><a href="#失误分析-12" class="headerlink" title="失误分析"></a>失误分析</h4><p>考场中完全没有头绪，带数字进去比较，花费时间过长。</p>
<h3 id="12-数列的分组及数列的累加通项的计算"><a href="#12-数列的分组及数列的累加通项的计算" class="headerlink" title="(12)数列的分组及数列的累加通项的计算"></a>(12)数列的分组及数列的累加通项的计算</h3><h4 id="做法-4"><a href="#做法-4" class="headerlink" title="做法"></a>做法</h4><p>先将数列进行分组，在对前$k$组进行求和,对最后一组单独拿出来独立计算。<br>熟练使用 $T_{N} &#x3D; 1 + 2 + 4 + 2^{N-1} &#x3D; \frac{1 - 2 * 2^{N-1}}{1 - 2} &#x3D; 2^{N} - 1$</p>
<h4 id="失误分析-13"><a href="#失误分析-13" class="headerlink" title="失误分析"></a>失误分析</h4><p>考场时想到使用二进制的表示求和找规律，但是实在是没发现什么规律，暴力算过于复杂。没有想到可以将整个数列分组，在用求和公式求和计算。</p>
<h2 id="填空题"><a href="#填空题" class="headerlink" title="填空题"></a>填空题</h2><h3 id="16-几何平面图形的立体化-导数求最值"><a href="#16-几何平面图形的立体化-导数求最值" class="headerlink" title="(16)几何平面图形的立体化&amp;&amp;导数求最值"></a>(16)几何平面图形的立体化&amp;&amp;导数求最值</h3><h4 id="做法-5"><a href="#做法-5" class="headerlink" title="做法"></a>做法</h4><p>观察图形得知，外围的三个三角形是等腰全等三角形。可以设边长为x求得三棱锥体积的表达式。对表达式求到后，得最大值</p>
<h4 id="失误分析-14"><a href="#失误分析-14" class="headerlink" title="失误分析"></a>失误分析</h4><p>考场中没有算得三棱锥的表达式，将平面图形立体化。</p>
<h2 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h2><h3 id="17-2-三角函数求周长"><a href="#17-2-三角函数求周长" class="headerlink" title="(17)(2)三角函数求周长"></a>(17)(2)三角函数求周长</h3><h4 id="做法-6"><a href="#做法-6" class="headerlink" title="做法"></a>做法</h4><p>根据(1)凑出$cos(B+C)$解得角度A，由面积解得bc，用余弦定理得到$ b^2 + c^2 $,继而求出面积。</p>
<h4 id="失误分析-15"><a href="#失误分析-15" class="headerlink" title="失误分析"></a>失误分析</h4><p>没有想到可以用（1）所得结论来解体。盲目的使用正弦余弦定理。</p>
<h3 id="19-2-概率统计"><a href="#19-2-概率统计" class="headerlink" title="(19)(2)概率统计"></a>(19)(2)概率统计</h3><h4 id="失误分析-16"><a href="#失误分析-16" class="headerlink" title="失误分析"></a>失误分析</h4><p>当时看到就懵了，完全不知道要答什么，也没有耐心看后面的内容。</p>
<h3 id="20-2-圆锥曲线题-21-2-函数求导题"><a href="#20-2-圆锥曲线题-21-2-函数求导题" class="headerlink" title="(20)(2)圆锥曲线题&amp;&amp;(21)(2)函数求导题"></a>(20)(2)圆锥曲线题&amp;&amp;(21)(2)函数求导题</h3><h4 id="失误分析-17"><a href="#失误分析-17" class="headerlink" title="失误分析"></a>失误分析</h4><p>这部分内容较难，做题时时间不够。<br>圆锥曲线题花些时间还是可以做出来的。<br>函数求导题涉及到对a的分类讨论，情况比较多，最后一种情况难，平时也很少练。</p>
<h3 id="22-2-坐标系与参数方程"><a href="#22-2-坐标系与参数方程" class="headerlink" title="(22)(2)坐标系与参数方程"></a>(22)(2)坐标系与参数方程</h3><h4 id="失误分析-18"><a href="#失误分析-18" class="headerlink" title="失误分析"></a>失误分析</h4><p>对于这题而言，考场中使用的方法复杂，使用直线与椭圆相切的做法求直线到椭圆的最大值，相当耗时，尽管最后做了出来。</p>
<h1 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h1><h2 id="阅读B"><a href="#阅读B" class="headerlink" title="阅读B"></a>阅读B</h2><h3 id="失误分析-19"><a href="#失误分析-19" class="headerlink" title="失误分析"></a>失误分析</h3><ul>
<li>25.无中生有，误以为小猫头鹰受伤而文中并没有明确表示猫头鹰受伤，作者只是赶过去看情况。</li>
</ul>
<h2 id="阅读C"><a href="#阅读C" class="headerlink" title="阅读C"></a>阅读C</h2><h3 id="失误分析-20"><a href="#失误分析-20" class="headerlink" title="失误分析"></a>失误分析</h3><ul>
<li>28.原文句子意思理解不透，单词记忆不熟，类似于：awareness，significance，potential。造成选择错误。</li>
</ul>
<h2 id="阅读D"><a href="#阅读D" class="headerlink" title="阅读D"></a>阅读D</h2><h3 id="失误分析-21"><a href="#失误分析-21" class="headerlink" title="失误分析"></a>失误分析</h3><ul>
<li>32.选项单词意思理解有误。delicate——熟练的，portable——轻便的。文中说蒸馏装置的便携性强，可以折叠后纳入小包，并系在腰间。</li>
<li>33.接水器是整个蒸馏装置，而不是单个杯子，杯子虽能接水，但光杯子一个不能起到蒸馏作用。</li>
<li>34.看文章时没有注意到真正的最后一步是在塑料膜中央放置些石子将塑料膜压下去。</li>
</ul>
<h2 id="7选5"><a href="#7选5" class="headerlink" title="7选5"></a>7选5</h2><h3 id="失误分析-22"><a href="#失误分析-22" class="headerlink" title="失误分析"></a>失误分析</h3><p>填空处句子的上下文关联性，了解的不够细致。</p>
<h2 id="完形填空"><a href="#完形填空" class="headerlink" title="完形填空"></a>完形填空</h2><h3 id="失误分析-23"><a href="#失误分析-23" class="headerlink" title="失误分析"></a>失误分析</h3><ul>
<li>46.故事发生在上大学的第一周，引出后文学习手语的经历。而不是有会议。</li>
<li>48.不用语言交流，只用手部动作的想法（idea）吸引了我。不是交流的多少（amount）</li>
<li>52.不是想得到更多的手语练习，而是想要探索更多关于手语的东西。</li>
<li>57.prohibit——禁止，词语意思理解不到位</li>
<li>58.转折关系，instead——相反</li>
<li>59.句子理解，cause——造成</li>
</ul>
<h1 id="理综-132-46-32-54"><a href="#理综-132-46-32-54" class="headerlink" title="理综(132&#x3D;46+32+54)"></a>理综(132&#x3D;46+32+54)</h1><h2 id="单选题-生物"><a href="#单选题-生物" class="headerlink" title="单选题(生物)"></a>单选题(生物)</h2><ul>
<li><p>2.考试前看过台盼蓝用于检测细胞膜的完整性，选了A。双缩脲试剂实际上是与蛋白质中的肽键反应，氨基酸不含肽键，所以不能进行染色。</p>
</li>
<li><p>4.因为第二次作用时才有症状发生，第一次没有发生，所以是过敏反应，而不是呼吸抑制剂，抑制呼吸系统。考试时，没有想清为什么第一次作用是症状没有发生，而第二次发生了，错选D。</p>
</li>
</ul>
<h2 id="单选题-化学"><a href="#单选题-化学" class="headerlink" title="单选题(化学)"></a>单选题(化学)</h2><ul>
<li><p>7.合成纤维是人工合成的，与天然不同。宣纸，羊绒衫，棉衬衣都是天然材料，只有尼龙绳是合成的。考试时，不了解各个用品的材质。</p>
</li>
<li><p>8.蒸馏需要加热液体混合物，生砒是固体，文中是固-气-固的过程，升华符合要求。考试时，没注意蒸馏需要液体混合物。</p>
</li>
<li><p>9.(d)的二氯代物有6种，(d)中左右两边不在一个平面上。考试时认为(d)在同一平面上，二氯代物有6种。</p>
</li>
<li><p>11.C高硅铸铁是惰性辅助材料，不被损耗，D溶液环境不同需要根据腐蚀趋势，调整电流。A腐蚀电流就是钢管柱与海水之间的腐蚀作用，因为有外电路存在，所以腐蚀电流接近于0。考试时，不理解腐蚀电流的意思。</p>
</li>
</ul>
<h2 id="单选题-物理"><a href="#单选题-物理" class="headerlink" title="单选题(物理)"></a>单选题(物理)</h2><ul>
<li><p>14.没有区分好动量与冲量的不同，冲量是动量的变化量。因为动量守恒，火箭的动量大小等同于燃料的动量，方向相反。</p>
</li>
<li><p>16.每个微粒都受到三个力的作用，重力竖直向下，电场力竖直向上，a磁场力指向圆心，b磁场力竖直向上，c磁场力竖直向下。考试时，没有准确的分析出粒子的受力情况。$\therefore M_{b} &gt; M_{a} &gt; M_{c}$</p>
</li>
<li><p>18.题目的意思是让我们找出一种方案，使得紫铜薄板向左，向右，向上，向下，都可以产生磁通量的变化。只有A符合，考试时没有理解清题意。</p>
</li>
<li><p>19.同向电流相吸，异向电流相斥，根据这条原理作图，计算。关键在于对上述原理的理解与记忆。</p>
</li>
<li><p>20.结合$E &#x3D; \frac{kQ}{r^{2}}$与$W &#x3D; Uq$两个公式，计算。观察图像及图例，明白图像的意思。</p>
</li>
</ul>
<h2 id="简答题（物理）"><a href="#简答题（物理）" class="headerlink" title="简答题（物理）"></a>简答题（物理）</h2><ul>
<li><ol start="23">
<li></li>
</ol>
<p> (1)电压从0开始采用分压法,$ R_{x}^{2} &#x3D; R_{A}*R_{v} $,  故采用外接法，电压表量程不够，串联R0分压。考试时，时间不足。<br> (3)最小功率时，滑动变阻器阻值最大，$4&#x3D;U+10I$；最大功率时，滑动变阻器阻值最小,$4&#x3D;U+I$,画出这两个函数的对应图像，找交点，得到对应的U与I。再根据$W &#x3D; I^{2}*R$计算小灯泡的功率。时间不足，没有细想。</p>
</li>
<li><p>24.(2)$mgh_{2}-W_{f} &#x3D; \frac{1}{2}mv_{1}^{2}-\frac{1}{2}mv_{2}^{2}$，时间不足及信心不足，认真列式计算即可。</p>
</li>
<li><p>25.(1)由动量定理得：$E_{2}qt_{1}-E_{2}qt_{1}-2mgt_{1} &#x3D; mv_{b}-mv_{0}$<br> (2)$H_{0} &#x3D; \frac{v_{0}^{2}}{2g}$根据A，B点的相对位置进行讨论。$H &#x3D; \frac{H_{0}}{2} &#x3D; H_{1}+H_{2}$ ， $H_1 &#x3D; v_0t_1+\frac{1}{2}a_1t_1^2$;$H_2 &#x3D; v_Bt_1+\frac{1}{2}a_2t_1^2$ ;$ma_1 &#x3D; E_2q - mg ; ma_2 &#x3D; -E_2q-mg;E_1q &#x3D; mg$,$\because E_2&gt;E_1$ 得到对应的关系式。<br> 关键在于作图，电场强度与时间的图像，分析每个阶段粒子所属的状态：速度，受力情况等。(1)问相对简单，(2)问较难，需要分类讨论，字母运算，解不等式，并求出范围。计算复杂度高。</p>
</li>
</ul>
<h2 id="简答题（化学）"><a href="#简答题（化学）" class="headerlink" title="简答题（化学）"></a>简答题（化学）</h2><ul>
<li><ol start="26">
<li></li>
</ol>
<p> (1)a是玻璃导管，用于平衡气压。考试时，辨认不当，认为a是温度计。<br> (2)f是直型冷凝管。考试时，没有想起冷凝管具体的类型，只填了“冷凝管”。<br> (3)水蒸气充满管路，停止加热后，水蒸气冷凝成水，管路内压强减小，蒸馏水到吸入装置C。考试时，认为蒸馏水倒流进装置C，比较难，中间还有装置e。<br> (4)铵盐与氢氧化钠反应，氨气逸出。防止氨气逸出，造成环境污染。双层玻璃瓶起隔热保温作用。<br> (5)根据元素守恒，$NH_3*H_3BO_4 + HCl &#x3D; NH_4Cl + H_3BO_3$得知HCl与$NH_3*H_3BO_4$为$1:1$反应。$\therefore n(N) &#x3D; n(C_2H_3NO_2) &#x3D; n(HCl) &#x3D; cv*10^{-3} mol$,$m(N) &#x3D; 14cv*10^{-3}$，考试时，因题目涉及计算相关，比较复杂，就很快跳过了。</p>
</li>
<li><ol start="27">
<li></li>
</ol>
<p> (2)盐酸与钛铁矿反应生成$TiOCl_{4}^{2-}$和水。知晓反应物和生成物，配平就很简单了。考试时，没有搞清楚反应物是什么。<br> (3)从两方面考虑低于40℃，反应随温度升高而增大，高于40℃双氧水分解，氨水分解，反应物减少，印象反应进行。考试时，没有想明白高于40℃，反应为什么减缓。<br> (5)了解$K_{sp}$公式的计算方法，算得$1.0*10{-24}&gt;1.69*10^{-40}$,此时，无沉淀生成。考试时，时间不够。<br> (6)从图中获知反应物为$FePO_4和Li_2CO_3$，推得生成物有二氧化碳，水和$LiFePO_4$，关键在于反应物和生成物是什么。化学方程式考察中。反应物及生成物推断能力弱。</p>
</li>
<li><ol start="28">
<li></li>
</ol>
<p> (1)D.物质的还原性大小与微粒中元素的化合价及微粒结构有关，与其电离产生氢离子的浓度大小无关。B.同是二元弱酸，溶液中离子浓度越大，溶液的导电性就越强。考试时，对酸性强弱比较的方法理解不清。<br> (2)加快运算速度。考试时，花费了太多时间在运算中。<br> (3)三段式计算，设反应xmol物质，解得x&#x3D;0.01mol，$\therefore \alpha_1 &#x3D; \frac{0.01}{0.40}*100% &#x3D; 2.5%$；直接计算反应平衡常数K；$620K&gt;610K$温度升高，水的物质的量增大，平衡右移，反应吸热。$\alpha_2 &gt; \alpha_1$。</p>
</li>
</ul>
<h2 id="简答题（生物）"><a href="#简答题（生物）" class="headerlink" title="简答题（生物）"></a>简答题（生物）</h2><ul>
<li><ol start="29">
<li></li>
</ol>
<p> (1)将若干宿主细胞均分为甲、乙两组，分别用放射性同位素标记甲组培养基中的（T）与乙组培养基中的（U），用新型病毒分别侵染两组宿主细胞，于适宜环境中培养一段时间，检测甲乙两组中，新生病毒的放射性;<br> (2)若甲组检测到放射性，乙组未检测到放射性，则为DNA病毒；若甲组为检测到放射性，乙组检测到放射性，，则为RNA病毒。考试时，没见过这种生物简答题，考得不好。</p>
</li>
<li>30.表述不够清晰，二氧化碳、氧气的变化情况，进而影响光合作用，有氧呼吸。</li>
<li><ol start="31">
<li></li>
</ol>
<p> (3)内环境的作用主要为，①细胞生存的直接环境②细胞与外界环境进行物质交换的媒介。考试时，内环境的作用记忆不牢。</p>
</li>
<li><ol start="32">
<li></li>
</ol>
<p> (2)因为黑毛：白猫&#x3D;3:1，$\therefore$黑毛是显性，白毛是隐性。假设是否位于性染色体上。推测结果。<br> (3)用心数即可，你要漏掉一些特殊情况。</p>
</li>
</ul>
<h2 id="选做题（物理）"><a href="#选做题（物理）" class="headerlink" title="选做题（物理）"></a>选做题（物理）</h2><ul>
<li>33.(2)熟练运用$PV&#x3D;nRT$这个公式，抓住不变量，温度或体积不变。</li>
</ul>
<h2 id="选做题（化学）"><a href="#选做题（化学）" class="headerlink" title="选做题（化学）"></a>选做题（化学）</h2><ul>
<li>36.熟练掌握官能团的变化，各个有机物的名称。</li>
</ul>
<h2 id="选做题（生物）"><a href="#选做题（生物）" class="headerlink" title="选做题（生物）"></a>选做题（生物）</h2><ul>
<li><ol start="38">
<li></li>
</ol>
<p> (3)大肠杆菌作为受体细胞的优点有：易培养，繁殖快，单细胞，遗传物质简单。<br> (5)艾弗里等人的肺炎双球菌转化实验证明DNA是遗传物质，并证明将一种生物的DNA导入并整合到另一种生物的DNA上，并能稳定的遗传和表达，作为基因工程得以实现的理论基础。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>个人</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>20博客框架升级</title>
    <url>/2020/20%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6%E5%8D%87%E7%BA%A7/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一年过去了，又有时间可以来升级博客框架了。但是一年肯定要比一年进步的。所以这次升级也花了不少精力，为以后快速升级铺垫道路。<br>再看去年的博客，发现NexT主题又换仓库了。这次仓库是<a href="https://github.com/next-theme/hexo-theme-next"><code>next-theme</code></a>。旧仓库只有V7的最后一个版本。<br>现在可以拥抱V8版本了，现在已经是V8.0.2。整个主题已经趋近成熟，因此没有太多的变化。</p>
<h1 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h1><p>这次才知道上次的hexo升级根本没成功，还在用3.X的版本，npm安装会在目录下生成一个<code>package.json</code>文件。要修改这个文件中的版本依赖，才会安装上最新版本的hexo。</p>
<p>升级完成之后，发现主题挂了，看来要连带升级主题才行。</p>
<p>比以前进步的是，这次我希望将配置分离做了。自从认真研读了Clash文档，感叹这才是现代程序应该有的样子。配置程序分离，配置尽可能的简单。配置中的内容可复用，从网络直接拉取配置文件，将自己不大关心的配置文件修改外包出去。这样配置内容就非常精简了。程序也使用Docker容器打包，加多一条配置指定版本的<code>docker-compose.yml</code>就OK了。</p>
<p>从NexT的官网文档得知，目前的主题配置文件分离方案，是在站点配置文件目录下创建<code>_config.next.yml</code>，文件默认会以覆盖写的方式加载到之前的主题中，这就很像Linux中的overlay了，这样可以做到读写分离。包括语言文件，也可以通过这种方式来改写。</p>
<p>所以整个迁移过程异常的顺利，为了减少对NexT主题的修改，所以这次就不改NexT源代码了。毕竟改源代码在维护，太累人了。</p>
<p>当然现在阿里云的OSS已经支持静态网站了，甚至还有全球CDN加速功能。真香！</p>
<p>也同上次一样升级之后发现，语法高亮挂了，因为以前我没有在Markdown代码中填写代码语言的习惯。而自动语法高亮功能貌似不能用了。所以回头把所有博客的代码语言给加了上去。顺便发现现在写的代码少了，写的配置倒是多了。</p>
<h2 id="来自主题作者的踩坑"><a href="#来自主题作者的踩坑" class="headerlink" title="来自主题作者的踩坑"></a>来自主题作者的踩坑</h2><p>升级框架前必读，不然不知道又会挂了些什么功能。<br><a href="https://github.com/next-theme/hexo-theme-next/issues/4">【必读】更新说明及常见问题</a></p>
<h2 id="Github-Action"><a href="#Github-Action" class="headerlink" title="Github Action"></a>Github Action</h2><p>这次顺便也把之前的Travis CI给换下来了，毕竟Github亲生的，肯定要比第三方要香。而且发现Github Action挺好用的，充分做好了代码复用。</p>
<p>下面是Github Action，当blog分支有push的时候自动部署博客到同仓库的Github Pages并上传到阿里云OSS，配置文件代码。</p>
<figure class="highlight yml"><figcaption><span>.github/workflows/deploy.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">Deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">blog</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-18.04</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">timezone</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">zcong1993/setup-timezone@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">          </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">source</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">          </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node.js</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;12&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Hexo</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">ACTION_DEPLOY_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_DEPLOY_PRI</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          mkdir -p ~/.ssh/</span></span><br><span class="line"><span class="string">          echo &quot;$ACTION_DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          chmod 700 ~/.ssh</span></span><br><span class="line"><span class="string">          chmod 600 ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string">          git config --global user.email &quot;&lt;email&gt;&quot;</span></span><br><span class="line"><span class="string">          git config --global user.name &quot;&lt;username&gt;&quot;</span></span><br><span class="line"><span class="string">          npm install hexo-cli -g</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string">          rm -rf node_modules &amp;&amp; npm install --force</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          hexo clean</span></span><br><span class="line"><span class="string">          hexo g</span></span><br><span class="line"><span class="string">          hexo d</span></span><br><span class="line"><span class="string"></span>          </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">ossutil</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">manyuanrong/setup-ossutil@v2.0</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">endpoint:</span> <span class="string">&quot;oss-cn-hongkong.aliyuncs.com&quot;</span></span><br><span class="line">          <span class="attr">access-key-id:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACCESS_KEY_ID</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">access-key-secret:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACCESS_KEY_SECRET</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deply</span> <span class="string">To</span> <span class="string">OSS</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          ossutil rm -rf oss://&lt;bucket&gt;/</span></span><br><span class="line"><span class="string">          ossutil cp -rf public oss://&lt;bucket&gt;/ </span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Sending</span> <span class="string">message</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">yakumioto/serverchan-action@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.sckey</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">text:</span> <span class="string">博客部署成功</span></span><br><span class="line">          <span class="attr">desp:</span> <span class="string">博客部署成功</span></span><br></pre></td></tr></table></figure>

<h1 id="功能变更"><a href="#功能变更" class="headerlink" title="功能变更"></a>功能变更</h1><ul>
<li>删除了文章中底部的知识共享许可协议</li>
<li>删除了花里胡哨的动画功能</li>
<li>去除了页面变宽以及文章半透明效果</li>
<li>增添了豆瓣观影 阅读功能显示</li>
<li>个人社交页仅显示图标</li>
<li>修改高亮配色</li>
</ul>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/weixin_42073018/article/details/89600027">Hexo博客中加入豆瓣读书功能</a></p>
<p><a href="http://yearito.cn/posts/hexo-writing-skills.html">Hexo 搭建个人博客系列：写作技巧篇</a></p>
]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>23寒假工作</title>
    <url>/2023/23%E5%AF%92%E5%81%87%E5%B7%A5%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="论文"><a href="#论文" class="headerlink" title="论文"></a>论文</h1><p>主要阅读了两篇相关论文，一篇是关于电动车充电桩的跨链方案，另一篇是有关于跨链技术的综述。</p>
<ul>
<li><a href="/2022/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E4%B9%8B%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%85%B1%E4%BA%AB%E8%AE%A1%E8%B4%B9%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%B7%A8%E9%93%BE%E5%8F%AF%E4%BF%A1%E5%A3%B0%E8%AA%89%E6%96%B9%E6%A1%88/">A cross-chain trusted reputation scheme for a shared charging platform based on blockchain</a></li>
<li>区块链跨链技术发展及应用研究综述</li>
</ul>
<h1 id="IPFS"><a href="#IPFS" class="headerlink" title="IPFS"></a>IPFS</h1><p>最初是看到彭师兄的博士学位论文上，有关于IPFS的介绍，然后就去了解了一下。<br><a href="https://www.youtube.com/watch?v=cIJVg19RSsQ&t=109s&ab_channel=%E6%9D%8E%E6%9F%A5%E8%AF%B4">李查说IPFS：彻底搞懂 IPFS 白皮书 | Curious where it all began?</a><br><a href="https://www.youtube.com/watch?v=5Uj6uR3fp-U&t=269s&ab_channel=SimplyExplained">IPFS - 简明解释</a></p>
<h1 id="哈希锁定"><a href="#哈希锁定" class="headerlink" title="哈希锁定"></a>哈希锁定</h1><p><a href="https://picture.iczhiku.com/weixin/message1630568024128.html">科普 | 跨链技术方案之哈希锁定</a></p>
<h1 id="论文管理与Word排版"><a href="#论文管理与Word排版" class="headerlink" title="论文管理与Word排版"></a>论文管理与Word排版</h1><ul>
<li>Zotero</li>
<li><a href="https://www.bilibili.com/video/BV1YQ4y1M73G/?p=1&vd_source=a4d76d1247665a7e7bec15d15fd12349">Word论文排版教程</a></li>
</ul>
<h1 id="MIT-Missing-Semester"><a href="#MIT-Missing-Semester" class="headerlink" title="MIT-Missing-Semester"></a>MIT-Missing-Semester</h1><ul>
<li><a href="https://missing-semester-cn.github.io/">MIT-Missing-Semester</a></li>
<li><a href="/2022/MIT-Missing-Semester/">博文</a></li>
</ul>
<h1 id="会议"><a href="#会议" class="headerlink" title="会议"></a>会议</h1><p>师兄12月12日分享的视频，主要听了前两位演讲者的分享。<br>第一位演讲者微众银行带来了行业上对跨链的解决方案，<br>第二位演讲者是来自北航的老师，主要讲解了我们为啥要跨链和跨链中遇到的问题，及现有的解决方案。</p>
<h1 id="一些新技术的应用"><a href="#一些新技术的应用" class="headerlink" title="一些新技术的应用"></a>一些新技术的应用</h1><ul>
<li>数字人民币</li>
<li>ChatGPT</li>
</ul>
<h1 id="未来的想法"><a href="#未来的想法" class="headerlink" title="未来的想法"></a>未来的想法</h1><p>做一个健康码的跨链应用。<br>比方说澳门健康码用Fabric链，粤康码用BCOS链，那么就可以通过跨链技术，实现澳门健康码和粤康码的互通。<br>需要研究链上存储的数据结构，链上数据的权限管理，链上数据的可见性问题。<br>如何跨链向对方链上证明信息的有效，如核酸信息等。</p>
]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>9.4总结</title>
    <url>/2015/9-4%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>今天是5校联考的第一天,然而我犯了很多小错误。</p>
<hr>
<p>T1：感觉像是数学问题，然而并没有发现什么规律。最后还是想着暴力，去打搜索，每一次向上有四种转移。但是我计算的时间复杂度计算错误。所以我认为拿不了太多分。最后，交了搜索，只拿了30分。因为我犯了一个错误，没有把max开到long long的最大范围，只开到了int的最大范围。改一下这个可以拿50分。最后与100分失之交臂，是因为我搜索的减枝做的不是很好。一个很给力的剪枝（r-l+1&gt;l）没有发现，这个剪枝是答案可行性剪枝。</p>
<hr>
<p>T2：一开始想到与题解类似的想法，但是因为无法处理好合法串中有可能在一个位置右括号多余左括号，最后面发现我完全想错了。所以就抛弃了这种方法。转而向题目所给的（A）与AB方向想，先找到最简单的符合条件的串，再一次扩展，就能把这个字符串中多有的合法子串找出。最后我先打了个暴力，然后就去打这种方法。但最后因为时间不够没有调出来。只不过我觉得调出来也应该拿不到满分，因为有一些东西可以与处理出来，一个个构造相加太慢了。后面是看到一个人的程序，他的想法和我的类似，只不过他通过多个预处理实现了出来，每一组数据的时间复杂度只有O（len）。</p>
<hr>
<p>T3：这道题非常的神奇，因为完全摸不着正解的头绪，蒟蒻只能打搜索了，然而又一次我的搜索打挂了。我并没有测多组数据，然后多组数据就挂了。最后面发现是哈夫曼树，然后跟着WWT大神的证明听了一遍，然后又请教了一下LB，最后将这道题的解与哈夫曼树相同性的证明弄懂了</p>
]]></content>
      <categories>
        <category>信息学</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>ACM比赛相关</title>
    <url>/2020/ACM%E6%AF%94%E8%B5%9B%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="ACM-ICPC是啥？（ACM赛制）"><a href="#ACM-ICPC是啥？（ACM赛制）" class="headerlink" title="ACM&#x2F;ICPC是啥？（ACM赛制）"></a>ACM&#x2F;ICPC是啥？（ACM赛制）</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>计算机协会（英语：Association for Computing Machinery，简称ACM）是一个世界性的计算机从业员专业组织，创立于1947年，是世界上第一个科学性及教育性计算机学会，亦是现时全球最大的计算机相关学会。(<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%8F%E4%BC%9A">维基百科</a>)<br>国际大学生程序设计竞赛（英语：International Collegiate Programming Contest, ICPC）是一项旨在展示大学生创新能力、团队精神和在压力下编写程序、分析和解决问题能力的年度竞赛。(<a href="https://zh.wikipedia.org/wiki/%E5%9B%BD%E9%99%85%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B">维基百科</a>)</p>
</blockquote>
<h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><p>ICPC以团队的形式代表各学校参赛，每队由3名队员组成。<br>比赛期间，每队使用1台电脑需要在5个小时内使用 Java、C、C++、Kotlin 或 Python 中的一种编写程序解决8到13个问题。程序完成之后提交裁判运行，运行的结果会判定为”AC(正确)&#x2F;WA（错误）&#x2F;TLE（超时）&#x2F;MLE（超出内存限制）&#x2F;RE（运行错误）&#x2F;PE（格式错误）”中的一种并及时通知参赛队。每队在正确完成一题后，组织者将在其位置上升起一只代表该题颜色的气球。<br>最后的获胜者为正确解答题目最多且总用时最少的队伍。每道试题用时将从竞赛开始到试题解答被判定为正确为止，其间每一次提交运行结果被判错误的话将被加罚20分钟时间，未正确解答的试题不记时。例如：A、B两队都正确完成两道题目，其中A队提交这两题的时间分别是比赛开始后1:00和2:45，B队为1:20和2:00，但B队有一题提交了2次。这样A队的总用时为1:00+2:45&#x3D;3:45而B队为1:20+2:00+0:20&#x3D;3:40，所以B队以总用时少而获胜。<br>与其它计算机程序竞赛（例如国际信息学奥林匹克，IOI）相比，ICPC的特点在于其为3人团队作战且题量大，每队需要5小时内完成8道题目，甚至更多。除此之外，一支队伍有3名队员却只有1台电脑，使得时间显得更为紧张。因此除了扎实的编程能力，良好的团队协作和心理素质同样是获胜的关键。</p>
<h2 id="真题"><a href="#真题" class="headerlink" title="真题"></a><a href="https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&Itemid=8">真题</a></h2><h1 id="还有另外一种赛制（OI赛制）"><a href="#还有另外一种赛制（OI赛制）" class="headerlink" title="还有另外一种赛制（OI赛制）"></a>还有另外一种赛制（OI赛制）</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>国际信息学奥林匹克竞赛（International Olympiad in Informatics，IOI），是面向中学生一年一度的信息学科竞赛。第一届国际信息学奥林匹克竞赛于1989年在保加利亚的布拉维茨举行。<br>这项竞赛包含两天的计算机程序设计，主要编程语言以C++为主，解决各类算法问题。</p>
<h2 id="规则-1"><a href="#规则-1" class="headerlink" title="规则"></a>规则</h2><p>在两天的比赛日中，一般来说参赛选手每一天都需要在5小时内一台计算机的帮助下独立解决3道题目。比赛中不允许任何形式的交流或是查阅参考资料。通常，参赛选手都要为每一道题目编写一个程序（编程语言为C、C++或是Pascal）并在比赛结束之前提交。随后大赛的主办方将采用若干组测试数据对程序进行测试。这些测试数据被分作若干个子任务，选手只有通过某个子任务中所有的测试点才能获得对应的分数。如果根据给定的某一组输入数据，程序可以在限定的内存空间和时间内正确的得到输出结果，那么该名选手即获得这一组数据的相应分数。[1]近年出现了一种新的比赛题型，提交答案题——在比赛开始之间参赛选手将获得各组测试数据，他们要提交的是相应的计算结果，而非程序本身。选手可以通过编写程序、手工计算或者两者结合来完成这类题目。另一种新题型是交互题，它要求选手编写的程序与测试系统进行交互（一般是通过调用题目给出的交互器），选手将通过询问或操作来试图求解问题。</p>
<h1 id="适合初学者的比赛"><a href="#适合初学者的比赛" class="headerlink" title="适合初学者的比赛"></a>适合初学者的比赛</h1><p><a href="http://dasai.lanqiao.cn/">蓝桥杯</a><br><a href="https://gplt.patest.cn/regulation">天梯赛</a><br>双北杯</p>
<h1 id="适合初学者刷题的网站"><a href="#适合初学者刷题的网站" class="headerlink" title="适合初学者刷题的网站"></a>适合初学者刷题的网站</h1><p><a href="https://vjudge.net/">Vjudge</a><br><a href="https://www.acwing.com/">Acwing</a></p>
<h1 id="比赛评测-OJ"><a href="#比赛评测-OJ" class="headerlink" title="比赛评测(OJ)"></a>比赛评测(OJ)</h1><p><a href="https://blog.csdn.net/dghcs18/article/details/97930388">常见的OJ评测结果</a><br><a href="https://gplt.patest.cn/regulation">天梯赛评测结果</a><br>OJ评测原理讲解<br>fc的使用</p>
<h1 id="C-选手选用的工具"><a href="#C-选手选用的工具" class="headerlink" title="C++选手选用的工具"></a>C++选手选用的工具</h1><ul>
<li>DEVCPP</li>
<li>Notepad++</li>
<li>VSC</li>
<li>计算器(calc)</li>
<li>画图(mspaint)</li>
<li>配置环境变量</li>
</ul>
<h1 id="相关网站"><a href="#相关网站" class="headerlink" title="相关网站"></a>相关网站</h1><p><a href="https://paste.ubuntu.com/">Ubuntu pastebin</a><br><a href="http://cplusplus.com/">The C++ Resources Network</a><br><a href="https://oeis.org/?language=chineseS">数列网站</a></p>
<h1 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h1><p>软件的安装配置与使用</p>
<h2 id="DEVCPP"><a href="#DEVCPP" class="headerlink" title="DEVCPP"></a>DEVCPP</h2><p><a href="https://blog.csdn.net/qq_40875354/article/details/94389306">DevC++调试时闪退问题解决</a><br>Devcpp可能遇到的中文异常问题</p>
<h2 id="VSC"><a href="#VSC" class="headerlink" title="VSC"></a>VSC</h2><p>c++相关扩展安装</p>
<h1 id="开始做题"><a href="#开始做题" class="headerlink" title="开始做题"></a>开始做题</h1><p>看题，理解题意，画图演算，计算每一个测试用例的结果是否与给出的结果一致。<br>看数据范围，计算时间空间复杂度<br>开始编程，上模板：<br>调试方法介绍</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="/2015/11/03/NOIP-%E8%80%83%E5%89%8D%E5%BF%85%E5%A4%87/">【NOIP】考前必备</a></p>
]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>AC自动机算法详解</title>
    <url>/2015/AC%E8%87%AA%E5%8A%A8%E6%9C%BA%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
      <categories>
        <category>信息学</category>
        <category>转载</category>
      </categories>
      <tags>
        <tag>AC自动机</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS学习记录</title>
    <url>/2019/CentOS%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我前面写的VPS使用记录，主要是针对Ubuntu操作系统的。因为，最开始选服务器的时候我就对Ubuntu最为熟悉。细数我接触过的linux发行版，用的最多的就是Ubuntu和Debian，而我正式接触的第一个Linux发行版就是Debian。我只记得Debian特别的稳定，而且早期的Gnome2桌面环境很像Win XP，而且安装过程十分曲折，处理麻将字，软件源更新缓慢，系统不带桌面等种种的坑。用了大概一学期左右，发现Debian的桌面软件十分匮乏，国内的软件商主要都是开发Ubuntu的软件，尽管都是使用同样的包管理器，但依旧有一些Ubuntu上能正常运行的桌面应用，无法在Debian上运行。然后看到周围的同学都在用Ubuntu，就我在傻呵呵的用着Debian。所以，我又改用Ubuntu了，那时的我被Gnome3华丽的桌面环境深深的吸引，并且强烈反感Ubuntu的Unity桌面，觉得巨丑无比。所以，也促使我学会更换其他桌面环境。然而，说了这么多，还没入正题。本来用着Debian系好好的，为啥要换RedHat系的CentOS。因为郭老师推荐用CentOS，大企业用的多，听说CentOS稳定？所以想来试一试，所以就借此机会接触一下，要是真的不错，可能会将我的个人服务器切到Centos。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>因为用的阿里云，没有体验到安装过程，所以也不知道安装过程是怎么样的。</p>
<h1 id="yum包管理器"><a href="#yum包管理器" class="headerlink" title="yum包管理器"></a>yum包管理器</h1><p><a href="https://blog.csdn.net/huangniu306/article/details/8824571">CentOS yum的详细使用教程</a><br>这个包管理器除了能直接从源下载包，自动安装，解决依赖以外，还能安装rpm的包。<br>部分软件包命名与Ubuntu不同</p>
<h1 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h1><p><a href="https://blog.51cto.com/damaicha/1864428">centos 7 systemctl自动补全命令插件</a><br>太原生态了，什么玩意都要自己装。<br>默认的rm不带-f命令</p>
]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Crystal 李馨巧</title>
    <url>/2016/Crystal-%E6%9D%8E%E9%A6%A8%E5%B7%A7/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>其实早些时候，我就决定专门写一篇关于她的博文，但一直没时间写。现在放寒假了也有这个机会和这个时间写。</p>
<h2 id="为什么要写这个专题？"><a href="#为什么要写这个专题？" class="headerlink" title="为什么要写这个专题？"></a>为什么要写这个专题？</h2><p>这是一个相当重要的问题!!<br>首先那当然是因为我非常喜欢她啦!在我了解和认识的那么多童星中，她是最耀眼的，也是最令人难忘的。我喜欢她，不仅是因为颜值（我对颜值要求很低的），华人（外国小孩实在是看不习惯），获过大奖，更因为她的素养、学业和心态。对人很有礼貌，学习成绩优异。尽管表面上很“小大人”，但实际上是一个不折不扣的小孩，有童心，乐观的对待世界。<br>其次是受到了知乎的影响，在知乎上，我看到了各行各业，各种各样的人在上面分享自己的见解和看法。所以也就决定在博客上弄一个专题。<br>写这个专题的另外一个目的也是为了记录，整理与她相关的信息。方便我日后的追忆和检索。</p>
<p>她也是我第一个写的关于个人的专题。可能写的会有些不好，请见谅！我不想写成一个人物传记，所以想用时间线的方式来叙述和评论我眼中的“Crystal 李馨巧”。<br>下面是关于她的<a href="#jumpwiki">百科信息</a>。</p>
<h1 id="时间线"><a href="#时间线" class="headerlink" title="时间线"></a>时间线</h1><h2 id="《中国新声代》"><a href="#《中国新声代》" class="headerlink" title="《中国新声代》"></a>《中国新声代》</h2><p>最早见到李馨巧是在《中国新声代》第一季的节目上，当时就留有了一定的印象。其实，我认为当时她在台上的形象并不太好，披头散发的，穿着一身红衣服，就显得特别的成熟，不像一个小孩应有的神态。</p>
<h3 id="后台-上台前"><a href="#后台-上台前" class="headerlink" title="后台(上台前)"></a>后台(上台前)</h3><p>之所以令我印象深刻，是因为在她出场前的介绍(在拍《激战》获奖以前)。当麦咭问到她说她有跟很多大明星合作过电影，她也就很从容淡定的如实回答，说跟周杰伦和谢霆锋合作过，还有一段关于影片《激战》的VCR。(需要核实)当时确实被影片中那可爱乖巧的表演打动到了。(也是在这个VCR中发现她会说粤语)接下来是麦咭问她带来陪同的人，她带了妈妈(她可是不折不扣的妈妈控啊！！)，和经纪人哥哥(What!!)，她是我目前为止唯一一个看到的，在新声代的舞台上，带经纪人陪同的小孩。当时的我是震惊的。所以在上台前就已经被她的经历所震撼到了。也怪不得海泉会评价其气场强大。</p>
<h3 id="正式上台"><a href="#正式上台" class="headerlink" title="正式上台"></a>正式上台</h3><p>她带来的歌曲是《price tag》(只要有机会上台表演唱歌，这是她的首选歌曲)，这首歌也是我认为的，她所有翻唱歌曲中最好的一首。台上的表演那就是自然，活泼，气场强大。像一个专业演员在演出。声音也够甜美，完完全全未经修饰的童声！！</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>但是其实并没有太在意这个人，主要是她上台前的介绍以及当时的形象造成的。感觉特别有背景，对于非常有背景的人我一般都会否定掉的。再加之她是马来西亚人，不是中国人。而且在那之前，我已经粉上了同为这季新声代的另外一个小孩王睿卓，所以对她的关注就少了。</p>
<h2 id="一段时间"><a href="#一段时间" class="headerlink" title="一段时间"></a>一段时间</h2><p>过了很长一段时间也没有怎么关注她，只是在新浪微博中顺带关注了她的微博帐号，我发现她的关注人数也并不怎么多嘛！而且微博信息也停留在了2014年，很久没有更新了！我想，也正常，毕竟是海外的人，人家的主战场应该在Facebook。(容许我再一次鄙视一下GFW)。</p>
<p>在这期间，我将很多新声代学员的歌加进了酷狗音乐，唯独其中四人的歌最讨我喜欢，(其中就包括了李馨巧)。特别是当我听厌了其他三人的歌时。她的歌声真的令我百听不厌，我要的就是这种几乎不加修饰的童声，(天籁之音)而她的歌声做到了这一点。所以我决定上网爬取所有与她相关的信息，就在这个漫长的爬取过程中，我粉上了她。</p>
<h2 id="百度百科-维基百科"><a href="#百度百科-维基百科" class="headerlink" title="百度百科&amp;维基百科"></a>百度百科&amp;维基百科</h2><p>对于任何一个公众人物来说，想了解她的信息，最好不过的就是看百科中相应的词条。百科中的词条，往往都是各个网友从其他网页中，搜集并汇集的来源可靠的资料。(这里点名批评一下百度百科，参演的电影角色名称搞反了，关键是还不让我修改)</p>
<p>我就先按照她获奖的电影或电视剧中依次找寻她的镜头。并且搜索与她相关的其他电影电视剧。</p>
<h3 id="下面是我按照时间顺序观看她参演的电影电视剧"><a href="#下面是我按照时间顺序观看她参演的电影电视剧" class="headerlink" title="下面是我按照时间顺序观看她参演的电影电视剧"></a>下面是我按照时间顺序观看她参演的电影电视剧</h3><p>《激战》<br>《逆战》<br>《足印》<br>《天天好天》<br>《逃出生天3D》<br>《甲洞2》<br>《哥妹俩之惊历48》<br>《稽查专用》<br>《小宝学弟子规》</p>
<p><a href="#jumpvideo">视频资料跳转</a></p>
<h2 id="激战"><a href="#激战" class="headerlink" title="激战"></a>激战</h2><h3 id="获奖状况"><a href="#获奖状况" class="headerlink" title="获奖状况"></a>获奖状况</h3><p>这也是她在大陆出名的一部影片。因为上海国际电影节破天荒的将最佳女演员的奖项给了她。使她从此获得了史上最年轻影后的殊荣。最初我以为这个奖项只是针对这部影片而言，毕竟这部影片中的女演员也确实少，也不足为奇。后面才得知是在多部影片中评选出来的。</p>
<p>在百度搜索中，可以发现大多数的搜索结果都是与这部影片相关的，国内的媒体采访(包括港澳台)都基本是围绕这部影片来采访的。所以说，她在中国大陆的出名完全就是因为这部影片和上海国际电影节的金爵奖。同时也要感谢这部电影的制作方和导演(林超贤)。确确实实是林超贤捧红了她。</p>
<h3 id="角色定位"><a href="#角色定位" class="headerlink" title="角色定位"></a>角色定位</h3><p>就采访时导演的话来说，这部电影他是有意增加梁佩丹这个角色的，作为整个电影情感线的重要一部分。林超贤导演之所以看上她，是因为他记得以前《逆战》那部电影中表现出色，但是戏份又不多，想要专门设计一个角色来给李馨巧演。</p>
<p>这个角色对于演员来说难度还是很大的！影片需要一个年龄小但心智非常成熟的小女孩(单亲家庭的孩子，还要照顾精神病的妈妈，像个“小大人”一样管理者整个家)，这恰恰也是馨巧的特点之一。所以说选择她来演这个角色再适合不过了。</p>
<h3 id="印象深刻的地方"><a href="#印象深刻的地方" class="headerlink" title="印象深刻的地方"></a>印象深刻的地方</h3><p>(剧情信息以粤语版为标准)</p>
<p>从影片的10分钟左右(需要核实)出场，出场时，就给人一种“小大人”的感觉。向程辉一本正经的介绍家里的注意事项！还要哄妈妈睡觉。特别是他们两个在厕所门口的对手戏，将自己的强势一面表现了出来(显得特别攻)。大家都像个陌生人一样，相互提防着对方，充满着不信任。</p>
<p>在影片24分钟，小丹与程辉的对话尤为精彩，为了能与程辉相处的更好，将自己的家事讲了出来，叙说故事的时候相当的淡定啊！！好像看透了世间的所有事情。</p>
<p>在影片中间环节也渐渐的可以看得出她变得开朗了许多，得到了家的温暖。尽管中间出现了一些事故！！</p>
<p>在影片58’32”可以看到她标志性的笑，你可以在很多其他视频中看到！</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>通过与前面的戏比较，可以发现她在这部戏中表现的更加成熟了，表现的更加自然。华语和粤语的配音都非常棒，基本上去除了她之前很重的马来西亚华语的口音。也可能是电影后期制作时进行训练造成的。</p>
<h2 id="逆战"><a href="#逆战" class="headerlink" title="逆战"></a>逆战</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之所以选择这两部林超贤导演的作品，是因为这两部影片的资源特别好找。(毕竟在中国大陆上印过)，网上的各种资源都是这两部电影，想要找马来西亚的电影电视剧真是太难找了，要练就一身翻墙本领，还要有辨别不同语种的能力！</p>
<h3 id="角色定位-1"><a href="#角色定位-1" class="headerlink" title="角色定位"></a>角色定位</h3><p>在片中她的爸爸是谢霆锋，叔叔是周杰伦。(这也是在激战之前[包括新声代]，被屡次宣传的跟巨星合作过)至于她的妈妈，电影中好像并没有提到过。不过我认为应该是一个单亲家庭的孩子。(李馨巧演的角色都挺悲惨的，要不就是单亲家庭，要不就是孤儿，是因为她特别懂事、成熟的缘故吗)，同时是一个品学兼优的好孩子哦！(这跟她本人其实有几分相似的!)<br>逆战的角色算是本色出演了!做马来西亚黑帮的小孩。因为当时林超贤导演需要找一个，在马来西亚生活过的女孩！因为在马来西亚李馨巧已经是小有名气的童星了，在一次面试过后就选择她了。</p>
<p>在学习上拿了100个100分，以此来换取他爸爸的改邪归正。每天跟爷爷生活，和爸爸一起东躲西藏的逃窜。她同样是一个弱小的小孩，最后惨遭厄运，被其他黑帮还去做活体天花病毒实验。乖巧，弱小，善良和优异的成绩，这就是我的大致印象吧！</p>
<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>其实我并不大喜欢这种类型的电影，打打杀杀的情节太多了，就是来看大明星的嘛！令我惊讶的是周杰伦竟然听得懂粤语……毕竟情节需要……</p>
<p>小馨巧也就是在街上看电视的时候出现的。(又是那熟悉的校服)看到他爸爸(谢霆锋)从监狱中逃跑出来的新闻。虽说他爸是逃犯，但是他跟爷爷生活的还是挺幸福的，并没有因为他爸是坏人而影响她的个人生活，使她与其他小朋友不一样。反而因为他爸的坏人身份使她变得很成熟、更坚强、更冷静。因为警匪勾结的缘故，在火车上没有成功逃出，爸爸被警察抓捕。最后，万长胜被抓去做活体的天花实验了。还被惨遭抛海。最令人惊奇的是竟然没死！(这一点都不科学嘛！有木有？)可能导演实在是不忍心啊！！两部电影中都奇迹般的起死回生。</p>
<p>最最佩服的应该就是被抛到海里的那一刻了，这也是打动导演林超贤的地方。“”</p>
<p>“因为拍戏需要，这个小女孩曾泡在海水中7个小时，敬业精神更是令人啧啧称赞。（网易娱乐评）”我想这说的就是这部电影吧！在海水中那样艰苦的环境下，也能坚持下去，实属不易。</p>
<p>从这部反应开始，李馨巧就开始正式进入中国，被许多</p>
<h2 id="足印"><a href="#足印" class="headerlink" title="足印"></a>足印</h2><h3 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h3><p>人生第一部马加西亚电视剧啊！！了解到了马来西亚的状态和当地华人圈的文化，自己那有些许口音的华语……其实关注这部电视剧的时候，是在优酷上看到的关于这个电视剧的部分片段。发觉演的特别棒啊！</p>
<p>然后开始了漫长的寻资源之路……首先百度大法未果，Google大法未果，YouTube大法未果，优酷大法有点果。但是视频上了密码，可是也只有在优酷上才有了，最后在评论中找到了密码，但是没有第一集，所以也就从第二集，没头没尾的开始看了。</p>
<h3 id="角色定位-2"><a href="#角色定位-2" class="headerlink" title="角色定位"></a>角色定位</h3><p>讲述关于一个坚毅女性，终其一生报恩与传承的故事。当纯洁的爱情及伟大的亲情，遇上贪婪的名利与人心的自私，总是让事情变得错综复杂，难以抉择</p>
<p>这回可是主角了，戏份可是相当的多啊！！(一点都不怂)，尽管作为主角的童年时期只有前5集。但这5集可是相当的精彩啊!!</p>
<p>又是一个悲惨的角色啊，再片中演小严厉，在大概3,4岁的时候，妈妈因为跟爸爸闹不合(爸爸吃喝嫖赌)，而离家出走。妈妈为了追求更高的理想而抛弃了严厉，尽管后来被找到了，也没有回去。后面只好跟着爸爸，到处骗人钱财，过着流离失所的生活。最后爸爸因为不守信发生仇恨，而被人打死，最终成了一个孤儿。一个做鞋的老板娘收养了她。</p>
<h3 id="印象深刻的地方-1"><a href="#印象深刻的地方-1" class="headerlink" title="印象深刻的地方"></a>印象深刻的地方</h3><h4 id="第一集"><a href="#第一集" class="headerlink" title="第一集"></a>第一集</h4><p>其实整集都可以看到她乖巧可爱的状态（卖萌）。但同时他也会跟他爸爸闹矛盾，说他不上工，将一个坏小孩应有的状态活灵活现的展示了出来。</p>
<h4 id="第二集"><a href="#第二集" class="headerlink" title="第二集"></a>第二集</h4><p>在4’10’’的时候，望着那一闪一闪的灯时，特别的可爱…（好吧，我承认我是萝莉控）,一直不说话，就是在和爸爸赌气。因为偶然间她听到了她爸爸要把她卖掉的事。在6’48’’为了讨好小严厉，爸爸买鞋给她，小严厉不仅不理人，还大骂了一句。最后被人贩子关押在一间房子里，同时还有鞋店家的小孩言毅仁。</p>
<h4 id="第三集"><a href="#第三集" class="headerlink" title="第三集"></a>第三集</h4><p>最后面的那段哭戏非常的棒！</p>
<h4 id="第四集"><a href="#第四集" class="headerlink" title="第四集"></a>第四集</h4><p>在37‘左右那段，因该算是高潮了吧，从面部神态到眼神，将内心的状态诠释的非常好！</p>
<p>在38’左右有肉色哦！ 其实这段说的话令我印象很深刻！</p>
<p>”妈妈为什么不要我，竟然不要我，为什么还要生我。”</p>
<p>“有时大人做事真的不顾后果的”，这一句话，让我联想到了风之谷。</p>
<p>“生你的人不一定爱你，爱你的人也不一定是生你的”</p>
<p>这是前5集中，令我印象很深刻的几句台词。人做事情要一定要有责任感，要多考虑考虑后果，不能因为一时的痛快。不然，可能会给自己或者其他人带来无尽的痛苦。</p>
<h3 id="故事剧情"><a href="#故事剧情" class="headerlink" title="故事剧情"></a>故事剧情</h3><h4 id="第一集-1"><a href="#第一集-1" class="headerlink" title="第一集"></a>第一集</h4><p>最开始，就已经和爸爸过着流浪的生活了，和父亲一起到处骗人钱财。同时不喜欢上学，他爸爸也是不喜欢做工。过着得过且过的日子。骗走了一家钱又辗转到了其他村庄继续寻找骗钱的机会。本来得到了 一次很好的做工机会。但因为父亲三天打鱼两天晒网，最后被老板炒掉。手头上有点钱了，就全部拿去赌博了，最后输光所有的钱，还欠了一屁股的债。为了还债，在不得已的情形下，萌生起了卖小孩的念头</p>
<h4 id="第二集-1"><a href="#第二集-1" class="headerlink" title="第二集"></a>第二集</h4><p>本来说只是给孩子一个更好的家庭生活，但最后其实这都是骗局，人贩子吧到手的小严厉，准备辗转卖给其他人，因为登船的缘故，而将严厉带进了一个无人的小屋子。正巧，这一切被鞋店的老板娘的儿子言毅仁发现了。</p>
<h4 id="第三集-1"><a href="#第三集-1" class="headerlink" title="第三集"></a>第三集</h4><p>小严厉凭借着聪明才智，最后顺利的从小屋里逃出，最后被鞋店老板娘救起。因为父亲没钱偿还债务，最后被鞋店老板娘收养。刚开始时，小严厉是排斥这个“新妈妈”唐玉梅的。曾经几次想要离家出走，因为自尊心被人践踏，还恶作剧过几次。但终究是内心善良的。这期间爸爸被人暴打，给小严厉过了最后一次生日就离世了。</p>
<p>（这里有一段很长的哭戏哦！）</p>
<h4 id="第四集-1"><a href="#第四集-1" class="headerlink" title="第四集"></a>第四集</h4><p>失去了父亲的严厉，在唐玉梅的陪伴下，去寻找自己的其他亲人，她的亲生母亲。期间回过他们以前的家，那里有一些与父母生活的美好的回忆，以及一些小时候的印记。在鞋店里做工，来赚钱以得到自由。最后面经过打听得知了小严厉妈妈的住处。但是她的妈妈并没有认她。无意间，唐玉梅发现了那个人就是小严厉的亲生母亲。经过一阵交涉后，最后还是拦不住她妈妈。</p>
<h4 id="第五集"><a href="#第五集" class="headerlink" title="第五集"></a>第五集</h4><p>失去了亲人的小严厉显得特别的无助，最后在善良的鞋店老板娘唐玉梅家，继续生活下去。小严厉逐渐接受了这个母亲，和这个家。跟哥哥言毅仁在同一所小学读书。这期间，因为不想上学，而让自己的哥哥受了伤。尽管如此，唐玉梅还是原谅了她。经过了这次事件后，小严厉慢慢地不在对学校反感，但还是改不了恶作剧的坏习惯！</p>
<h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>很多人可能看不惯这种朴素的东西。我还是比较怀旧的人，看到那些两三层高的建筑，简简单单的道路，心里感觉特别的舒服。难道是因为在城市中待得太久的缘故。</p>
<p>马来西亚的很多电影电视剧，都是这样的。很难看到像广州一样的高楼大厦。感觉回到了解放前，生活的速度比我们慢多了。尽管如此，但依旧也有很多新事物。</p>
<p>我比较喜欢那些有内涵，有内容的视频。尽管演员的演技都不怎么样！</p>
<p>主题曲很好听！比较喜欢这种略带忧愁的歌。</p>
<h2 id="天天好天"><a href="#天天好天" class="headerlink" title="天天好天"></a>天天好天</h2><p>豆瓣上评分挺高的嘛！温情的家庭片！豆瓣上的很多影评说的都不错。</p>
<p>相比之下，这种电影比较贴近生活，没有绚烂的各种特技，或者是一些特别的剧情。一切都很自然，能够勾起你对美好往事的回忆。</p>
<p>李馨巧在影片中戏份不多,可能略显做作,但也是一部很不错的电影。看看海外的华人是怎样的一种生活状态。</p>
<p>马来西亚相比于中国，生活节奏还是挺慢的！各种各样的文化交织在一起，说着不同的语言。生活挺惬意的，有种与世俗隔绝之感！但同时还是比较仰慕于西方的！</p>
<p>群星合唱的主题曲不错！喜剧电影，将孝道的。为何我总感觉中国在传统文化宣传弘扬方便都做的不如海外华人好，甚至不如日本！！</p>
<p>这部戏我印象还是很不错的，不像美国大片那样，狂拽炫酷吊炸天！！也不像日剧那样，说理说个不停，耗费大量脑细胞！我内心其实是有一种向往自然平静生活比较消极的想法！所以在马来西亚的影片中，我对这部评价最高！</p>
<h2 id="逃出生天3D"><a href="#逃出生天3D" class="headerlink" title="逃出生天3D"></a>逃出生天3D</h2><p>中国大陆拍的片子，好像也是李馨巧第一次参与中国导演的片吧！3D卖点沦为纯噱头，不就是学会了些特效，装一下逼吗？谦虚！！剧情也是够令人无语的，就是去看特效的嘛！</p>
<p>豆瓣上的评分也是低的可以！纯属看看效果，还不如去看好莱坞大片呢！</p>
<p>李馨巧在其中纯粹是酱油！也不过就几个镜头。饰演一个被困女孩。</p>
<p>剧中倒是可以看到许多广州的标志性建筑，觉得挺亲切的。</p>
<h2 id="甲洞2"><a href="#甲洞2" class="headerlink" title="甲洞2"></a>甲洞2</h2><p>这好像是一部关于黑帮的电影吧！好不容易找到了一个可以看的资源，竟然是生肉(无字幕，WTF)，再一次吐槽一下，马来西亚的电影电视剧可真难找啊！如果在优酷土豆上都没有的话，基本没戏！百度，这种盗版资源集聚的地方，都找不到！Google也是没戏！<br>看了这部剧，第一就是要考我的粤语听力，好歹我也是在粤语区生活了15年的人了，听粤语还是没什么大问题的。(除了华语，粤语是唯一一个能听的懂的语言)<br>第二就是感觉李馨巧长大了好多，长高了！演技嘛，在某些片段中表现的还是相当出色的！<br>因为语言问题，加之情节比较灰暗。所以，也看不明白编剧到底想要说些什么。对整部片子没什么感觉。总之，浑浑噩噩就看完了。</p>
<h2 id="其他剧集"><a href="#其他剧集" class="headerlink" title="其他剧集"></a>其他剧集</h2><p>其他剧集都是些马来西亚本土的电视剧及电影。而李馨巧也是以打酱油为主，也没什么地方值得看的，再加之视频画质实在是渣(这也是没办法的事)。</p>
<h1 id="人物评价"><a href="#人物评价" class="headerlink" title="人物评价"></a>人物评价</h1><p>(以下仅代表个人观点)</p>
<h2 id="演戏"><a href="#演戏" class="headerlink" title="演戏"></a>演戏</h2><p>确切的说，李馨巧应该是一名子役，在很小的时候！(什么时候)就开始拍广告了，也是因为广告的契机，才入的演艺坑的吧！在马来西亚，她确实是当之无愧的影后！即使在中国，这个头衔也是摘不掉的。但要是到日本韩国，那就是分分钟就没秒掉的节奏啊！<br>从足印中就能看出她是演戏的料，尽管剧情设定并不是让她本色出演。但在整部剧中饰演一个单亲家庭的小孩，把整个小孩应有的天真，活泼，活灵活现的表现了出来。特别是爸爸离世时的那段哭戏，令我印象很深刻！<br>也正因为这部戏《足印》，令她在马来西亚华人圈中小有名气。一次偶然的机会遇到了香港林超贤导演，开始踏入香港的演艺圈。因为《激战》中出色的演技，赢得了上海国际电影节的奖项。逐渐的被中国大陆人所知。也是因为这个奖项，马来西亚媒体把她捧到天上去了。<br>凭借自己的天赋，尽管在马来西亚，这种演艺环境一般的情况下，能够坐上马来西亚童星的第一把交椅，也是相当难得的！<br>我觉得她是一个可以跟日本子役刚正面（演技）的人，在《足印》中的哭戏也是很强的，很有代入感！相比于日本子役，母语是英语的李馨巧，更适合在西方世界中混啊！况且还会5种语言，以后真的可以到好莱坞去发展！！日本子役的国际化都不大行，日式英语真的很感人！！</p>
<h2 id="唱歌"><a href="#唱歌" class="headerlink" title="唱歌"></a>唱歌</h2><p>在《中国新声代》中，她曾经说过，她要像其他人证明，她不单只会演戏，还会唱歌。</p>
<h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><p>英语<br>马来语<br>粤语<br>华语<br>日本语</p>
<h1 id="照片"><a href="#照片" class="headerlink" title="照片"></a>照片</h1><p>前方高能!!!一大波美图即将来袭!!(流量党请注意)<br><img data-src="/images/Crystal/001.jpg"><br><img data-src="/images/Crystal/002.jpg"><br><img data-src="/images/Crystal/003.jpg"><br><img data-src="/images/Crystal/004.jpg"><br><img data-src="/images/Crystal/005.jpg"><br><img data-src="/images/Crystal/006.jpg"><br><img data-src="/images/Crystal/007.jpg"><br><img data-src="/images/Crystal/008.jpg"><br><img data-src="/images/Crystal/009.jpg"><br><img data-src="/images/Crystal/010.jpg"><br><img data-src="/images/Crystal/011.jpg"><br><img data-src="/images/Crystal/012.jpg"><br><img data-src="/images/Crystal/013.jpg"></p>
<h1 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h1><p><span id="jumpvideo"></span></p>
<p><a href="http://pan.baidu.com/s/1c1hSB76">百度云</a><br>《激战》 <a href="http://v.qq.com/cover/7/7ti3bwljnomdlet.html">粤语版(原版)</a> <a href="http://v.qq.com/cover/r/rmlwul8yr5rgxik.html">国语版</a><br><a href="http://v.qq.com/cover/u/ughfdfxylkkhu08.html">《逆战》</a><br><a href="http://www.tudou.com/plcover/r-LL3hw46KI/">《足印》</a><br><a href="http://www.tudou.com/programs/view/TALaSadVuIM">《天天好天》</a><br>《逃出生天3D》<a href="http://www.wasu.cn/Play/show/id/2033730">粤语版(原版)</a> <a href="http://www.letv.com/ptv/vplay/2184983.html">国语版</a><br>《甲洞2》<br><a href="http://v.youku.com/v_show/id_XNzIwMjU5OTk2.html">《哥妹俩之惊历48》</a><br><a href="http://www.youku.com/playlist_show/id_21864370.html?sf=20100">《稽查专用》</a><br><a href="http://www.youku.com/playlist_show/id_21860130.html?sf=10800">《小宝学弟子规》</a></p>
<h1 id="社交账号"><a href="#社交账号" class="headerlink" title="社交账号"></a>社交账号</h1><p>新浪微博<a href="http://weibo.com/575117703">[1(认证)]</a><a href="http://weibo.com/crystalleexq">[2]</a><a href="http://weibo.com/u/5459286049">[3]</a><br><a href="https://www.facebook.com/crystalleetv">Facebook(认证)</a><br><a href="https://twitter.com/2003crystallee">Twitter</a><br><a href="https://www.instagram.com/crystalleexq/">Instagram</a><br><a href="https://plus.google.com/100770361998609595289">Google+</a></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><span id="jumpwiki"></span></p>
<p><a href="http://baike.baidu.com/link?url=u92yPetEPPA7m-zDRuKywVWJL8r_dbD0qrglqMTzFei39oGTzVfVkXo44SBgq2WYUf8ghQDsRLfpnbvQahBIwK">百度百科</a><br><a href="https://zh.wikipedia.org/wiki/%E6%9D%8E%E9%A6%A8%E5%B7%A7">维基百科</a><br><a href="http://www.soku.com/search_playlist/q_%E6%9D%8E%E9%A6%A8%E5%B7%A7">优酷</a><br><a href="https://movie.douban.com/subject/5977836/">逆战 (豆瓣)</a><br><a href="https://zh.wikipedia.org/wiki/%E9%80%86%E6%88%B0_(%E9%9B%BB%E5%BD%B1)">逆战(维基百科)</a><br><a href="https://movie.douban.com/subject/6729965/">足印(豆瓣)</a></p>
<p>Youtube<a href="https://www.youtube.com/user/officialCrystalleetv">[1(认证)]</a><a href="https://www.youtube.com/playlist?list=PL94zEX_kw6zsgX3KKLEltfVaA1jshfrlU">[2]</a></p>
]]></content>
      <categories>
        <category>人物</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>未完成</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian 7 安装教程</title>
    <url>/2015/Debian-7-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>First you should download the file of Debian 7 64 bit</p>
<h2 id="set-source"><a href="#set-source" class="headerlink" title="set source"></a>set source</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#vim /etc/apt/sources.list</span></span><br></pre></td></tr></table></figure>
<p>Enter the following information</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.163.com/debian wheezy main non-free contrib</span><br><span class="line">deb-src http://mirrors.163.com/debian wheezy main non-free contrib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">deb http://mirrors.163.com/debian wheezy-updates main non-free contrib</span><br><span class="line">deb-src http://mirrors.163.com/debian wheezy-updates main non-free contrib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">deb http://security.debian.org/ wheezy/updates main</span><br><span class="line">deb-src http://security.debian.org/ wheezy/updates main</span><br><span class="line"></span><br><span class="line"><span class="comment">#apt-get update</span></span><br></pre></td></tr></table></figure>

<h2 id="install-some-software"><a href="#install-some-software" class="headerlink" title="install some software"></a>install some software</h2><p>Open Terminal<br>input order</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$su</span> root</span><br><span class="line"><span class="comment">#apt-get install vim</span></span><br><span class="line"><span class="comment">#apt-get install gcc</span></span><br><span class="line"><span class="comment">#apt-get install g++</span></span><br><span class="line"><span class="comment">#apt-get install sudo</span></span><br><span class="line"><span class="comment">#apt-get install fpc</span></span><br></pre></td></tr></table></figure>

<h2 id="To-solve-the-Chinese-garbled"><a href="#To-solve-the-Chinese-garbled" class="headerlink" title="To solve the Chinese garbled"></a>To solve the Chinese garbled</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$su</span></span><br><span class="line"><span class="comment">#apt-get install ttf-arphic-uming</span></span><br><span class="line"><span class="comment">#apt-get install ttf-wqy-zenhei</span></span><br><span class="line"><span class="comment">#aptitude install locales</span></span><br><span class="line"><span class="comment">#dpkg-reconfigure locales</span></span><br></pre></td></tr></table></figure>
<p>choose something</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">en_US.UTF8</span><br><span class="line">zh_CN GB2312</span><br><span class="line">zh_CN GBK GBK</span><br><span class="line">zh_CN UTF-8 UTF-8</span><br></pre></td></tr></table></figure>
<p>choose zh_CN UTF-8  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#vi /etc/default/locale</span><br><span class="line">LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure>

<h2 id="安装中文输入法"><a href="#安装中文输入法" class="headerlink" title="安装中文输入法"></a>安装中文输入法</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># apt-get install fcitx</span></span><br></pre></td></tr></table></figure>
<p>创建脚本以便X Window启动时自动载入fcitx: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># cd /etc/X11/Xsession.d  </span><br><span class="line"># vi 25xchinput_start</span><br></pre></td></tr></table></figure>
<p>输入以下内容并保存： </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> XMODIFIERS=@im=fcitx        </span><br><span class="line"><span class="built_in">export</span> XIM=fcitx        </span><br><span class="line"><span class="built_in">export</span> XIM_PROGRAM=fcitx        </span><br><span class="line">/usr/bin/fcitx &amp;</span><br></pre></td></tr></table></figure>
<p>在配置中激活输入法<br>fcitx翻页按钮&#x3D;向下-向上</p>
<p>安装vmware tools</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar zxvf ***.tar.gz</span><br><span class="line"><span class="comment">#sudo apt-get install make</span></span><br><span class="line"><span class="comment">#sudo apt-get install gcc</span></span><br><span class="line"><span class="comment">#sudo aptitude install linux-headers-`uname -r`</span></span><br></pre></td></tr></table></figure>
<p>在root下运行vmware-install.pl</p>
<h2 id="查看windows共享文件"><a href="#查看windows共享文件" class="headerlink" title="查看windows共享文件"></a>查看windows共享文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#apt-get install samba</span><br></pre></td></tr></table></figure>
<p>首先，下载samba；<br>接着，Alt+F2,<br>smb:&#x2F;&#x2F;windows的IP&#x2F;共享目录<br>假设windows的ip是10.2.11.2.100, 共享目录是share和本地磁盘(E)<br>于是<br>smb:&#x2F;&#x2F;10.2.112.100&#x2F;share<br>smb:&#x2F;&#x2F;10.2.112.100&#x2F;本地磁盘(E)<br>即可直接访问。</p>
<h2 id="解压deb包"><a href="#解压deb包" class="headerlink" title="解压deb包"></a>解压deb包</h2><p>dpkg命令常用格式如下：<br>dpkg -I iptux.deb#查看iptux.deb软件包的详细信息，<br>dpkg -c iptux.deb#查看iptux.deb软件包中包含的文件结构<br>dpkg -i iptux.deb#安装iptux.deb软件包<br>dpkg -l iptux#查看iptux软件包的信息<br>dpkg -L iptux#查看iptux软件包安装的所有文件<br>dpkg -s iptux#查看iptux软件包的详细信息<br>dpkg -r iptux#卸载iptux软件包<br>注：dpkg命令无法自动解决依赖关系。如果安装的deb包存在依赖包，则应避免使用此命令，或者按照依赖关系顺序安装依赖包。<br>dpkg -l | grep qq<br>用这个命令组合着出来了，列出已经安装的软件，并且包含qq关键字的。。<br>再用-r卸载</p>
<h2 id="tar-gz文件解压"><a href="#tar-gz文件解压" class="headerlink" title="tar.gz文件解压"></a>tar.gz文件解压</h2>]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Find the Path</title>
    <url>/2015/Find-the-Path/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Scofield刚从监狱里面跑出来，现在他要在进行大逃亡.</p>
<p>你也知道, 逃亡是非常不容易的, 现在Scofield遇到了一些困难, 你可以帮助他吗?</p>
<p>Scofield面前的是一个美国的交通图, 图里面有一些城市, 有些城市之间有路连接. 路的长度scofield是知道的, 但是有些城市里面的警察很多, 所以scofield对这个问题很头疼. 他现在要安排一些逃亡路线, 所以他要对你做一些询问, 询问是这样的:某两个城市之间的最短路是什么? 但是这个最短路有个前提, 那就是路径上的每个城市里的警察不得超过k个. 起点和终点除外.</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>有多组测试数据, 数据第一行是一个整数T表示测试数据的个数。每组测试数据以二个整数N，M 开始。N是城市个数，M是道路数。<br>下面一行有n个数, 表示每个城市里面的警察的个数Ci.<br>再下面m行, 每行有三个数, u, v, w.<br>再下面有一个整数Q<br>下面有Q行, 每行三个整数u, v, k表示,查询的内容为从u到v的警察数不超过k的最短路.(u, v上的警察不用计算在内).</p>
<p>Technical Specification</p>
<ol>
<li>T &lt;&#x3D; 20</li>
<li>2 &lt;&#x3D; N &lt;&#x3D; 200, 0 &lt;&#x3D; M &lt;&#x3D; n * (n – 1) &#x2F; 2</li>
<li>0 &lt;&#x3D; Ci &lt;&#x3D; 1000,000,000</li>
<li>0 &lt;&#x3D; u, v &lt; N, 0 &lt;&#x3D; w &lt;&#x3D; 1000, 0 &lt;&#x3D; k &lt;&#x3D; 1000,000,000</li>
<li>0&lt;&#x3D; Q &lt;&#x3D; 100000</li>
<li>没有多重边和自环边</li>
<li>对于每一个询问，u！&#x3D; v。</li>
<li>输入数据后面有一个空行。</li>
</ol>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>对于每一个询问，输出一行，表示最短路是什么，如果不存在的话就输出-1.<br>每一个测试数据后面加一个空行。</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">4 4</span><br><span class="line">100 2 3 100</span><br><span class="line">0 1 1</span><br><span class="line">0 2 1</span><br><span class="line">1 3 2</span><br><span class="line">2 3 3</span><br><span class="line">2</span><br><span class="line">0 3 2</span><br><span class="line">0 3 1</span><br></pre></td></tr></table></figure>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output "></a>Sample Output </h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">-1</span><br></pre></td></tr></table></figure>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>这题是要我们求最短路，但是最短路有一定的要求，就是最短路上的警察要不超过k个。再看看数据范围，N非常的小，组数也不多。再求最短路的诸多算法中，floyd算法虽然慢，但是他在处理一些特殊问题(带条件)时却能发挥它的重要作用。<br>我们都知道floyd算法，是通过枚举中间点，进而求出最短路。在枚举中间点的时候，未枚举到的中间点，并不在所求的最短路内。所以根据这个特性，我们就可以再求最短路的同时，进而保证警察数k在一个范围内，然后在回答每一个问题。<br>实现起来可能略微复杂，首先我们将原先图上的点进行重编号。按照点的警察数从小到大排序，顺次编号。现在对于图上编号为i的点，在[1..i-1]中的点他们的警察数k都比i点的警察数k小。在对新图做一次floyd最短路。对于后面的每个询问，将询问的&lt;u,v&gt;转化为新图的&lt;u,v&gt;。再从满足警察数&lt;&#x3D;k个中选出一个最小的答案，作为此次询问的答案。整道题的算法复杂度为O((N^3+QN)*T)。其实复杂度还是蛮高的。</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> INF = <span class="number">1042521604759584125</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200</span><span class="number">+10</span>;</span><br><span class="line">LL map[N][N][N];</span><br><span class="line"><span class="type">int</span> pos[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> num,id;</span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span> &lt; (node a) <span class="type">const</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> num &lt; a.num;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;cos[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//freopen(&quot;1061.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> T;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">	<span class="keyword">while</span> (T --)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> n,m;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;cos[i].num);</span><br><span class="line">			cos[i].id = i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">sort</span>(cos,cos + n);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++)\</span><br><span class="line">		&#123;</span><br><span class="line">			pos[cos[i].id] = i<span class="number">+1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">				map[i][j][<span class="number">0</span>]=INF;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span> ; i &lt;= m ; i ++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> x,y,z;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">			map[pos[x]][pos[y]][<span class="number">0</span>] = z;</span><br><span class="line">			map[pos[y]][pos[x]][<span class="number">0</span>] = z;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>;k &lt;= n; k ++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span> ; i &lt;= n ; i ++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span> ; j &lt;= n ; j ++)</span><br><span class="line">				map[i][j][k] = map[i][j][k - <span class="number">1</span>];</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span> ; i &lt;= n ; i ++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span> ; j &lt;= n ; j ++)</span><br><span class="line">				map[i][j][k] = <span class="built_in">min</span>(map[i][j][k],map[i][k][k<span class="number">-1</span>]+map[k][j][k<span class="number">-1</span>]);</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> Q;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;Q);</span><br><span class="line">		<span class="keyword">while</span> (Q --)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> x,y,z;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">			LL ans = map[pos[x]][pos[y]][<span class="number">0</span>];</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = n<span class="number">-1</span> ; i &gt;= <span class="number">0</span>; i --)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (cos[i].num &lt;= z) &#123;</span><br><span class="line">					ans = map[pos[x]][pos[y]][i<span class="number">+1</span>];</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (ans == INF) <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>); <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">			</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>信息学</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>floyd算法</tag>
      </tags>
  </entry>
  <entry>
    <title>GDKOI总结</title>
    <url>/2016/GDKOI%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>第二年亦是最后一年GDKOI，然而还是一样的弱。<br>D1：30+0+20+30&#x3D;80<br>D2:20+50+0+30&#x3D;100<br>抱着拿部分分的心态参与考试….</p>
<h1 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h1><h2 id="T1：cardcaptor"><a href="#T1：cardcaptor" class="headerlink" title="T1：cardcaptor"></a>T1：cardcaptor</h2><p>位运算，线段树</p>
<p>刚开始时还理解错题意,因为着急的看下文,忽略了给出的例子.幸亏后面回头又看了一次题,才发现原先把问题想复杂了。<br>此题差一步就想到正解了。看到区间询问和单点修改，很自然的想到了线段树。<br>线段树的关键在两个区间的合并，然而在考场中并没有想到，怎么O(1)的快速合并。<br>实际上合并依旧是个暴力。结果在对拍的过程中才发现GG，效率跟暴力差不多……<br>题目中涉及到xor操作，因该将它拆解成每一位做，通过乘法原理，优化加法的计算。</p>
<p>下次遇到此类题，首先，应当有一双慧眼，相信自己的方法，大胆猜想。</p>
<h2 id="T2：portal"><a href="#T2：portal" class="headerlink" title="T2：portal"></a>T2：portal</h2><p>概率！！我好像就没一次做对过此类题型…我到最后连样例是如何计算出来的都不知道.</p>
<h2 id="T3：treasurehunt"><a href="#T3：treasurehunt" class="headerlink" title="T3：treasurehunt"></a>T3：treasurehunt</h2><p>有依赖关系的图，（最大权闭合子图+网络流），还真不知道…<br>那就看着拿暴力分吧。</p>
<h2 id="T4：map"><a href="#T4：map" class="headerlink" title="T4：map"></a>T4：map</h2><p>随便瞎搞个暴力</p>
<h1 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h1><h2 id="T1：coloring"><a href="#T1：coloring" class="headerlink" title="T1：coloring"></a>T1：coloring</h2><p>博弈题!!同概率!!所以打了一个错误的搜索,只能保证先手最优化,后手最差化.<br>结果都能骗到20…</p>
<p>一定要好好恶补有关博弈和概率的问题…不然样例都不知道怎么来的…</p>
<h2 id="T2：qt"><a href="#T2：qt" class="headerlink" title="T2：qt"></a>T2：qt</h2><p>这题没想到是数位DP,觉得要用高精度做,有点恶心,先拿了50分再说!!</p>
<h2 id="T3：necklace2"><a href="#T3：necklace2" class="headerlink" title="T3：necklace2"></a>T3：necklace2</h2><p>看到题目直接回想起上次GDKOI,第一次知道了传说中M打头的算法O(N)出解.<br>然而,我已经忘光了,只能打O(N^2)的暴力,我的内心是崩溃的!!就算知道怎么打,也还是比较难.</p>
<p>只可惜不知评测时,为何我的程序文件操作挂了.可能是Pascal的文件读入我没测试吧!!</p>
<h2 id="T4：math"><a href="#T4：math" class="headerlink" title="T4：math"></a>T4：math</h2><p>刚开始看到这道题,还很高兴!!不就是循环一遍求一下乘法逆元…<br>结果做到后面发现有一些数是没有逆元的，直接GG。<br>本以为连30%都拿不到的，出了考场听其他人说有个限制n&lt;p,就不会存在没有逆元的情况.<br>感谢出题人啊!!!求逆元也没白打,恰好在这之前做了两道有关扩展GCD的问题.</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ol>
<li>考试策略基本正确,细心细致注意取mod数.</li>
<li>不管题目有多难,只要能看懂题目,能算出样例,就一定能打出暴力.</li>
<li>正解一般都与暴力的实现有关,注意数据范围和题目的类型,就能大致确定算法类型.</li>
<li>不管怎样对拍,小数据,大数据都不必可少,保证程序稳定,不挂.</li>
<li>理解清题目最重要,发现自己想不下去的时候.重看一遍题目,往往会有新的发现.</li>
</ol>
<h1 id="现有的问题及解决方案"><a href="#现有的问题及解决方案" class="headerlink" title="现有的问题及解决方案"></a>现有的问题及解决方案</h1><p>题目理解是前提，样例提示都要看。<br>遇到难题不要慌，冷静分析是关键。<br>（编不下去了…）<br>多想1分钟，胜过多打10分钟的程序。<br>只要是自己熟悉的算法，打起来就没有什么难的。<br>现在缺的不是程序实现、调试。<br>而是对题目的思考和优化。</p>
]]></content>
      <categories>
        <category>信息学</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>GDOI2016旅游记</title>
    <url>/2016/GDOI2016%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>第二年亦是最后一年GDOI。那当然就是去旅游的啦！<br>像我这种连NOIP一等奖都拿不到的蒟蒻……<br>今年GDOI在四会中学进行哦！<br>$成绩 &#x3D; 50+90+0$</p>
<h1 id="DAY0"><a href="#DAY0" class="headerlink" title="DAY0"></a>DAY0</h1><p>本想着今年四会会比去年粤北地区韶关好一点的。结果……<br>在车上，我和龙哥还预测着我们会住哪个宾馆。结果，让我们感受一下距离。</p>
<span id="more"></span>
<p><img data-src="/images/GDOI2016/%E5%9C%B0%E5%9B%BE.png" alt="地图"><br>遥想去年此刻，我们还能步行回宾馆。<br>然而这里的宾馆真的什么都没有，也多亏我们选了一个很好的5楼房间。这里的电梯只能到4楼，并且每一个楼梯间都能通到不同的5楼。幸亏凭借我们高超的智商，很快就找到了我们的房间。<br>但对于住8楼的同学，我就是在无能为力了，真搞不懂为什么对面的1楼是8楼。其实，最好的房间应该是8楼，有液晶电视哦！！我们那边还是显像管电视，龙哥带了各种转接线，然而并无卵用。<br>让我们感受一下神奇的5楼楼梯间。<br><img data-src="/images/GDOI2016/%E6%A5%BC%E6%A2%AF%E9%97%B4.png" alt="楼梯间"><br>尤其吐槽的是4号车，新车甲醛味道可真重啊！<br>学校感觉还不错，饭菜也比去年正常多了。听说，有机会试机，然而，我连机房在哪都不知道。<br><img data-src="/images/GDOI2016/%E9%A5%AD%E5%A0%82.png" alt="饭堂"></p>
<h1 id="DAY1"><a href="#DAY1" class="headerlink" title="DAY1"></a>DAY1</h1><p>早早的起来了!!我们不慌不忙的来到了宾馆1楼的食堂。WTF！！！<br>（此处允许我盗图，来源：dwj）<br><img data-src="/images/GDOI2016/20160503183122071" alt="1楼"><br>于是，我们做出了在学校买好早餐，明天吃的决定。<br>到了考场，8:00左右，推迟了15分钟开考吧！反正在此之前，我是真心什么都没准备的！</p>
<h2 id="T1-中学生数学题"><a href="#T1-中学生数学题" class="headerlink" title="T1:中学生数学题"></a>T1:中学生数学题</h2><p>自从今年GDKOI开始各种各样的学生就来了，就差幼儿园了…<br>这不就是二次函数求最大值吗？？难道不能直接算，算算发现不对，有向下取整操作！但本人坚信此题可以O(1)出解，鸟都不鸟下面的数据范围。化简成二次函数之后，可以直接求出最大的利润P，然后反推回去$n&#x3D;\lfloor n0-kp \rfloor$得到n,然后尝试将P在增大,但不会超过所计算出的n。<br>可能这种方法是错的…对于第二问，推了一下子，好像还要分类讨论，看起来很复杂的样子，那就算了….</p>
<h2 id="T2-最长公共子串"><a href="#T2-最长公共子串" class="headerlink" title="T2:最长公共子串"></a>T2:最长公共子串</h2><p>感觉上是dp题嘛，像我这种暴力选手。当然要用暴力的方法。<br>通过第二个样例可以发现，区间可以合并，我们并不需要求最少的替换次数，所以可以不用管。<br>这样我们可以把所有能合并的区间合并，得到一个大集合，由若干个小集合所组成。这样我们可以枚举两个区间，对于左右两个最边边的区间，里面的元素可以不用取光，中间集合中的元素必须全部取光。用这种方法去做搜索匹配就好了!时间复杂度就是能匹配成功的所有序列长度的和。<br>然而这样做虽然在随机数据状态下表现良好，但如果有些用心良苦的数据，GG！</p>
<h2 id="T3-有趣的一关"><a href="#T3-有趣的一关" class="headerlink" title="T3:有趣的一关"></a>T3:有趣的一关</h2><p>期望弃疗！亏我刚学过数学期望，还要列什么分布列，然而并无卵用，连样例都不知道是怎么出来的还做什么做！！</p>
<h2 id="T4-疯狂动物城"><a href="#T4-疯狂动物城" class="headerlink" title="T4:疯狂动物城"></a>T4:疯狂动物城</h2><p>这次旅游的一项任务就是看疯狂动物城，然而考试的时候并没有看。这是剧透啊！！！不能忍啊！！！而且还把如此呆萌的Flash改的如此邪恶！！！(⊙﹏⊙)b<br>据说WWT大神被delta异或给坑了，然而我已经不记得我怎么打得了，好像这题有20分。<br>提炼题目就是，两个点之间的距离乘上一个累加值的和。因为有累加值，所以倍增无能啊！那我就一个个跳咯！考验一下调试代码的能力，虽说有20%的特殊数据，但也想不到怎么做…</p>
<p>DAY1就大致这样了，评奖的时候顺便刷一波日剧……<br>据说是为了提升我省队选手的数学水平，所以有了这份试题！！<br><font color=#FFFFFF>《我的乖乖女》你看不到我！！</font></p>
<h1 id="DAY2"><a href="#DAY2" class="headerlink" title="DAY2"></a>DAY2</h1><p>早餐队伍奇迹般消失了，终于吸取教训了……</p>
<h2 id="T1-SigemaGO"><a href="#T1-SigemaGO" class="headerlink" title="T1:SigemaGO"></a>T1:SigemaGO</h2><p>spfa直接上，但是有个问题，如果我对所有的$(u,v’)(v’,v)$中的$(u,v)$都连一条边,那会超时的,而且spfa也忘了有个神奇的队列优化。然而最后有2个崩溃，6个WA，表示不知为何WA…</p>
<h2 id="T2-森林之家"><a href="#T2-森林之家" class="headerlink" title="T2:森林之家"></a>T2:森林之家</h2><p>这个游戏挺有趣的嘛，回去下了一下来玩，然而国产某mi手机没有GOOGLE应用框架啊！穷人玩不起啊！<br>像我这种傻逼，肯定直接搜索啊！我什么剪枝好像都没加，就有了50。(⊙﹏⊙)b！</p>
<h2 id="T3-机密网络"><a href="#T3-机密网络" class="headerlink" title="T3:机密网络"></a>T3:机密网络</h2><p>只需要解决第1问，那就随便枚举跑图咯</p>
<h2 id="T4-飞机"><a href="#T4-飞机" class="headerlink" title="T4:飞机"></a>T4:飞机</h2><p>看题目弃疗，什么小岛啊，边长啊，联通块啊！都是浮云…</p>
<h1 id="DAY3"><a href="#DAY3" class="headerlink" title="DAY3"></a>DAY3</h1><p>早早就知道没戏了…做好去旅游的准备，然而其实就是步行瞎走，然后当地气温倍儿高。所以，干脆折返看剧算了！！送上一副图。<br><img data-src="/images/GDOI2016/%E6%97%85%E6%B8%B8.png" alt="旅游"></p>
<h1 id="DAY4"><a href="#DAY4" class="headerlink" title="DAY4"></a>DAY4</h1><p>坐车到闭幕式现场就已经迟到了，这次会议比去年快多了呀！当听到郭老师说这次15人终于不是这两个学校垄断时，居然莫名喜感。其实还是垄断了呀！但是石门的消失我还是很惊讶的！<br><img data-src="/images/GDOI2016/%E9%97%AD%E5%B9%95%E5%BC%8F.png" alt="GDOI闭幕式"><br>带来的精神食粮也差不多用完了，辛亏有充足的准备，才能在这种不能用的wifi状态下挺过去。<br><font color=#FFFFFF>《我的乖乖女》萌萌果的声音真是太软了，接受无能啊！《相棒》还是觉得s10e10好！当然也有几级脑洞挺大的！相比脑残《柯南》算是非常好的了。</font></p>
]]></content>
      <categories>
        <category>信息学</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>Git-简明指南</title>
    <url>/2015/Git-%E7%AE%80%E6%98%8E%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
      <categories>
        <category>互联网</category>
        <category>转载</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>版本控制</tag>
      </tags>
  </entry>
  <entry>
    <title>Github资源整理</title>
    <url>/2015/Github%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
      <categories>
        <category>互联网</category>
        <category>转载</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX使用笔记</title>
    <url>/2023/LaTeX%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>终究是逃不掉的，开始了LaTeX的学习之旅。<br>这里记录一下学习过程中的一些笔记，以便日后查阅。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="TexLive"><a href="#TexLive" class="headerlink" title="TexLive"></a>TexLive</h2><p>听说Tex的发行版有很多，但是绝大多数人都是用的TexLive，那就跟个风，也用TexLive吧。<br>官方站点是：<a href="https://tug.org/texlive/">https://tug.org/texlive/</a><br>下载安装镜像：<a href="http://mirror.ctan.org/systems/texlive/Images/texlive2023.iso">http://mirror.ctan.org/systems/texlive/Images/texlive2023.iso</a><br>安装过程就不说了，一路next就好了。<br>安装时记得勾选安装前端TeXworks，这是一个很简介的编辑器，可以用来写与编译LaTeX文件。安装后可以用它来测试安装效果。<br>安装过程长达一个小时之久，占用空间大约8G。<del>是真的占用空间，都快要追上Matlab了</del></p>
<h2 id="Overleaf"><a href="#Overleaf" class="headerlink" title="Overleaf"></a>Overleaf</h2><p>Overleaf是一个在线的LaTeX编辑器，可以直接在网页上编辑与编译LaTeX文件。<br>官方站点：<a href="https://www.overleaf.com/">https://www.overleaf.com/</a><br>注册后可以直接使用，也可以使用GitHub账号登录。<br>虽然不知道免费额度有多少，但是胜在方便快速，免去安装的麻烦。<br>记得在Menu中将编译器改为XeLaTeX，用以支持中文。<br>下载PDF后不知为何，用pdf.js渲染无法显示中文，但是用浏览器自带的PDF阅读器可以正常显示。</p>
<h1 id="数学公式支持"><a href="#数学公式支持" class="headerlink" title="数学公式支持"></a>数学公式支持</h1><p>为了使用 AMS-LaTeX 提供的数学功能，我们需要在导言区加载 amsmath 宏包：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>&#123;amsmath&#125;</span><br></pre></td></tr></table></figure>

<h2 id="行内模式-inline"><a href="#行内模式-inline" class="headerlink" title="行内模式 (inline)"></a>行内模式 (inline)</h2><p>行文中使用<code>$ ... $</code>可以插入行内公式。</p>
<h2 id="行间模式-display"><a href="#行间模式-display" class="headerlink" title="行间模式 (display)"></a>行间模式 (display)</h2><p>行文中使用<code>\[ ... \]</code>可以插入行间公式。如果需要对行间公式进行编号，则可以使用 equation 环境：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;equation&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">\end</span>&#123;equation&#125;</span><br></pre></td></tr></table></figure>
<p>一个简单的示例代码，包含了上述两种模式：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;article&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;amsmath&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line">Einstein &#x27;s <span class="built_in">$</span>E=mc<span class="built_in">^</span>2<span class="built_in">$</span>.</span><br><span class="line"></span><br><span class="line"><span class="keyword">\[</span> E=mc<span class="built_in">^</span>2. <span class="keyword">\]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;equation&#125;</span><br><span class="line">E=mc<span class="built_in">^</span>2.</span><br><span class="line"><span class="keyword">\end</span>&#123;equation&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>
<p>一些使用到的特殊数学符号，就上网搜吧，太多不罗列了。</p>
<h1 id="辅助工具"><a href="#辅助工具" class="headerlink" title="辅助工具"></a>辅助工具</h1><p><a href="https://mathpix.com/">https://mathpix.com/</a> 能够通过热键呼出截屏，而后将截屏中的公式转换成 LaTeX 数学公式的代码。<br>看网站介绍有chrome插件和客户端。好像还能转换pdf到latex，但是我没试过。</p>
<h1 id="前端工具"><a href="#前端工具" class="headerlink" title="前端工具"></a>前端工具</h1><p>刚刚安装了TexLive，自带的TeXworks编辑器较为简陋，用起来不太方便。所以选择了万能的VSCODE作为前端编辑器。<br>VSC应该默认就能提供对tex的语法高亮，我们还需要再扩展中安装一个<code>LaTeX Workshop</code>插件，这个插件提供了编译、预览、自动补全等功能。<br>我安装好之后貌似就能实现保存文件的时候自动编译了。<br>并且附带了一个VSC内置的PDF阅读器，可以直接在VSC中预览PDF。</p>
<h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><p>纯英文hello world模板，可以用来测试LaTeX是否准备就绪。</p>
<figure class="highlight latex"><figcaption><span>helloworld.tex</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;article&#125;</span><br><span class="line"><span class="comment">% 这里是导言区</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line">Hello, world!</span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>
<p>中文版hello world模板，可以用来测试中文支持。</p>
<figure class="highlight latex"><figcaption><span>helloworld-chinese.tex</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[UTF8]&#123;ctexart&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line">你好，world!</span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>
<p>一个完善的带有作者、标签、日期等信息的模板。</p>
<figure class="highlight latex"><figcaption><span>helloworld-complete.tex</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[UTF8]&#123;ctexart&#125;</span><br><span class="line"><span class="keyword">\title</span>&#123;你好，world!&#125;</span><br><span class="line"><span class="keyword">\author</span>&#123;Liam&#125;</span><br><span class="line"><span class="keyword">\date</span>&#123;<span class="keyword">\today</span>&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"><span class="keyword">\maketitle</span></span><br><span class="line">你好，world!</span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>
<h2 id="作业模板"><a href="#作业模板" class="headerlink" title="作业模板"></a>作业模板</h2><p>作业模板，可以用来写作业，有固定的题目描述和解答部分。<br>包含三大部分，题目、解答、注记。</p>
<figure class="highlight latex"><figcaption><span>homework.tex</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[12pt, a4paper, oneside]&#123;ctexart&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;amsmath, amsthm, amssymb, bm, graphicx, hyperref, mathrsfs&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\title</span>&#123;<span class="keyword">\textbf</span>&#123;课程作业&#125;&#125;</span><br><span class="line"><span class="keyword">\author</span>&#123;Dylaaan&#125;</span><br><span class="line"><span class="keyword">\date</span>&#123;<span class="keyword">\today</span>&#125;</span><br><span class="line"><span class="keyword">\linespread</span>&#123;1.5&#125;</span><br><span class="line"><span class="keyword">\newcounter</span>&#123;problemname&#125;</span><br><span class="line"><span class="keyword">\newenvironment</span>&#123;problem&#125;&#123;<span class="keyword">\stepcounter</span>&#123;problemname&#125;<span class="keyword">\par</span><span class="keyword">\noindent</span><span class="keyword">\textbf</span>&#123;题目<span class="keyword">\arabic</span>&#123;problemname&#125;. &#125;&#125;&#123;<span class="keyword">\\</span><span class="keyword">\par</span>&#125;</span><br><span class="line"><span class="keyword">\newenvironment</span>&#123;solution&#125;&#123;<span class="keyword">\par</span><span class="keyword">\noindent</span><span class="keyword">\textbf</span>&#123;解答. &#125;&#125;&#123;<span class="keyword">\\</span><span class="keyword">\par</span>&#125;</span><br><span class="line"><span class="keyword">\newenvironment</span>&#123;note&#125;&#123;<span class="keyword">\par</span><span class="keyword">\noindent</span><span class="keyword">\textbf</span>&#123;题目<span class="keyword">\arabic</span>&#123;problemname&#125;的注记. &#125;&#125;&#123;<span class="keyword">\\</span><span class="keyword">\par</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\maketitle</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;problem&#125;</span><br><span class="line">    这里是题目. </span><br><span class="line"><span class="keyword">\end</span>&#123;problem&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;solution&#125;</span><br><span class="line">    这里是解答. </span><br><span class="line"><span class="keyword">\end</span>&#123;solution&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;note&#125;</span><br><span class="line">    这里是注记. </span><br><span class="line"><span class="keyword">\end</span>&#123;note&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实验报告模板（含目录）"><a href="#实验报告模板（含目录）" class="headerlink" title="实验报告模板（含目录）"></a>实验报告模板（含目录）</h2><p>包含基本的标题、作者、日期、目录等信息。有一级、二级、三级标题。<br>需要<strong>编译两次</strong>，才能看到最终含目录信息的效果。<br>两个换行（一个空行）才能实现真正的换行，LaTeX将一个换行当做是一个简单的空格来处理。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[UTF8]&#123;ctexart&#125;</span><br><span class="line"><span class="keyword">\title</span>&#123;你好，world!&#125;</span><br><span class="line"><span class="keyword">\author</span>&#123;Liam&#125;</span><br><span class="line"><span class="keyword">\date</span>&#123;<span class="keyword">\today</span>&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"><span class="keyword">\maketitle</span></span><br><span class="line"><span class="keyword">\tableofcontents</span></span><br><span class="line"><span class="keyword">\section</span>&#123;你好中国&#125;</span><br><span class="line">中国在East Asia.</span><br><span class="line"><span class="keyword">\subsection</span>&#123;Hello Beijing&#125;</span><br><span class="line">北京是capital of China.</span><br><span class="line"><span class="keyword">\subsubsection</span>&#123;Hello Dongcheng District&#125;</span><br><span class="line"><span class="keyword">\paragraph</span>&#123;Tian&#x27;anmen Square&#125;</span><br><span class="line">is in the center of Beijing</span><br><span class="line"><span class="keyword">\subparagraph</span>&#123;Chairman Mao&#125;</span><br><span class="line">is in the center of 天安门广场。</span><br><span class="line"><span class="keyword">\subsection</span>&#123;Hello 山东&#125;</span><br><span class="line"><span class="keyword">\paragraph</span>&#123;山东大学&#125; is one of the best university in 山东。</span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>
<h2 id="三线表"><a href="#三线表" class="headerlink" title="三线表"></a>三线表</h2><p>记得在<code>table</code>环境中加上<code>[h]</code>参数，可以让表格在固定位置输出，否则表格会在文档中浮动显示。</p>
<figure class="highlight latex"><figcaption><span>table.tex</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[UTF8]&#123;ctexart&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;booktabs&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;table&#125;[h]</span><br><span class="line">  <span class="keyword">\centering</span></span><br><span class="line">  <span class="keyword">\caption</span>&#123;Sample Table&#125;</span><br><span class="line">  <span class="keyword">\begin</span>&#123;tabular&#125;&#123;ccc&#125;</span><br><span class="line">    <span class="keyword">\toprule</span></span><br><span class="line">    Header 1 <span class="built_in">&amp;</span> Header 2 <span class="built_in">&amp;</span> Header 3 <span class="keyword">\\</span></span><br><span class="line">    <span class="keyword">\midrule</span></span><br><span class="line">    Row 1, Column 1 <span class="built_in">&amp;</span> Row 1, Column 2 <span class="built_in">&amp;</span> Row 1, Column 3 <span class="keyword">\\</span></span><br><span class="line">    Row 2, Column 1 <span class="built_in">&amp;</span> Row 2, Column 2 <span class="built_in">&amp;</span> Row 2, Column 3 <span class="keyword">\\</span></span><br><span class="line">    Row 3, Column 1 <span class="built_in">&amp;</span> Row 3, Column 2 <span class="built_in">&amp;</span> Row 3, Column 3 <span class="keyword">\\</span></span><br><span class="line">    <span class="keyword">\bottomrule</span></span><br><span class="line">  <span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;table&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>

<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight latex"><figcaption><span>image.tex</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[UTF8]&#123;ctexart&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;graphicx&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line">以下是一张示例图片：</span><br><span class="line"><span class="keyword">\begin</span>&#123;figure&#125;[htbp]</span><br><span class="line">  <span class="keyword">\centering</span></span><br><span class="line">  <span class="keyword">\includegraphics</span>[width=0.5<span class="keyword">\textwidth</span>]&#123;example.png&#125;</span><br><span class="line">  <span class="keyword">\caption</span>&#123;示例图片&#125;</span><br><span class="line">  <span class="keyword">\label</span>&#123;fig:example&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;figure&#125;</span><br><span class="line">在文中引用该图片可以使用“如图 <span class="keyword">\ref</span>&#123;fig:example&#125; 所示”。</span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>MIT-Missing-Semester</title>
    <url>/2022/MIT-Missing-Semester/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="计算机教育中缺失的一课"><a href="#计算机教育中缺失的一课" class="headerlink" title="计算机教育中缺失的一课"></a>计算机教育中缺失的一课</h1><p>我将针对这门课中的课后作业，和薄弱的部分做个记录，以便日后复习。</p>
<h1 id="课程概览与-shell"><a href="#课程概览与-shell" class="headerlink" title="课程概览与 shell"></a>课程概览与 shell</h1><p>这一部分没啥难得。</p>
<h2 id="课后作业"><a href="#课后作业" class="headerlink" title="课后作业"></a>课后作业</h2><ol>
<li>本课程需要使用类Unix shell，例如 Bash 或 ZSH。如果您在 Linux 或者 MacOS 上面完成本课程的练习，则不需要做任何特殊的操作。如果您使用的是 Windows，则您不应该使用 cmd 或是 Powershell；您可以使用Windows Subsystem for Linux或者是 Linux 虚拟机。使用echo $SHELL命令可以查看您的 shell 是否满足要求。如果打印结果为&#x2F;bin&#x2F;bash或&#x2F;usr&#x2F;bin&#x2F;zsh则是可以的。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br><span class="line">/bin/bash</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>在 &#x2F;tmp 下新建一个名为 missing 的文件夹。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> /tmp/missing</span><br><span class="line">$ <span class="built_in">cd</span> /tmp/missing</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>用 man 查看程序 touch 的使用手册。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ man <span class="built_in">touch</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>用 touch 在 missing 文件夹中新建一个叫 semester 的文件。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">touch</span> semester</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>将以下内容一行一行地写入 semester 文件：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;#!/bin/sh&#x27;</span> &gt;&gt; semester</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;curl --head --silent https://missing.csail.mit.edu&quot;</span> &gt;&gt; semester</span><br><span class="line">$ <span class="built_in">cat</span> semester</span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line">curl --<span class="built_in">head</span> --silent https://missing.csail.mit.edu</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>尝试执行这个文件。例如，将该脚本的路径（.&#x2F;semester）输入到您的shell中并回车。如果程序无法执行，请使用 ls 命令来获取信息并理解其不能执行的原因。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./semester</span><br><span class="line">-bash: ./semester: Permission denied</span><br><span class="line">$ <span class="built_in">ls</span> -l semester</span><br><span class="line">-rw-r--r-- 1 root root 58 Dec 27 15:37 semester</span><br></pre></td></tr></table></figure>
<ol start="7">
<li>查看 chmod 的手册(例如，使用 man chmod 命令)</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ man <span class="built_in">chmod</span></span><br></pre></td></tr></table></figure>
<ol start="8">
<li>使用 chmod 命令改变权限，使 .&#x2F;semester 能够成功执行，不要使用 sh semester 来执行该程序。您的 shell 是如何知晓这个文件需要使用 sh 来解析呢？更多信息请参考：shebang</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">chmod</span> u+x semester</span><br><span class="line">$ ./semester</span><br><span class="line">HTTP/2 200 </span><br><span class="line">server: GitHub.com</span><br><span class="line">content-type: text/html; charset=utf-8</span><br><span class="line">last-modified: Mon, 05 Dec 2022 15:59:23 GMT</span><br><span class="line">access-control-allow-origin: *</span><br><span class="line">etag: <span class="string">&quot;638e155b-1f37&quot;</span></span><br><span class="line">expires: Tue, 27 Dec 2022 08:01:51 GMT</span><br><span class="line">cache-control: max-age=600</span><br><span class="line">x-proxy-cache: MISS</span><br><span class="line">x-github-request-id: 2438:49BD:428E8A:4BB4EE:63AAA417</span><br><span class="line">accept-ranges: bytes</span><br><span class="line"><span class="built_in">date</span>: Tue, 27 Dec 2022 07:51:51 GMT</span><br><span class="line">via: 1.1 varnish</span><br><span class="line">age: 0</span><br><span class="line">x-served-by: cache-qpg1229-QPG</span><br><span class="line">x-cache: MISS</span><br><span class="line">x-cache-hits: 0</span><br><span class="line">x-timer: S1672127512.608152,VS0,VE232</span><br><span class="line">vary: Accept-Encoding</span><br><span class="line">x-fastly-request-id: 70cc3b726240ab87a0f03dd3c8383ddf7f72b9c5</span><br><span class="line">content-length: 7991</span><br></pre></td></tr></table></figure>
<ol start="9">
<li>使用 | 和 &gt; ，将 semester 文件输出的最后更改日期信息，写入主目录下的 last-modified.txt 的文件中</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./semester | grep last-modified | <span class="built_in">cut</span> -d <span class="string">&#x27; &#x27;</span> -f 2- &gt; ~/last-modified.txt</span><br><span class="line">$ <span class="built_in">cat</span> ~/last-modified.txt</span><br><span class="line">Mon, 05 Dec 2022 15:59:23 GMT</span><br></pre></td></tr></table></figure>
<ol start="10">
<li>写一段命令来从 &#x2F;sys 中获取笔记本的电量信息，或者台式机 CPU 的温度。注意：macOS 并没有 sysfs，所以 Mac 用户可以跳过这一题。</li>
</ol>
<p>没有温度相关信息，跳过。</p>
<h1 id="Shell-工具和脚本"><a href="#Shell-工具和脚本" class="headerlink" title="Shell 工具和脚本"></a>Shell 工具和脚本</h1><h2 id="source命令"><a href="#source命令" class="headerlink" title="source命令"></a>source命令</h2><p>source命令是一个内置的shell命令，用于从当前shell会话中的文件读取和执行命令。source命令通常用于保留、更改当前shell中的环境变量。简而言之，source一个脚本，将会在当前shell中运行execute命令。source命令的语法如下：<br>source命令可用于：</p>
<ul>
<li>刷新当前的shell环境</li>
<li>在当前环境使用source执行Shell脚本</li>
<li>从脚本中导入环境中一个Shell函数</li>
<li>从另一个Shell脚本中读取变量</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> filename</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">. filename</span><br></pre></td></tr></table></figure>
<h2 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h2><ul>
<li>!! - 完整的上一条命令，包括参数。常见应用：当你因为权限不足执行命令失败时，可以使用 sudo !!再尝试一次。</li>
<li>$$ - 当前脚本的进程识别码</li>
<li>$_ - 上一条命令的最后一个参数。如果你正在使用的是交互式 shell，你可以通过按下 Esc 之后键入 . 来获取这个值。</li>
</ul>
<h2 id="传递文件而非stdin"><a href="#传递文件而非stdin" class="headerlink" title="传递文件而非stdin"></a>传递文件而非stdin</h2><p><code>&lt;( CMD )</code> 会执行 CMD 并将结果输出到一个临时文件中，并将 &lt;( CMD ) 替换成临时文件名。这在我们希望返回值通过文件而不是STDIN传递时很有用。例如， <code>diff &lt;(ls foo) &lt;(ls bar)</code> 会显示文件夹 foo 和 bar 中文件的区别。<br><code>&lt;( CMD )</code> 会执行 CMD 并将结果输出到一个临时文件中，并将 <code>&lt;( CMD )</code> 替换成临时文件名。</p>
<h2 id="shell的通配"><a href="#shell的通配" class="headerlink" title="shell的通配"></a>shell的通配</h2><ul>
<li>花括号{} - 当你有一系列的指令，其中包含一段公共子串时，可以用花括号来自动展开这些命令。这在批量移动或转换文件时非常方便。</li>
</ul>
<p>下面是一些例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">convert image.&#123;png,jpg&#125;</span><br><span class="line"><span class="comment"># 会展开为</span></span><br><span class="line">convert image.png image.jpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以结合通配使用</span></span><br><span class="line"><span class="built_in">mv</span> *&#123;.py,.sh&#125; folder</span><br><span class="line"><span class="comment"># 会移动所有 *.py 和 *.sh 文件</span></span><br></pre></td></tr></table></figure>
<h2 id="shebang行"><a href="#shebang行" class="headerlink" title="shebang行"></a>shebang行</h2><p>shebang行是一个特殊的行，它告诉操作系统这个脚本应该使用哪个解释器来执行。<br>在 shebang 行中使用 env 命令是一种好的实践，它会利用环境变量中的程序来解析该脚本，这样就提高来您的脚本的可移植性。env 会利用我们第一节讲座中介绍过的PATH 环境变量来进行定位。 例如，使用了env的shebang看上去时这样的<code>#!/usr/bin/env python</code>。</p>
<h2 id="查找shell命令"><a href="#查找shell命令" class="headerlink" title="查找shell命令"></a>查找shell命令</h2><p>除了传统的<code>history</code>命令，还有一些更好的方法来查找shell命令。<br>对于大多数的shell来说，您可以使用 Ctrl+R 对命令历史记录进行回溯搜索。敲 Ctrl+R 后您可以输入子串来进行匹配，查找历史命令行。</p>
<h2 id="课后作业-1"><a href="#课后作业-1" class="headerlink" title="课后作业"></a>课后作业</h2><ol>
<li>阅读 man ls ，然后使用ls 命令进行如下操作：</li>
</ol>
<ul>
<li>所有文件（包括隐藏文件）</li>
<li>文件打印以人类可以理解的格式输出 (例如，使用454M 而不是 454279954)</li>
<li>文件以最近访问顺序排序</li>
<li>以彩色文本显示输出结果</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -a</span><br><span class="line">$ <span class="built_in">ls</span> -lh</span><br><span class="line">$ <span class="built_in">ls</span> -t</span><br><span class="line">$ <span class="built_in">ls</span> --color</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编写两个bash函数 marco 和 polo 执行下面的操作。 每当你执行 marco 时，当前的工作目录应当以某种形式保存，当执行 polo 时，无论现在处在什么目录下，都应当 cd 回到当时执行 marco 的目录。 为了方便debug，你可以把代码写在单独的文件<code>marco.sh</code>中，并通过<code>source marco.sh</code>命令，（重新）加载函数。</li>
</ol>
<figure class="highlight bash"><figcaption><span>marco.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">marco</span></span>() &#123;</span><br><span class="line">    <span class="built_in">pwd</span> &gt; /tmp/marco</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">polo</span></span>() &#123;</span><br><span class="line">    <span class="built_in">cd</span> $(<span class="built_in">cat</span> /tmp/marco)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.假设您有一个命令，它很少出错。因此为了在出错时能够对其进行调试，需要花费大量的时间重现错误并捕获输出。 编写一段bash脚本，运行如下的脚本直到它出错，将它的标准输出和标准错误流记录到文件，并在最后输出所有内容。 加分项：报告脚本在失败前共运行了多少次。</p>
<figure class="highlight bash"><figcaption><span>shell.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">n=$(( RANDOM % <span class="number">100</span> ))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ n -eq 42 ]]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;Something went wrong&quot;</span></span><br><span class="line">   &gt;&amp;2 <span class="built_in">echo</span> <span class="string">&quot;The error was using magic numbers&quot;</span></span><br><span class="line">   <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Everything went according to plan&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><figcaption><span>mycode.sh</span></figcaption><table><tr><td class="code"><pre><span class="line">count=0</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span></span><br><span class="line">    ./shell.sh &amp;&gt;&gt;out.log</span><br><span class="line">    <span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">cat</span> out.log</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Failed after <span class="variable">$count</span> runs&quot;</span></span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    count=$((count+<span class="number">1</span>))</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>本节课我们讲解的 find 命令中的 -exec 参数非常强大，它可以对我们查找的文件进行操作。但是，如果我们要对所有文件进行操作呢？例如创建一个zip压缩文件？我们已经知道，命令行可以从参数或标准输入接受输入。在用管道连接命令时，我们将标准输出和标准输入连接起来，但是有些命令，例如tar 则需要从参数接受输入。这里我们可以使用xargs 命令，它可以使用标准输入中的内容作为参数。 例如 ls | xargs rm 会删除当前目录中的所有文件。</li>
</ol>
<p>您的任务是编写一个命令，它可以递归地查找文件夹中所有的HTML文件，并将它们压缩成zip文件。注意，即使文件名中包含空格，您的命令也应该能够正确执行<br>创建所需文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> html_root</span><br><span class="line"><span class="built_in">cd</span> html_root</span><br><span class="line"><span class="built_in">touch</span> &#123;1..10&#125;.html</span><br><span class="line"><span class="built_in">mkdir</span> html</span><br><span class="line"><span class="built_in">cd</span> html</span><br><span class="line"><span class="built_in">touch</span> xxx.html</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> f -name <span class="string">&quot;*.html&quot;</span> | xargs -d <span class="string">&#x27;\n&#x27;</span>  tar -cvzf html.tar.gz</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>（进阶）编写一个命令或脚本递归的查找文件夹中最近使用的文件。更通用的做法，你可以按照最近的使用时间列出文件吗？</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> f | xargs -d <span class="string">&#x27;\n&#x27;</span> <span class="built_in">ls</span> -lt | <span class="built_in">head</span> -5</span><br></pre></td></tr></table></figure>

<h1 id="编辑器-Vim"><a href="#编辑器-Vim" class="headerlink" title="编辑器 (Vim)"></a>编辑器 (Vim)</h1><p>跳过此章节</p>
<h1 id="数据整理"><a href="#数据整理" class="headerlink" title="数据整理"></a>数据整理</h1><p>跳过此章节</p>
<h1 id="命令行环境"><a href="#命令行环境" class="headerlink" title="命令行环境"></a>命令行环境</h1><p>讲解了下fg、bg将当前进程置与前台与后台，nohup等工具忽略SIGHUP信号。<br>&amp; 后缀可以让命令在直接在后台运行。</p>
<h2 id="终端多路复用"><a href="#终端多路复用" class="headerlink" title="终端多路复用"></a>终端多路复用</h2><p>因为我不是一个生活在纯终端下的人，所以tmux对于我来说用处不大，我更倾向于使用screen，来使用与切换多个终端。</p>
<h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><p>与后文的配置文件（Dotfiles）可以联动，配置专属于自己的工作环境，来简化命令的操作。</p>
<h2 id="配置文件（Dotfiles）"><a href="#配置文件（Dotfiles）" class="headerlink" title="配置文件（Dotfiles）"></a>配置文件（Dotfiles）</h2><p>准备一份Dotfiles文件仓库，将自己常用的软件配置文件放在里面，方便在不同的机器上使用。<br>通过符号链接链接到Git版本库中</p>
<h2 id="SSH中的端口转发"><a href="#SSH中的端口转发" class="headerlink" title="SSH中的端口转发"></a>SSH中的端口转发</h2><p>本地端口转发：将远程服务器的监听端口转发到本地<br>远程端口转发：将本地监听端口转发到远程服务器</p>
<h1 id="版本控制（Git）"><a href="#版本控制（Git）" class="headerlink" title="版本控制（Git）"></a>版本控制（Git）</h1><p>跳过此章节</p>
<h1 id="调试及性能分析"><a href="#调试及性能分析" class="headerlink" title="调试及性能分析"></a>调试及性能分析</h1><p>代码不能完全按照您的想法运行，它只能完全按照您的写法运行，这是编程界的一条金科玉律。</p>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>printf调试大法，高端一点可以用日志记录。<br>像gdb这样的调试器进行调试<br>静态代码分析工具，在不运行代码的情况下，发现代码中隐藏的问题。</p>
<h2 id="性能分析工具"><a href="#性能分析工具" class="headerlink" title="性能分析工具"></a>性能分析工具</h2><ul>
<li>通用监控：top</li>
<li>I&#x2F;O 操作：iotop</li>
<li>磁盘使用：df</li>
<li>内存使用：free</li>
<li>打开文件：lsof</li>
<li>网络连接和配置：ss、ip</li>
<li>网络使用：iftop</li>
</ul>
<h1 id="元编程"><a href="#元编程" class="headerlink" title="元编程"></a>元编程</h1><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><p>主版本号.次版本号.补丁号。相关规则有：</p>
<p>如果新的版本没有改变 API，请将补丁号递增；<br>如果您添加了 API 并且该改动是向后兼容的，请将次版本号递增；<br>如果您修改了 API 但是它并不向后兼容，请将主版本号递增。</p>
<h1 id="安全和密码学"><a href="#安全和密码学" class="headerlink" title="安全和密码学"></a>安全和密码学</h1><p>跳过此章节</p>
<h1 id="大杂烩"><a href="#大杂烩" class="headerlink" title="大杂烩"></a>大杂烩</h1><h2 id="常见命令行标志参数及模式"><a href="#常见命令行标志参数及模式" class="headerlink" title="常见命令行标志参数及模式"></a>常见命令行标志参数及模式</h2><ul>
<li>基本所有的工具支持使用 <code>--verbose</code> 或者 <code>-v</code> 标志参数来输出详细的运行信息。多次使用这个标志参数，比如 <code>-vvv</code>，可以让工具输出更详细的信息（经常用于调试）。同样，很多工具支持 <code>--quiet</code> 标志参数来抑制除错误提示之外的其他输出。</li>
<li>大多数工具中，使用 - 代替输入或者输出文件名意味着工具将从标准输入（standard input）获取所需内容，或者向标准输出（standard output）输出结果。</li>
</ul>
]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>[NOIP]10.27总结</title>
    <url>/2015/NOIP-10-27%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h2 id="这场比赛主要是第二题题意理解上出了问题，以及第三题的推导公式还有待加强。T1-挑竹签"><a href="#这场比赛主要是第二题题意理解上出了问题，以及第三题的推导公式还有待加强。T1-挑竹签" class="headerlink" title="这场比赛主要是第二题题意理解上出了问题，以及第三题的推导公式还有待加强。T1:挑竹签"></a>这场比赛主要是第二题题意理解上出了问题，以及第三题的推导公式还有待加强。<br>T1:挑竹签</h2><p>看完题目后，想着画了一下与之对应的图。发现此题就是每次取走入度为0的节点（竹签），询问最多能取多少。那就是一个拓扑排序，知道最后只剩下环。（环是无法挑的）</p>
<h2 id="T2：魔道研究"><a href="#T2：魔道研究" class="headerlink" title="T2：魔道研究"></a>T2：魔道研究</h2><p>这题我连题目意思都理解错了，还理解错了两次。直到考试结束后经与其他人的讨论，才彻底理解了题目的意思。一开始想的题目意思太简单了。认为只是纯模拟给出的操作，最后输出结果。后面理解了题目意思，想了很久都没想到什么特别好的数据结构，最后提示用线段树，想想很快就懂了。用map存一下就好了。复杂度是O（NlogN）的。测试了些大数据级小数据后就去看第三题了。</p>
<h1 id="T3：魔法阵"><a href="#T3：魔法阵" class="headerlink" title="T3：魔法阵"></a>T3：魔法阵</h1><p>看着这题复杂，所以直奔部分分去了，对于k&#x3D;1的情况还是很好想的。每个相邻矩形中差的三角形数是定制4*6，所以等差数列求第n项就好了。对于k&#x3D;2的情况想了很久，本来想放弃的，但是考试时间还多，就拿起来退了一下。可能是推错了。最后没得部分分。</p>
]]></content>
      <categories>
        <category>信息学</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>[NOIP]11.21总结</title>
    <url>/2015/NOIP-11-21%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>T1:粉刷匠<br>刚一开始看错题目啦!我认为竖着也可以粉刷,然而并不是,这只是每行粉刷。<br>因为每一行都是独立的，所以可以分开一行一行染色，随后染色的数目等于T，对于每一行，只需要看这一行用j次粉刷能粉刷的最大数目是多少就可以了。</p>
<p>T2:迷路<br>在不知道是矩阵乘法时，我是没思路的，当知道是矩阵乘法时只知道边权为1时怎么做。当边权为1时，矩阵乘法一次邻接矩阵，就相当于都走了一步。<br>因为边权很小在$[1,9]$之间,所以可以将一个点拆成9个点,将他们连接起来。做T次矩阵乘法，就能得到答案。</p>
<p>T3:游戏<br>将对应关系建成一幅图，发现整个图是有若干个环组成。答案就是求若干个环的大小相加为N时的$\Sigma(LCM)$。到了这一步就不知道怎么做了。因为这里有一个性质</p>
<blockquote>
<p>考虑最小公倍数不为1的情况，这它为m。<br>则m&#x3D;p1^a1*p2^a2…，而对于一个m，存在一个序列的最小公倍数为m的充要条件是：<br>p1^a1+p2^a2+….&lt;&#x3D;n。</p>
</blockquote>
<p>按照上述条件做一下背包就可以了。$F[i][j]$表示做到第i个质数$\Sigma$为j时$(j&lt;&#x3D;n)$</p>
]]></content>
      <categories>
        <category>信息学</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>Git教程</title>
    <url>/2015/Git%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- 文章中视频全失效 -->
<h1 id="关于本教程"><a href="#关于本教程" class="headerlink" title="关于本教程"></a>关于本教程</h1><p><img data-src="/images/Git%E6%95%99%E7%A8%8B/0.jpg" alt="Git-Logo"></p>
<h2 id="史上最浅显易懂的Git教程！"><a href="#史上最浅显易懂的Git教程！" class="headerlink" title="史上最浅显易懂的Git教程！"></a>史上最浅显易懂的Git教程！</h2><p>为什么要编写这个教程？因为我在学习Git的过程中，买过书，也在网上Google了一堆Git相关的文章和教程，但令人失望的是，这些教程不是难得令人发指，就是简单得一笔带过，或者，只支离破碎地介绍Git的某几个命令，还有直接从Git手册粘贴帮助文档的，总之，初学者很难找到一个由浅入深，学完后能立刻上手的Git教程。</p>
<p>既然号称史上最浅显易懂的Git教程，那这个教程有什么让你怦然心动的特点呢？</p>
<p>首先，本教程绝对面向初学者，没有接触过版本控制概念的读者也可以轻松入门，不必担心起步难度；</p>
<p>其次，本教程实用性超强，边学边练，一点也不觉得枯燥。而且，你所学的Git命令是“充分且必要”的，掌握了这些东西，你就可以通过Git轻松地完成你的工作。</p>
<h2 id="文字-图片还看不明白？有视频！！！"><a href="#文字-图片还看不明白？有视频！！！" class="headerlink" title="文字+图片还看不明白？有视频！！！"></a>文字+图片还看不明白？有视频！！！</h2><p>本教程只会让你成为Git用户，不会让你成为Git专家。很多Git命令只有那些专家才明白（事实上我也不明白，因为我不是Git专家），但我保证这些命令可能你一辈子都不会用到。既然Git是一个工具，就没必要把时间浪费在那些“高级”但几乎永远不会用到的命令上。一旦你真的非用不可了，到时候再自行Google或者请教专家也未迟。</p>
<p>如果你是一个开发人员，想用上这个世界上目前最先进的分布式版本控制系统，那么，赶快开始学习吧！</p>
<h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p><a href="http://weibo.com/liaoxuefeng">廖雪峰</a>，十年软件开发经验，业余产品经理，精通Java&#x2F;Python&#x2F;Ruby&#x2F;Visual Basic&#x2F;Objective C等，对开源框架有深入研究，著有《Spring 2.0核心技术与最佳实践》一书，多个业余开源项目托管在<a href="https://github.com/michaelliao">GitHub</a>，欢迎微博交流：</p>
<p><a href="http://weibo.com/u/1658384301?s=6uyXnP" target="_blank"><img border="0" data-src="http://service.t.sina.com.cn/widget/qmd/1658384301/078cedea/2.png"/></a></p>
<h1 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h1><p>Git是什么？</p>
<p>Git是目前世界上最先进的分布式版本控制系统（没有之一）。</p>
<p>Git有什么特点？简单来说就是：高端大气上档次！</p>
<p>那什么是版本控制系统？</p>
<p>如果你用Microsoft Word写过长篇大论，那你一定有这样的经历：</p>
<p>想删除一个段落，又怕将来想恢复找不回来怎么办？有办法，先把当前文件“另存为……”一个新的Word文件，再接着改，改到一定程度，再“另存为……”一个新文件，这样一直改下去，最后你的Word文档变成了这样：</p>
<p><img data-src="/images/Git%E6%95%99%E7%A8%8B/1.jpg" alt="这里写图片描述"></p>
<p>过了一周，你想找回被删除的文字，但是已经记不清删除前保存在哪个文件里了，只好一个一个文件去找，真麻烦。</p>
<p>看着一堆乱七八糟的文件，想保留最新的一个，然后把其他的删掉，又怕哪天会用上，还不敢删，真郁闷。</p>
<p>更要命的是，有些部分需要你的财务同事帮助填写，于是你把文件Copy到U盘里给她（也可能通过Email发送一份给她），然后，你继续修改Word文件。一天后，同事再把Word文件传给你，此时，你必须想想，发给她之后到你收到她的文件期间，你作了哪些改动，得把你的改动和她的部分合并，真困难。</p>
<p>于是你想，如果有一个软件，不但能自动帮我记录每次文件的改动，还可以让同事协作编辑，这样就不用自己管理一堆类似的文件了，也不需要把文件传来传去。如果想查看某次改动，只需要在软件里瞄一眼就可以，岂不是很方便？</p>
<p>这个软件用起来就应该像这个样子，能记录每次文件的改动：</p>
<table class="table table-bordered">
<tr><th>版本</th><th>用户</th><th>说明</th><th>日期</th></tr>
<tr><td>1</td><td>张三</td><td>删除了软件服务条款5</td><td>7/12 10:38</td></tr>
<tr><td>2</td><td>张三</td><td>增加了License人数限制</td><td>7/12 18:09</td></tr>
<tr><td>3</td><td>李四</td><td>财务部门调整了合同金额</td><td>7/13 9:51</td></tr>
<tr><td>4</td><td>张三</td><td>延长了免费升级周期</td><td>7/14 15:17</td></tr>
</table>

<p>这样，你就结束了手动管理多个“版本”的史前时代，进入到版本控制的20世纪。</p>
<h2 id="Git的诞生"><a href="#Git的诞生" class="headerlink" title="Git的诞生"></a>Git的诞生</h2><p>很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。</p>
<p>Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？</p>
<p>事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码！</p>
<p>你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是付费的，和Linux的开源精神不符。</p>
<p>不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。</p>
<p>安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。</p>
<p>Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：</p>
<p>Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！牛是怎么定义的呢？大家可以体会一下。</p>
<p>Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。</p>
<p>历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。</p>
<h2 id="集中式vs分布式"><a href="#集中式vs分布式" class="headerlink" title="集中式vs分布式"></a>集中式vs分布式</h2><p>Linus一直痛恨的CVS及SVN都是集中式的版本控制系统，而Git是分布式版本控制系统，集中式和分布式版本控制系统有什么区别呢？</p>
<p>先说集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆。</p>
<p><img data-src="/images/Git%E6%95%99%E7%A8%8B/2.jpg" alt="这里写图片描述"></p>
<p>集中式版本控制系统最大的毛病就是必须联网才能工作，如果在局域网内还好，带宽够大，速度够快，可如果在互联网上，遇到网速慢的话，可能提交一个10M的文件就需要5分钟，这还不得把人给憋死啊。</p>
<p>那分布式版本控制系统与集中式版本控制系统有何不同呢？首先，分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p>
<p>和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。</p>
<p>在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，因为可能你们俩不在一个局域网内，两台电脑互相访问不了，也可能今天你的同事病了，他的电脑压根没有开机。因此，分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。</p>
<p><img data-src="/images/Git%E6%95%99%E7%A8%8B/3.jpg" alt="这里写图片描述"></p>
<p>当然，Git的优势不单是不必联网这么简单，后面我们还会看到Git极其强大的分支管理，把SVN等远远抛在了后面。</p>
<p>CVS作为最早的开源而且免费的集中式版本控制系统，直到现在还有不少人在用。由于CVS自身设计的问题，会造成提交文件不完整，版本库莫名其妙损坏的情况。同样是开源而且免费的SVN修正了CVS的一些稳定性问题，是目前用得最多的集中式版本库控制系统。</p>
<p>除了免费的外，还有收费的集中式版本控制系统，比如IBM的ClearCase（以前是Rational公司的，被IBM收购了），特点是安装比Windows还大，运行比蜗牛还慢，能用ClearCase的一般是世界500强，他们有个共同的特点是财大气粗，或者人傻钱多。</p>
<p>微软自己也有一个集中式版本控制系统叫VSS，集成在Visual Studio中。由于其反人类的设计，连微软自己都不好意思用了。</p>
<p>分布式版本控制系统除了Git以及促使Git诞生的BitKeeper外，还有类似Git的Mercurial和Bazaar等。这些分布式版本控制系统各有特点，但最快、最简单也最流行的依然是Git！</p>
<h1 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h1><p>最早Git是在Linux上开发的，很长一段时间内，Git也只能在Linux和Unix系统上跑。不过，慢慢地有人把它移植到了Windows上。现在，Git可以在Linux、Unix、Mac和Windows这几大平台上正常运行了。</p>
<p>要使用Git，第一步当然是安装Git了。根据你当前使用的平台来阅读下面的文字：</p>
<h2 id="在Linux上安装Git"><a href="#在Linux上安装Git" class="headerlink" title="在Linux上安装Git"></a>在Linux上安装Git</h2><p>首先，你可以试着输入git，看看系统有没有安装Git：</p>
<pre><code>$ git
The program &#39;git&#39; is currently not installed. You can install it by typing:
sudo apt-get install git
</code></pre>
<p>像上面的命令，有很多Linux会友好地告诉你Git没有安装，还会告诉你如何安装Git。</p>
<p>如果你碰巧用Debian或Ubuntu Linux，通过一条“sudo apt-get install git”就可以直接完成Git的安装，非常简单。</p>
<p><video width="100%" height="65%" controls="controls" preload="none" style="border:solid 1px #ccc"><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/git-apt-install.mp4" /><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/git-apt-install.webm" /></video></p>
<p>老一点的Debian或Ubuntu Linux，要把命令改为“sudo apt-get install git-core”，因为以前有个软件也叫GIT（GNU Interactive Tools），结果Git就只能叫git-core了。由于Git名气实在太大，后来就把GNU Interactive Tools改成gnuit，git-core正式改为git。</p>
<p>如果是其他Linux版本，可以直接通过源码安装。先从Git官网下载源码，然后解压，依次输入：.&#x2F;config，make，sudo make install这几个命令安装就好了。</p>
<h2 id="在Mac-OS-X上安装Git"><a href="#在Mac-OS-X上安装Git" class="headerlink" title="在Mac OS X上安装Git"></a>在Mac OS X上安装Git</h2><p>如果你正在使用Mac做开发，有两种安装Git的方法。</p>
<p>一是安装homebrew，然后通过homebrew安装Git，具体方法请参考homebrew的文档：<a href="http://brew.sh/">http://brew.sh/</a>。</p>
<p>第二种方法更简单，也是推荐的方法，就是直接从AppStore安装Xcode，Xcode集成了Git，不过默认没有安装，你需要运行Xcode，选择菜单“Xcode”-&gt;“Preferences”，在弹出窗口中找到“Downloads”，选择“Command Line Tools”，点“Install”就可以完成安装了。</p>
<p><img data-src="/images/Git%E6%95%99%E7%A8%8B/4.jpg" alt="这里写图片描述"></p>
<p>Xcode是Apple官方IDE，功能非常强大，是开发Mac和iOS App的必选装备，而且是免费的！</p>
<h2 id="在Windows上安装Git"><a href="#在Windows上安装Git" class="headerlink" title="在Windows上安装Git"></a>在Windows上安装Git</h2><p>实话实说，Windows是最烂的开发平台，如果不是开发Windows游戏或者在IE里调试页面，一般不推荐用Windows。不过，既然已经上了微软的贼船，也是有办法安装Git的。</p>
<p>Windows下要使用很多Linux&#x2F;Unix的工具时，需要Cygwin这样的模拟环境，Git也一样。Cygwin的安装和配置都比较复杂，就不建议你折腾了。不过，有高人已经把模拟环境和Git都打包好了，名叫msysgit，只需要下载一个单独的exe安装程序，其他什么也不用装，绝对好用。</p>
<p>msysgit是Windows版的Git，从<a href="http://msysgit.github.io/">http://msysgit.github.io/</a>下载，然后按默认选项安装即可。</p>
<p>安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！</p>
<p><img data-src="/images/Git%E6%95%99%E7%A8%8B/5.jpg" alt="这里写图片描述"></p>
<p>安装完成后，还需要最后一步设置，在命令行输入：</p>
<pre><code>$ git config --global user.name &quot;Your Name&quot;
$ git config --global user.email &quot;email@example.com&quot;
</code></pre>
<p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。</p>
<p>注意<em>git config</em>命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p>
<h1 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h1><p>什么是版本库呢？版本库又名仓库，英文名<strong>repository</strong>，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p>
<p>所以，创建一个版本库非常简单，首先，选择一个合适的地方，创建一个空目录：</p>
<pre><code>$ mkdir learngit
$ cd learngit
$ pwd
/Users/michael/learngit
</code></pre>
<p>pwd命令用于显示当前目录。在我的Mac上，这个仓库位于&#x2F;Users&#x2F;michael&#x2F;learngit。</p>
<p><i class="icon-warning-sign"></i> 如果你使用Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。</p>
<p>第二步，通过git init命令把这个目录变成Git可以管理的仓库：</p>
<pre><code>$ git init
Initialized empty Git repository in /Users/michael/learngit/.git/
</code></pre>
<p>瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。</p>
<p><video width="100%" height="65%" controls="controls" preload="none" style="border:solid 1px #ccc"><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/git-init.mp4" /><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/git-init.webm" /></video></p>
<p>也不一定必须在空目录下创建Git仓库，选择一个已经有东西的目录也是可以的。不过，不建议你使用自己正在开发的公司项目来学习Git，否则造成的一切后果概不负责。</p>
<h2 id="把文件添加到版本库"><a href="#把文件添加到版本库" class="headerlink" title="把文件添加到版本库"></a>把文件添加到版本库</h2><p>首先这里再明确一下，所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。</p>
<p>不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的，前面我们举的例子只是为了演示，如果要真正使用版本控制系统，就要以纯文本方式编写文件。</p>
<p>因为文本是有编码的，比如中文有常用的GBK编码，日文有Shift_JIS编码，如果没有历史遗留问题，强烈建议使用标准的UTF-8编码，所有语言使用同一种编码，既没有冲突，又被所有平台所支持。</p>
<p><i class="icon-warning-sign"></i> 使用Windows的童鞋要特别注意，千万不要使用Windows自带的<strong>记事本</strong>编辑任何文本文件。原因是Microsoft开发记事本的团队使用了一个非常弱智的行为来保存UTF-8编码的文件，他们自作聪明地在每个文件开头添加了0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题，比如，网页第一行可能会显示一个“?”，明明正确的程序一编译就报语法错误，等等，都是由记事本的弱智行为带来的。建议你下载<a href="http://notepad-plus-plus.org/">Notepad++</a>代替记事本，不但功能强大，而且免费！记得把Notepad++的默认编码设置为UTF-8 without BOM即可：</p>
<p><img data-src="/images/Git%E6%95%99%E7%A8%8B/6.jpg" alt="这里写图片描述"></p>
<p>言归正传，现在我们编写一个readme.txt文件，内容如下：</p>
<pre><code>Git is a version control system.
Git is free software.
</code></pre>
<p>一定要放到learngit目录下（子目录也行），因为这是一个Git仓库，放到其他地方Git再厉害也找不到这个文件。</p>
<p>和把大象放到冰箱需要3步相比，把一个文件放到Git仓库只需要两步。</p>
<p>第一步，用命令<em>git add</em>告诉Git，把文件添加到仓库：</p>
<pre><code>$ git add readme.txt
</code></pre>
<p>执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。</p>
<p>第二步，用命令<em>git commit</em>告诉Git，把文件提交到仓库：</p>
<pre><code>$ git commit -m &quot;wrote a readme file&quot;
[master (root-commit) cb926e7] wrote a readme file
 1 file changed, 2 insertions(+)
 create mode 100644 readme.txt
</code></pre>
<p><video width="100%" height="65%" controls="controls" preload="none" style="border:solid 1px #ccc"><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/add-and-commit.mp4" /><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/add-and-commit.webm" /></video></p>
<p>简单解释一下git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p>
<p>嫌麻烦不想输入-m “xxx”行不行？确实有办法可以这么干，但是强烈不建议你这么干，因为输入说明对自己对别人阅读都很重要。实在不想输入说明的童鞋请自行Google，我不告诉你这个参数。</p>
<p>git commit命令执行成功后会告诉你，1个文件被改动（我们新添加的readme.txt文件），插入了两行内容（readme.txt有两行内容）。</p>
<p>为什么Git添加文件需要<em>add</em>，<em>commit</em>一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：</p>
<pre><code>$ git add file1.txt
$ git add file2.txt
$ git add file3.txt
$ git commit -m &quot;add 3 files.&quot;
</code></pre>
<p><strong>小结</strong></p>
<p>现在总结一下今天学的两点内容：</p>
<p>初始化一个Git仓库，使用git init命令。</p>
<p>添加文件到Git仓库，分两步：</p>
<ul>
<li><p>第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；</p>
</li>
<li><p>第二步，使用命令git commit，完成。</p>
</li>
</ul>
<h1 id="时光机穿梭"><a href="#时光机穿梭" class="headerlink" title="时光机穿梭"></a>时光机穿梭</h1><p>我们已经成功地添加并提交了一个readme.txt文件，现在，是时候继续工作了，于是，我们继续修改readme.txt文件，改成如下内容：</p>
<pre><code>Git is a distributed version control system.
Git is free software.
</code></pre>
<p>现在，运行<em>git status</em>命令看看结果：</p>
<pre><code>$ git status
# On branch master
# Changes not staged for commit:
#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
#
#	modified:   readme.txt
#
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
</code></pre>
<p><em>git status</em>命令可以让我们时刻掌握仓库当前的状态，上面的命令告诉我们，readme.txt被修改过了，但还没有准备提交的修改。</p>
<p>虽然Git告诉我们readme.txt被修改了，但如果能看看具体修改了什么内容，自然是很好的。比如你休假两周从国外回来，第一天上班时，已经记不清上次怎么修改的readme.txt，所以，需要用<em>git diff</em>这个命令看看：</p>
<pre><code>$ git diff readme.txt 
diff --git a/readme.txt b/readme.txt
index 46d49bf..9247db6 100644
--- a/readme.txt
+++ b/readme.txt
@@ -1,2 +1,2 @@
-Git is a version control system.
+Git is a distributed version control system.
 Git is free software.
</code></pre>
<p><em>git diff</em>顾名思义就是查看difference，显示的格式正是Unix通用的diff格式，可以从上面的命令输出看到，我们在第一行添加了一个“distributed”单词。</p>
<p>知道了对readme.txt作了什么修改后，再把它提交到仓库就放心多了，提交修改和提交新文件是一样的两步，第一步是git add：</p>
<pre><code>$ git add readme.txt
</code></pre>
<p>同样没有任何输出。在执行第二步git commit之前，我们再运行<em>git status</em>看看当前仓库的状态：</p>
<pre><code>$ git status
# On branch master
# Changes to be committed:
#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)
#
#       modified:   readme.txt
#
</code></pre>
<p><em>git status</em>告诉我们，将要被提交的修改包括readme.txt，下一步，就可以放心地提交了：</p>
<pre><code>$ git commit -m &quot;add distributed&quot;
[master ea34578] add distributed
 1 file changed, 1 insertion(+), 1 deletion(-)
</code></pre>
<p>提交后，我们再用<em>git status</em>命令看看仓库的当前状态：</p>
<pre><code>$ git status
# On branch master
nothing to commit (working directory clean)
</code></pre>
<p>Git告诉我们当前没有需要提交的修改，而且，工作目录是干净（working directory clean）的。</p>
<p><video width="100%" height="65%" controls="controls" preload="none" style="border:solid 1px #ccc"><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/git-diff-status.mp4" /><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/git-diff-status.webm" /></video></p>
<p><strong>小结</strong></p>
<ul>
<li><p>要随时掌握工作区的状态，使用git status命令。</p>
</li>
<li><p>如果git status告诉你有文件被修改过，用git diff可以查看修改内容。</p>
</li>
</ul>
<h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><p>现在，你已经学会了修改文件，然后把修改提交到Git版本库，现在，再练习一次，修改readme.txt文件如下：</p>
<pre><code>Git is a distributed version control system.
Git is free software distributed under the GPL.
</code></pre>
<p>然后尝试提交：</p>
<pre><code>$ git add readme.txt
$ git commit -m &quot;append GPL&quot;
[master 3628164] append GPL
1 file changed, 1 insertion(+), 1 deletion(-)
</code></pre>
<p>像这样，你不断对文件进行修改，然后不断提交修改到版本库里，就好比玩RPG游戏时，每通过一关就会自动把游戏状态存盘，如果某一关没过去，你还可以选择读取前一关的状态。有些时候，在打Boss之前，你会手动存盘，以便万一打Boss失败了，可以从最近的地方重新开始。Git也是一样，每当你觉得文件修改到一定程度的时候，就可以“保存一个快照”，这个快照在Git中被称为commit。一旦你把文件改乱了，或者误删了文件，还可以从最近的一个commit恢复，然后继续工作，而不是把几个月的工作成果全部丢失。</p>
<p>现在，我们回顾一下readme.txt文件一共有几个版本被提交到Git仓库里了：</p>
<p>版本1：wrote a readme file</p>
<pre><code>Git is a version control system.
Git is free software.
</code></pre>
<p>版本2：add distributed</p>
<pre><code>Git is a distributed version control system.
Git is free software.
</code></pre>
<p>版本3：append GPL</p>
<pre><code>Git is a distributed version control system.
Git is free software distributed under the GPL.
</code></pre>
<p>当然了，在实际工作中，我们脑子里怎么可能记得一个几千行的文件每次都改了什么内容，不然要版本控制系统干什么。版本控制系统肯定有某个命令可以告诉我们历史记录，在Git中，我们用git log命令查看：</p>
<pre><code>$ git log
commit 3628164fb26d48395383f8f31179f24e0882e1e0
Author: Michael Liao &lt;askxuefeng@gmail.com&gt;
Date:   Tue Aug 20 15:11:49 2013 +0800
    append GPL

commit ea34578d5496d7dd233c827ed32a8cd576c5ee85
Author: Michael Liao &lt;askxuefeng@gmail.com&gt;
Date:   Tue Aug 20 14:53:12 2013 +0800
add distributed

commit cb926e7ea50ad11b8f9e909c05226233bf755030
Author: Michael Liao &lt;askxuefeng@gmail.com&gt;
Date:   Mon Aug 19 17:51:55 2013 +0800
    wrote a readme file
</code></pre>
<p><em>git log</em>命令显示从最近到最远的提交日志，我们可以看到3次提交，最近的一次是“append GPL”，上一次是“add distributed”，最早的一次是“wrote a readme file”。<br>如果嫌输出信息太多，看得眼花缭乱的，可以试试加上–pretty&#x3D;oneline参数：</p>
<pre><code>$ git log --pretty=oneline
3628164fb26d48395383f8f31179f24e0882e1e0 append GPL
ea34578d5496d7dd233c827ed32a8cd576c5ee85 add distributed
cb926e7ea50ad11b8f9e909c05226233bf755030 wrote a readme file
</code></pre>
<p>需要友情提示的是，你看到的一大串类似“ 3628164…882e1e0”的是commit id（版本号），和SVN不一样，Git的commit id不是1，2，3……递增的数字，而是一个SHA1计算出来的一个非常大的数字，用十六进制表示，而且你看到的commit id和我的肯定不一样，以你自己的为准。为什么commit id需要用这么一大串数字表示呢？因为Git是分布式的版本控制系统，后面我们还要研究多人在同一个版本库里工作，如果大家都用1，2，3……作为版本号，那肯定就冲突了。</p>
<p>每提交一个新版本，实际上Git就会把它们自动串成一条时间线。如果使用可视化工具查看Git历史，就可以更清楚地看到提交历史的时间线：</p>
<p><img data-src="/images/Git%E6%95%99%E7%A8%8B/7.jpg" alt="这里写图片描述"></p>
<p>好了，现在我们启动时光穿梭机，准备把readme.txt回退到上一个版本，也就是“add distributed”的那个版本，怎么做呢？</p>
<p>首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交“ 3628164…882e1e0”（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。</p>
<p>现在，我们要把当前版本“append GPL”回退到上一个版本“add distributed”，就可以使用git reset命令：</p>
<pre><code>$ git reset --hard HEAD^
HEAD is now at ea34578 add distributed
</code></pre>
<p>–hard参数有啥意义？这个后面再讲，现在你先放心使用。</p>
<p>看看readme.txt的内容是不是版本“add distributed”：</p>
<pre><code>$ cat readme.txt
Git is a distributed version control system.
Git is free software.
</code></pre>
<p>果然。</p>
<p>还可以继续回退到上一个版本“wrote a readme file”，不过且慢，然我们用<em>git log</em>再看看现在版本库的状态：</p>
<pre><code>$ git log
commit ea34578d5496d7dd233c827ed32a8cd576c5ee85
Author: Michael Liao &lt;askxuefeng@gmail.com&gt;
Date:   Tue Aug 20 14:53:12 2013 +0800

    add distributed

commit cb926e7ea50ad11b8f9e909c05226233bf755030
Author: Michael Liao &lt;askxuefeng@gmail.com&gt;
Date:   Mon Aug 19 17:51:55 2013 +0800

    wrote a readme file
</code></pre>
<p>最新的那个版本“append GPL”已经看不到了！好比你从21世纪坐时光穿梭机来到了19世纪，想再回去已经回不去了，肿么办？</p>
<p>办法其实还是有的，只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个“append GPL”的commit id是“3628164…”，于是就可以指定回到未来的某个版本：</p>
<pre><code>$ git reset --hard 3628164
HEAD is now at 3628164 append GPL
</code></pre>
<p>版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。</p>
<p>再小心翼翼地看看readme.txt的内容：</p>
<pre><code>$ cat readme.txt
Git is a distributed version control system.
Git is free software distributed under the GPL.
</code></pre>
<p>果然，我胡汉山又回来了。</p>
<p>Git的版本回退速度非常快，因为Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git仅仅是把HEAD从指向“append GPL”：</p>
<p><img data-src="/images/Git%E6%95%99%E7%A8%8B/8.jpg" alt="这里写图片描述"></p>
<p>改为指向“add distributed”：</p>
<p><img data-src="/images/Git%E6%95%99%E7%A8%8B/9.jpg" alt="这里写图片描述"></p>
<p>然后顺便把工作区的文件更新了。所以你让HEAD指向哪个版本号，你就把当前版本定位在哪。</p>
<p><video width="100%" height="65%" controls="controls" preload="none" style="border:solid 1px #ccc"><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/git-reset.mp4" /><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/git-reset.webm" /></video></p>
<p>现在，你回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？找不到新版本的commit id怎么办？</p>
<p>在Git中，总是有后悔药可以吃的。当你用*$ git reset –hard HEAD^<em>回退到“add distributed”版本时，再想恢复到“append GPL”，就必须找到“append GPL”的commit id。Git提供了一个命令</em>git reflog*用来记录你的每一次命令：</p>
<pre><code>$ git reflog
ea34578 HEAD@&#123;0&#125;: reset: moving to HEAD^
3628164 HEAD@&#123;1&#125;: commit: append GPL
ea34578 HEAD@&#123;2&#125;: commit: add distributed
cb926e7 HEAD@&#123;3&#125;: commit (initial): wrote a readme file
</code></pre>
<p>终于舒了口气，第二行显示“append GPL”的commit id是3628164，现在，你又可以乘坐时光机回到未来了。</p>
<p><video width="100%" height="65%" controls="controls" preload="none" style="border:solid 1px #ccc"><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/git-reflog-reset.mp4" /><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/git-reflog-reset.webm" /></video></p>
<p><strong>小结</strong></p>
<p>现在总结一下：</p>
<ul>
<li><p>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<em>git reset –hard commit_id</em>。</p>
</li>
<li><p>穿梭前，用<em>git log</em>可以查看提交历史，以便确定要回退到哪个版本。</p>
</li>
<li><p>要重返未来，用<em>git reflog</em>查看命令历史，以便确定要回到未来的哪个版本。</p>
</li>
</ul>
<h2 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h2><p>Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念。</p>
<p>先来看名词解释。</p>
<p><strong>工作区</strong>（Working Directory）：就是你在电脑里能看到的目录，比如我的learngit文件夹就是一个工作区：</p>
<p><img data-src="/images/Git%E6%95%99%E7%A8%8B/10.png" alt="这里写图片描述"></p>
<p><strong>版本库</strong>（Repository）：工作区有一个隐藏目录“.git”，这个不算工作区，而是Git的版本库。</p>
<p>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。</p>
<p><img data-src="/images/Git%E6%95%99%E7%A8%8B/11.jpg" alt="这里写图片描述"></p>
<p>分支和HEAD的概念我们以后再讲。</p>
<p>前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：</p>
<p>第一步是用“git add”把文件添加进去，实际上就是把文件修改添加到暂存区；</p>
<p>第二步是用“git commit”提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p>
<p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，commit就是往master分支上提交更改。</p>
<p>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p>
<p>俗话说，实践出真知。现在，我们再练习一遍，先对readme.txt做个修改，比如加上一行内容：</p>
<pre><code>Git is a distributed version control system.
Git is free software distributed under the GPL.
Git has a mutable index called stage.
</code></pre>
<p>然后，在工作区新增一个LICENSE文本文件（内容随便写）。</p>
<p>先用git status查看一下状态：</p>
<pre><code>$ git status
# On branch master
# Changes not staged for commit:
#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
#
#       modified:   readme.txt
#
# Untracked files:
#   (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)
#
#       LICENSE
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
</code></pre>
<p>Git非常清楚地告诉我们，<em>readme.txt</em>被修改了，而<em>LICENSE</em>还从来没有被添加过，所以它的状态是Untracked。</p>
<p>现在，使用两次命令git add，把readme.txt和LICENSE都添加后，用git status再查看一下：</p>
<pre><code>$ git status
# On branch master
# Changes to be committed:
#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)
#
#       new file:   LICENSE
#       modified:   readme.txt
#
</code></pre>
<p>现在，暂存区的状态就变成这样了：</p>
<p><img data-src="/images/Git%E6%95%99%E7%A8%8B/12.jpg" alt="这里写图片描述"></p>
<p>所以，git add命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行git commit就可以一次性把暂存区的所有修改提交到分支。</p>
<pre><code>$ git commit -m &quot;understand how stage works&quot;
[master 27c9860] understand how stage works
 2 files changed, 675 insertions(+)
 create mode 100644 LICENSE
</code></pre>
<p>一旦提交后，如果你又没有对工作区做任何修改，那么工作区就是“干净”的：</p>
<pre><code>$ git status
# On branch master
nothing to commit (working directory clean)
</code></pre>
<p>现在版本库变成了这样，暂存区就没有任何内容了：</p>
<p><img data-src="/images/Git%E6%95%99%E7%A8%8B/13.jpg" alt="这里写图片描述"></p>
<p><strong>小结</strong></p>
<p>暂存区是Git非常重要的概念，弄明白了暂存区，就弄明白了Git的很多操作到底干了什么。</p>
<p>没弄明白暂存区是怎么回事的童鞋，请向上滚动页面，再看一次。</p>
<h2 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h2><p>现在，假定你已经完全掌握了暂存区的概念。下面，我们要讨论的就是，为什么Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件。</p>
<p>你会问，什么是修改？比如你新增了一行，这就是一个修改，删除了一行，也是一个修改，更改了某些字符，也是一个修改，删了一些又加了一些，也是一个修改，甚至创建一个新文件，也算一个修改。</p>
<p>为什么说Git管理的是修改，而不是文件呢？我们还是做实验。第一步，对readme.txt做一个修改，比如加一行内容：</p>
<pre><code>$ cat readme.txt
Git is a distributed version control system.
Git is free software distributed under the GPL.
Git has a mutable index called stage.
Git tracks changes.
</code></pre>
<p>然后，添加：</p>
<pre><code>$ git add readme.txt
$ git status
# On branch master
# Changes to be committed:
#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)
#
#       modified:   readme.txt
#
</code></pre>
<p>然后，再修改readme.txt：</p>
<pre><code>$ cat readme.txt 
Git is a distributed version control system.
Git is free software distributed under the GPL.
Git has a mutable index called stage.
Git tracks changes of files.
</code></pre>
<p>提交：</p>
<pre><code>$ git commit -m &quot;git tracks changes&quot;
[master d4f25b6] git tracks changes
 1 file changed, 1 insertion(+)
</code></pre>
<p>提交后，再看看状态：</p>
<pre><code>$ git status
# On branch master
# Changes not staged for commit:
#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
#
#       modified:   readme.txt
#
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
</code></pre>
<p>咦，怎么第二次的修改没有被提交？</p>
<p>别激动，我们回顾一下操作过程：</p>
<p>第一次修改 -&gt; git add -&gt; 第二次修改 -&gt; git commit</p>
<p>你看，我们前面讲了，Git管理的是修改，当你用“git add”命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，“git commit”只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。</p>
<p>提交后，用“git diff HEAD – readme.txt”命令可以查看工作区和版本库里面最新版本的区别：</p>
<pre><code>$ git diff HEAD -- readme.txt 
diff --git a/readme.txt b/readme.txt
index 76d770f..a9c5755 100644
--- a/readme.txt
+++ b/readme.txt
@@ -1,4 +1,4 @@
 Git is a distributed version control system.
 Git is free software distributed under the GPL.
 Git has a mutable index called stage.
-Git tracks changes.
+Git tracks changes of files.
</code></pre>
<p>可见，第二次修改确实没有被提交。</p>
<p><video width="100%" height="65%" controls="controls" preload="none" style="border:solid 1px #ccc"><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/git-add-changes.mp4" /><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/git-add-changes.webm" /></video></p>
<p>那怎么提交第二次修改呢？你可以继续add再commit，也可以别着急提交第一次修改，先add第二次修改，再commit，就相当于把两次修改合并后一块提交了：</p>
<p>第一次修改 -&gt; add -&gt; 第二次修改 -&gt; add -&gt; commit</p>
<p>好，现在，把第二次修改提交了，然后开始小结。</p>
<p><strong>小结</strong></p>
<p>现在，你又理解了Git是如何跟踪修改的，每次修改，如果不add到暂存区，那就不会加入到commit中。</p>
<h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><p>自然，你是不会犯错的。不过现在是凌晨两点，你正在赶一份工作报告，你在readme.txt中添加了一行：</p>
<pre><code>$ cat readme.txt
Git is a distributed version control system.
Git is free software distributed under the GPL.
Git has a mutable index called stage.
Git tracks changes of files.
My stupid boss still prefers SVN.
</code></pre>
<p>在你准备提交前，一杯咖啡起了作用，你猛然发现了“stupid boss”可能会让你丢掉这个月的奖金！</p>
<p>既然错误发现得很及时，就可以很容易地纠正它。你可以删掉最后一行，手动把文件恢复到上一个版本的状态。如果用<em>git status</em>查看一下：</p>
<pre><code>$ git status
# On branch master
# Changes not staged for commit:
#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
#
#       modified:   readme.txt
#
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
</code></pre>
<p>你可以发现，Git会告诉你，<em>git checkout – file</em>可以丢弃工作区的修改：</p>
<pre><code>$ git checkout -- readme.txt
</code></pre>
<p>命令<em>git checkout – readme.txt</em>意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：</p>
<p>一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p>
<p>一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p>
<p>总之，就是让这个文件回到最近一次git commit或git add时的状态。</p>
<p>现在，看看readme.txt的文件内容：</p>
<pre><code>$ cat readme.txt
Git is a distributed version control system.
Git is free software distributed under the GPL.
Git has a mutable index called stage.
Git tracks changes of files.
</code></pre>
<p>文件内容果然复原了。</p>
<p><em>git checkout – file</em>命令中的“–”很重要，没有“–”，就变成了“创建一个新分支”的命令，我们在后面的分支管理中会再次遇到<em>git checkout</em>命令。</p>
<p><video width="100%" height="65%" controls="controls" preload="none" style="border:solid 1px #ccc"><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/discard-changes-of-working-dir.mp4" /><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/discard-changes-of-working-dir.webm" /></video></p>
<p>现在假定是凌晨3点，你不但写了一些胡话，还<em>git add</em>到暂存区了：</p>
<pre><code>$ cat readme.txt
Git is a distributed version control system.
Git is free software distributed under the GPL.
Git has a mutable index called stage.
Git tracks changes of files.
My stupid boss still prefers SVN.

$ git add readme.txt
</code></pre>
<p>庆幸的是，在commit之前，你发现了这个问题。用<em>git status</em>查看一下，修改只是添加到了暂存区，还没有提交：</p>
<pre><code>$ git status
# On branch master
# Changes to be committed:
#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)
#
#       modified:   readme.txt
#
</code></pre>
<p>Git同样告诉我们，用命令<em>git reset HEAD file</em>可以把暂存区的修改撤销掉（unstage），重新放回工作区：</p>
<pre><code>$ git reset HEAD readme.txt
Unstaged changes after reset:
M       readme.txt
</code></pre>
<p><em>git reset</em>命令既可以回退版本，也可以把工作区的某些文件替换为版本库中的文件。当我们用HEAD时，表示最新的版本。</p>
<p>再用<em>git status</em>查看一下，现在暂存区是干净的，工作区有修改：</p>
<pre><code>$ git status
# On branch master
# Changes not staged for commit:
#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
#
#       modified:   readme.txt
#
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
</code></pre>
<p>还记得如何丢弃工作区的修改吗？</p>
<pre><code>$ git checkout -- readme.txt

$ git status
# On branch master
nothing to commit (working directory clean)
</code></pre>
<p>整个世界终于清静了！</p>
<p><video width="100%" height="65%" controls="controls" preload="none" style="border:solid 1px #ccc"><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/discard-changes-of-staged.mp4" /><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/discard-changes-of-staged.webm" /></video></p>
<p>现在，假设你不但改错了东西，还从暂存区提交到了版本库，怎么办呢？还记得<a href="file/%E6%97%B6%E5%85%89%E6%9C%BA%E7%A9%BF%E6%A2%AD.md#anchor_1">版本回退</a>一节吗？可以回退到上一个版本。不过，这是有条件的，就是你还没有把自己的本地版本库推送到远程。还记得Git是分布式版本控制系统吗？我们后面会讲到远程版本库，一旦你把“stupid boss”提交推送到远程版本库，你就真的惨了……</p>
<p><strong>小结</strong></p>
<p>又到了小结时间。</p>
<p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<em>git checkout – file</em>。</p>
<p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<em>git reset HEAD file</em>，就回到了场景1，第二步按场景1操作。</p>
<p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考<a href="file/%E6%97%B6%E5%85%89%E6%9C%BA%E7%A9%BF%E6%A2%AD.md#anchor_1">版本回退</a>一节，不过前提是没有推送到远程库。</p>
<h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>在Git中，删除也是一个修改操作，我们实战一下，先添加一个新文件test.txt到Git并且提交：</p>
<pre><code>$ git add test.txt
$ git commit -m &quot;add test.txt&quot;
[master 94cdc44] add test.txt
 1 file changed, 1 insertion(+)
 create mode 100644 test.txt
</code></pre>
<p>一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用rm命令删了：</p>
<pre><code>$ rm test.txt
</code></pre>
<p>这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，<em>git status</em>命令会立刻告诉你哪些文件被删除了：</p>
<pre><code>$ git status
# On branch master
# Changes not staged for commit:
#   (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)
#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
#
#       deleted:    test.txt
#
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
</code></pre>
<p>现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令<em>git rm</em>删掉，并且commit：</p>
<pre><code>$ git rm test.txt
rm &#39;test.txt&#39;
$ git commit -m &quot;remove test.txt&quot;
[master d17efd8] remove test.txt
 1 file changed, 1 deletion(-)
 delete mode 100644 test.txt
</code></pre>
<p>现在，文件就从版本库中被删除了。</p>
<p><video width="100%" height="65%" controls="controls" preload="none" style="border:solid 1px #ccc"><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/git-rm.mp4" /><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/git-rm.webm" /></video></p>
<p>另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：</p>
<pre><code>$ git checkout -- test.txt
</code></pre>
<p><em>git checkout</em>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p>
<p><strong>小结</strong></p>
<p>命令<em>git rm</em>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失<strong>最近一次提交后你修改的内容</strong>。</p>
<h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><p>到目前为止，我们已经掌握了如何在Git仓库里对一个文件进行时光穿梭，你再也不用担心文件备份或者丢失的问题了。</p>
<p>可是有用过集中式版本控制系统SVN的童鞋会站出来说，这些功能在SVN里早就有了，没看出Git有什么特别的地方。</p>
<p>没错，如果只是在一个仓库里管理文件历史，Git和SVN真没啥区别。为了保证你现在所学的Git物超所值，将来绝对不会后悔，同时为了打击已经不幸学了SVN的童鞋，本章开始介绍Git的杀手级功能之一（注意是之一，也就是后面还有之二，之三……）：远程仓库。</p>
<p>Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。怎么分布呢？最早，肯定只有一台机器有一个原始版本库，此后，别的机器可以“克隆”这个原始版本库，而且每台机器的版本库其实都是一样的，并没有主次之分。</p>
<p>你肯定会想，至少需要两台机器才能玩远程库不是？但是我只有一台电脑，怎么玩？</p>
<p>其实一台电脑上也是可以克隆多个版本库的，只要不在同一个目录下。不过，现实生活中是不会有人这么傻的在一台电脑上搞几个远程库玩，因为一台电脑上搞几个远程库完全没有意义，而且硬盘挂了会导致所有库都挂掉，所以我也不告诉你在一台电脑上怎么克隆多个仓库。</p>
<p>实际情况往往是这样，找一台电脑充当服务器的角色，每天24小时开机，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。</p>
<p>完全可以自己搭建一台运行Git的服务器，不过现阶段，为了学Git先搭个服务器绝对是小题大作。好在这个世界上有个叫<a href="https://github.com/">GitHub</a>的神奇的网站，从名字就可以看出，这个网站就是提供Git仓库托管服务的，所以，只要注册一个GitHub账号，就可以免费获得Git远程仓库。</p>
<p>在继续阅读后续内容前，请自行注册GitHub账号。由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：</p>
<p>第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</p>
<pre><code>$ ssh-keygen -t rsa -C &quot;your\_email@example.com&quot;
</code></pre>
<p><video width="100%" height="65%" controls="controls" preload="none" style="border:solid 1px #ccc"><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/ssh-keygen.mp4" /><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/ssh-keygen.webm" /></video></p>
<p>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。</p>
<p>如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</p>
<p>第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：</p>
<p>然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：</p>
<p><img data-src="/images/Git%E6%95%99%E7%A8%8B/14.png" alt="这里写图片描述"></p>
<p>点“Add Key”，你就应该看到已经添加的Key：</p>
<p><img data-src="/images/Git%E6%95%99%E7%A8%8B/15.png" alt="这里写图片描述"></p>
<p>为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</p>
<p>当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。</p>
<p>最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。</p>
<p>如果你不想让别人看到Git库，有两个办法，一个是交点保护费，让GitHub把公开的仓库变成私有的，这样别人就看不见了（不可读更不可写）。另一个办法是自己动手，搭一个Git服务器，因为是你自己的Git服务器，所以别人也是看不见的。这个方法我们后面会讲到的，相当简单，公司内部开发必备。</p>
<p>确保你拥有一个GitHub账号后，我们就即将开始远程仓库的学习。</p>
<p><strong>小结</strong></p>
<p>“有了远程仓库，妈妈再也不用担心我的硬盘了。”——Git点读机</p>
<h2 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h2><p>现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得。</p>
<p>首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库：</p>
<p><img data-src="/images/Git%E6%95%99%E7%A8%8B/16.png" alt="这里写图片描述"></p>
<p>在Repository name填入<em>learngit</em>，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：</p>
<p><img data-src="/images/Git%E6%95%99%E7%A8%8B/17.png" alt="这里写图片描述"></p>
<p>目前，在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。</p>
<p>现在，我们根据GitHub的提示，在本地的learngit仓库下运行命令：</p>
<pre><code>$ git remote add origin git@github.com:michaelliao/learngit.git
</code></pre>
<p>请千万注意，把上面的michaelliao替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中。</p>
<p>添加后，远程库的名字就是<em>origin</em>，这是Git默认的叫法，也可以改成别的，但是<em>origin</em>这个名字一看就知道是远程库。</p>
<p>下一步，就可以把本地库的所有内容推送到远程库上：</p>
<pre><code>$ git push -u origin master
Counting objects: 19, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (19/19), done.
Writing objects: 100% (19/19), 13.73 KiB, done.
Total 23 (delta 6), reused 0 (delta 0)
To git@github.com:michaelliao/learngit.git
 * [new branch]      master -&gt; master
Branch master set up to track remote branch master from origin.
</code></pre>
<p>把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。</p>
<p>由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>
<p><video width="100%" height="65%" controls="controls" preload="none" style="border:solid 1px #ccc"><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/git-remote-add.mp4" /><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/git-remote-add.webm" /></video></p>
<p>推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样：</p>
<p><img data-src="/images/Git%E6%95%99%E7%A8%8B/18.png" alt="这里写图片描述"></p>
<p>从现在起，只要本地作了提交，就可以通过命令：</p>
<pre><code>$ git push origin master
</code></pre>
<p>把本地master分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！</p>
<p><strong>小结</strong></p>
<p>要关联一个远程库，使用命令<em>git remote add origin git@server-name:path&#x2F;repo-name.git</em>；</p>
<p>关联后，使用命令<em>git push -u origin master</em>第一次推送master分支的所有内容；</p>
<p>此后，每次本地提交后，只要有必要，就可以使用命令<em>git push origin master</em>推送最新修改；</p>
<p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！</p>
<h2 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h2><p>上次我们讲了先有本地库，后有远程库的时候，如何关联远程库。</p>
<p>现在，假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。</p>
<p>首先，登陆GitHub，创建一个新的仓库，名字叫gitskills：</p>
<p><img data-src="/images/Git%E6%95%99%E7%A8%8B/19.png" alt="这里写图片描述"></p>
<p>我们勾选<em>Initialize this repository with a README</em>，这样GitHub会自动为我们创建一个README.md文件。创建完毕后，可以看到README.md文件：</p>
<p><img data-src="/images/Git%E6%95%99%E7%A8%8B/20.png" alt="这里写图片描述"></p>
<p>现在，远程库已经准备好了，下一步是用命令<em>git clone</em>克隆一个本地库：</p>
<pre><code>$ git clone git@github.com:michaelliao/gitskills.git
Cloning into &#39;gitskills&#39;...
remote: Counting objects: 3, done.
remote: Total 3 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (3/3), done.

$ cd gitskills
$ ls
README.md
</code></pre>
<p>注意把Git库的地址换成你自己的，然后进入gitskills目录看看，已经有README.md文件了。</p>
<p><video width="100%" height="65%" controls="controls" preload="none" style="border:solid 1px #ccc"><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/git-clone.mp4" /><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/git-clone.webm" /></video></p>
<p>如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。</p>
<p>你也许还注意到，GitHub给出的地址不止一个，还可以用<em><a href="https://github.com/michaelliao/gitskills.git">https://github.com/michaelliao/gitskills.git</a></em>这样的地址。实际上，Git支持多种协议，默认的git:&#x2F;&#x2F;使用ssh，但也可以使用https等其他协议。</p>
<p>使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。</p>
<p><strong>小结</strong></p>
<p>要克隆一个仓库，首先必须知道仓库的地址，然后使用<em>git clone</em>命令克隆。</p>
<p>Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。</p>
<h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><p>分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。</p>
<p>如果两个平行宇宙互不干扰，那对现在的你也没啥影响。问题是，在某个时间点，两个平行宇宙合并了，结果，你既学会了Git又学会了SVN！</p>
<p><img data-src="/images/Git%E6%95%99%E7%A8%8B/21.png" alt="这里写图片描述"></p>
<p>分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。</p>
<p>现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。</p>
<p>其他版本控制系统如SVN等都有分支管理，但是用过之后你会发现，这些版本控制系统创建和切换分支比蜗牛还慢，简直让人无法忍受，结果分支功能成了摆设，大家都不去用。</p>
<p>但Git的分支是与众不同的，无论创建、切换和删除分支，Git在1秒钟之内就能完成！无论你的版本库是1个文件还是1万个文件。</p>
<h2 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h2><p>在<a href="file/%E6%97%B6%E5%85%89%E6%9C%BA%E7%A9%BF%E6%A2%AD.md#anchor_1">版本回退</a>里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。</p>
<p>一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点：</p>
<p><img data-src="/images/Git%E6%95%99%E7%A8%8B/22.png" alt="这里写图片描述"></p>
<p>每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长：</p>
<p><video width="100%" height="65%" controls="controls" preload="none" style="border:solid 1px #ccc"><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/master-branch-forward.mp4" /><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/master-branch-forward.webm" /></video></p>
<p>当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上：</p>
<p><img data-src="/images/Git%E6%95%99%E7%A8%8B/23.png" alt="这里写图片描述"></p>
<p>你看，Git创建一个分支很快，因为除了增加一个dev指针，改改HEAD的指向，工作区的文件都没有任何变化！</p>
<p>不过，从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变：</p>
<p><img data-src="/images/Git%E6%95%99%E7%A8%8B/24.png" alt="这里写图片描述"></p>
<p>假如我们在dev上的工作完成了，就可以把dev合并到master上。Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并：</p>
<p><img data-src="/images/Git%E6%95%99%E7%A8%8B/25.png" alt="这里写图片描述"></p>
<p>所以Git合并分支也很快！就改改指针，工作区内容也不变！</p>
<p>合并完分支后，甚至可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支：</p>
<p><img data-src="/images/Git%E6%95%99%E7%A8%8B/26.png" alt="这里写图片描述"></p>
<p>真是太神奇了，你看得出来有些提交是通过分支完成的吗？</p>
<p><video width="100%" height="65%" controls="controls" preload="none" style="border:solid 1px #ccc"><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/master-and-dev-ff.mp4" /><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/master-and-dev-ff.webm" /></video></p>
<p>下面开始实战。</p>
<p>首先，我们创建dev分支，然后切换到dev分支：</p>
<pre><code>$ git checkout -b dev
Switched to a new branch &#39;dev&#39;
</code></pre>
<p><em>git checkout</em>命令加上-b参数表示创建并切换，相当于以下两条命令：</p>
<pre><code>$ git branch dev
$ git checkout dev
Switched to branch &#39;dev&#39;
</code></pre>
<p>然后，用<em>git branch</em>命令查看当前分支：</p>
<pre><code>$ git branch
* dev
  master
</code></pre>
<p><em>git branch</em>命令会列出所有分支，当前分支前面会标一个*号。</p>
<p>然后，我们就可以在dev分支上正常提交，比如对readme.txt做个修改，加上一行：</p>
<pre><code>Creating a new branch is quick.
</code></pre>
<p>然后提交：</p>
<pre><code>$ git add readme.txt 
$ git commit -m &quot;branch test&quot;
[dev fec145a] branch test
 1 file changed, 1 insertion(+)
</code></pre>
<p>现在，dev分支的工作完成，我们就可以切换回master分支：</p>
<pre><code>$ git checkout master
Switched to branch &#39;master&#39;
</code></pre>
<p>切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变：</p>
<p><img data-src="/images/Git%E6%95%99%E7%A8%8B/27.png" alt="这里写图片描述"></p>
<p>现在，我们把dev分支的工作成果合并到master分支上：</p>
<pre><code>$ git merge dev
Updating d17efd8..fec145a
Fast-forward
 readme.txt |    1 +
 1 file changed, 1 insertion(+)
</code></pre>
<p><em>git merge</em>命令用于合并指定分支到当前分支。合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。</p>
<p>注意到上面的<em>Fast-forward</em>信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。</p>
<p>当然，也不是每次合并都能<em>Fast-forward</em>，我们后面会将其他方式的合并。</p>
<p>合并完成后，就可以放心地删除dev分支了：</p>
<pre><code>$ git branch -d dev
Deleted branch dev (was fec145a).
</code></pre>
<p>删除后，查看branch，就只剩下master分支了：</p>
<pre><code>$ git branch
* master
</code></pre>
<p>因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。</p>
<p><video width="100%" height="65%" controls="controls" preload="none" style="border:solid 1px #ccc"><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/create-dev-merge-delete.mp4" /><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/create-dev-merge-delete.webm" /></video></p>
<p><strong>小结</strong></p>
<p>Git鼓励大量使用分支：</p>
<p>查看分支：git branch</p>
<p>创建分支：git branch <em>name</em></p>
<p>切换分支：git checkout <em>name</em></p>
<p>创建+切换分支：git checkout -b <em>name</em></p>
<p>合并某分支到当前分支：git merge <em>name</em></p>
<p>删除分支：git branch -d <em>name</em></p>
<h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><p>人生不如意之事十之八九，合并分支往往也不是一帆风顺的。</p>
<p>准备新的feature1分支，继续我们的新分支开发：</p>
<pre><code>$ git checkout -b feature1
Switched to a new branch &#39;feature1&#39;
</code></pre>
<p>修改readme.txt最后一行，改为：</p>
<pre><code>Creating a new branch is quick AND simple.
</code></pre>
<p>在feature1分支上提交：</p>
<pre><code>$ git add readme.txt 
$ git commit -m &quot;AND simple&quot;
[feature1 75a857c] AND simple
 1 file changed, 1 insertion(+), 1 deletion(-)
</code></pre>
<p>切换到master分支：</p>
<pre><code>$ git checkout master
Switched to branch &#39;master&#39;
Your branch is ahead of &#39;origin/master&#39; by 1 commit.
</code></pre>
<p>Git还会自动提示我们当前master分支比远程的master分支要超前1个提交。</p>
<p>在master分支上把readme.txt文件的最后一行改为：</p>
<pre><code>Creating a new branch is quick &amp; simple.
</code></pre>
<p>提交：</p>
<pre><code>$ git add readme.txt 
$ git commit -m &quot;&amp; simple&quot;
[master 400b400] &amp; simple
 1 file changed, 1 insertion(+), 1 deletion(-)
</code></pre>
<p>现在，master分支和feature1分支各自都分别有新的提交，变成了这样：</p>
<p><img data-src="/images/Git%E6%95%99%E7%A8%8B/28.png" alt="这里写图片描述"></p>
<p>这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：</p>
<pre><code>$ git merge feature1
Auto-merging readme.txt
CONFLICT (content): Merge conflict in readme.txt
Automatic merge failed; fix conflicts and then commit the result.
</code></pre>
<p>果然冲突了！Git告诉我们，readme.txt文件存在冲突，必须手动解决冲突后再提交。<em>git status</em>也可以告诉我们冲突的文件：</p>
<pre><code>$ git status
# On branch master
# Your branch is ahead of &#39;origin/master&#39; by 2 commits.
#
# Unmerged paths:
#   (use &quot;git add/rm &lt;file&gt;...&quot; as appropriate to mark resolution)
#
#       both modified:      readme.txt
#
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
</code></pre>
<p>我们可以直接查看readme.txt的内容：</p>
<pre><code>Git is a distributed version control system.
Git is free software distributed under the GPL.
Git has a mutable index called stage.
Git tracks changes of files.
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
Creating a new branch is quick &amp; simple.
=======
Creating a new branch is quick AND simple.
&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1
</code></pre>
<p>Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，我们修改如下后保存：</p>
<pre><code>Creating a new branch is quick and simple.
</code></pre>
<p>再提交：</p>
<pre><code>$ git add readme.txt 
$ git commit -m &quot;conflict fixed&quot;
[master 59bc1cb] conflict fixed
</code></pre>
<p>现在，master分支和feature1分支变成了下图所示：</p>
<p><img data-src="/images/Git%E6%95%99%E7%A8%8B/29.png" alt="这里写图片描述"></p>
<p>用带参数的<em>git log</em>也可以看到分支的合并情况：</p>
<pre><code>$ git log --graph --pretty=oneline --abbrev-commit
*   59bc1cb conflict fixed
|\
| * 75a857c AND simple
* | 400b400 &amp; simple
|/
* fec145a branch test
...
</code></pre>
<p>现在，删除feature1分支：</p>
<pre><code>$ git branch -d feature1
Deleted branch feature1 (was 75a857c).
</code></pre>
<p>工作完成。</p>
<p><video width="100%" height="65%" controls="controls" preload="none" style="border:solid 1px #ccc"><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/resolv-conflix-on-merge.mp4" /><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/resolv-conflix-on-merge.webm" /></video></p>
<p><strong>小结</strong></p>
<p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</p>
<p>用<em>git log –graph</em>命令可以看到分支合并图。</p>
<h2 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h2><p>通常，合并分支时，如果可能，Git会用“Fast forward”模式，但这种模式下，删除分支后，会丢掉分支信息。</p>
<p>如果要强制禁用“Fast forward”模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。</p>
<p>下面我们实战一下*–no-ff*方式的merge：</p>
<p>首先，仍然创建并切换dev分支：</p>
<pre><code>$ git checkout -b dev
Switched to a new branch &#39;dev&#39;
</code></pre>
<p>修改readme.txt文件，并提交一个新的commit：</p>
<pre><code>$ git add readme.txt 
$ git commit -m &quot;add merge&quot;
[dev 6224937] add merge
 1 file changed, 1 insertion(+)
</code></pre>
<p>现在，我们切换会master：</p>
<pre><code>$ git checkout master
Switched to branch &#39;master&#39;
</code></pre>
<p>准备合并dev分支，请注意*–no-ff*参数，表示禁用“Fast forward”：</p>
<pre><code>$ git merge --no-ff -m &quot;merge with no-ff&quot; dev
Merge made by the &#39;recursive&#39; strategy.
 readme.txt |    1 +
 1 file changed, 1 insertion(+)
</code></pre>
<p>因为本次合并要创建一个新的commit，所以加上*-m*参数，把commit描述写进去。</p>
<p>合并后，我们用<em>git log</em>看看分支历史：</p>
<pre><code>$ git log --graph --pretty=oneline --abbrev-commit
*   7825a50 merge with no-ff
|\
| * 6224937 add merge
|/
*   59bc1cb conflict fixed
...
</code></pre>
<p>可以看到，不使用“Fast forward”模式，merge后就像这样：</p>
<p><img data-src="/images/Git%E6%95%99%E7%A8%8B/30.png" alt="这里写图片描述"></p>
<p><video width="100%" height="65%" controls="controls" preload="none" style="border:solid 1px #ccc"><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/merge-with-no-ff.mp4" /><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/merge-with-no-ff.webm" /></video></p>
<h3 id="分支策略"><a href="#分支策略" class="headerlink" title="分支策略"></a>分支策略</h3><p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p>
<p>首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p>
<p>那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；</p>
<p>你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。</p>
<p>所以，团队合作的分支看起来就像这样：</p>
<p><img data-src="/images/Git%E6%95%99%E7%A8%8B/31.png" alt="这里写图片描述"></p>
<p><strong>小结</strong></p>
<p>Git分支十分强大，在团队开发中应该充分应用。</p>
<p>合并分支时，加上*–no-ff<em>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而</em>fast forward*合并就看不出来曾经做过合并。</p>
<h2 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h2><p>软件开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。</p>
<p>当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue -101来修复它，但是，等等，当前正在dev上进行的工作还没有提交：</p>
<pre><code>$ git status
# On branch dev
# Changes to be committed:
#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)
#
#       new file:   hello.py
#
# Changes not staged for commit:
#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
#
#       modified:   readme.txt
#
</code></pre>
<p>并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？</p>
<p>幸好，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：</p>
<pre><code>$ git stash
Saved working directory and index state WIP on dev: 6224937 add merge
HEAD is now at 6224937 add merge
</code></pre>
<p>现在，用<em>git status</em>查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。</p>
<p>首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支：</p>
<pre><code>$ git checkout master
Switched to branch &#39;master&#39;
Your branch is ahead of &#39;origin/master&#39; by 6 commits.
$ git checkout -b issue-101
Switched to a new branch &#39;issue-101&#39;
</code></pre>
<p>现在修复bug，需要把“Git is free software …”改为“Git is a free software …”，然后提交：</p>
<pre><code>$ git add readme.txt 
$ git commit -m &quot;fix bug 101&quot;
[issue-101 cc17032] fix bug 101
 1 file changed, 1 insertion(+), 1 deletion(-)
</code></pre>
<p>修复完成后，切换到master分支，并完成合并，最后删除issue-101分支：</p>
<pre><code>$ git checkout master
Switched to branch &#39;master&#39;
Your branch is ahead of &#39;origin/master&#39; by 2 commits.
$ git merge --no-ff -m &quot;merged bug fix 101&quot; issue-101
Merge made by the &#39;recursive&#39; strategy.
 readme.txt |    2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
$ git branch -d issue-101
Deleted branch issue-101 (was cc17032).
</code></pre>
<p>太棒了，原计划两个小时的bug修复只花了5分钟！现在，是时候接着回到dev分支干活了！</p>
<pre><code>$ git checkout dev
Switched to branch &#39;dev&#39;
$ git status
# On branch dev
nothing to commit (working directory clean)
</code></pre>
<p>工作区是干净的，刚才的工作现场存到哪去了？用<em>git stash list</em>命令看看：</p>
<pre><code>$ git stash list
stash@&#123;0&#125;: WIP on dev: 6224937 add merge
</code></pre>
<p>工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：</p>
<p>一是用<em>git stash apply</em>恢复，但是恢复后，stash内容并不删除，你需要用<em>git stash drop</em>来删除；</p>
<p>另一种方式是用<em>git stash pop</em>，恢复的同时把stash内容也删了：</p>
<pre><code>$ git stash pop
# On branch dev
# Changes to be committed:
#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)
#
#       new file:   hello.py
#
# Changes not staged for commit:
#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
#
#       modified:   readme.txt
#
Dropped refs/stash@&#123;0&#125; (f624f8e5f082f2df2bed8a4e09c12fd2943bdd40)
</code></pre>
<p>再用<em>git stash list</em>查看，就看不到任何stash内容了：</p>
<pre><code>$ git stash list
</code></pre>
<p>你可以多次stash，恢复的时候，先用<em>git stash list</em>查看，然后恢复指定的stash，用命令：</p>
<pre><code>$ git stash apply stash@&#123;0&#125;
</code></pre>
<p><video width="100%" height="65%" controls="controls" preload="none" style="border:solid 1px #ccc"><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/stash-fix-bug.mp4" /><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/stash-fix-bug.webm" /></video></p>
<p><strong>小结</strong></p>
<p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；</p>
<p>当手头工作没有完成时，先把工作现场<em>git stash</em>一下，然后去修复bug，修复后，再<em>git stash pop</em>，回到工作现场。</p>
<h2 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h2><p>软件开发中，总有无穷无尽的新的功能要不断添加进来。</p>
<p>添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。</p>
<p>现在，你终于接到了一个新任务：开发代号为Vulcan的新功能，该功能计划用于下一代星际飞船。</p>
<p>于是准备开发：</p>
<pre><code>$ git checkout -b feature-vulcan
Switched to a new branch &#39;feature-vulcan&#39;
</code></pre>
<p>5分钟后，开发完毕：</p>
<pre><code>$ git status
# On branch feature-vulcan
# Changes to be committed:
#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)
#
#       new file:   vulcan.py
#
$ git commit -m &quot;add feature vulcan&quot;
[feature-vulcan 756d4af] add feature vulcan
 1 file changed, 2 insertions(+)
 create mode 100644 vulcan.py
</code></pre>
<p>切回dev，准备合并：</p>
<pre><code>$ git checkout dev
</code></pre>
<p>一切顺利的话，feature分支和bug分支是类似的，合并，然后删除。</p>
<p>但是，</p>
<p>就在此时，接到上级命令，因经费不足，新功能必须取消！</p>
<p>虽然白干了，但是这个分支还是必须就地销毁：</p>
<pre><code>$ git branch -d feature-vulcan
error: The branch &#39;feature-vulcan&#39; is not fully merged.
If you are sure you want to delete it, run &#39;git branch -D feature-vulcan&#39;.
</code></pre>
<p>销毁失败。Git友情提醒，feature-vulcan分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用命令<em>git branch -D feature-vulcan</em>。</p>
<p>现在我们强行删除：</p>
<pre><code>$ git branch -D feature-vulcan
Deleted branch feature-vulcan (was 756d4af).
</code></pre>
<p>终于删除成功！</p>
<p><video width="100%" height="65%" controls="controls" preload="none" style="border:solid 1px #ccc"><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/force-delete-br.mp4" /><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/force-delete-br.webm" /></video></p>
<p><strong>小结</strong></p>
<p>开发一个新feature，最好新建一个分支；</p>
<p>如果要丢弃一个没有被合并过的分支，可以通过<em>git branch -D name</em>强行删除。</p>
<h2 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h2><p>当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。</p>
<p>要查看远程库的信息，用<em>git remote</em>：</p>
<pre><code>$ git remote
origin
</code></pre>
<p>或者，用<em>git remote -v</em>显示更详细的信息：</p>
<pre><code>$ git remote -v
origin  git@github.com:michaelliao/learngit.git (fetch)
origin  git@github.com:michaelliao/learngit.git (push)
</code></pre>
<p>上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。</p>
<h3 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h3><p>推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：</p>
<pre><code>$ git push origin master
</code></pre>
<p>如果要推送其他分支，比如dev，就改成：</p>
<pre><code>$ git push origin dev
</code></pre>
<p>但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？</p>
<ul>
<li><p>master分支是主分支，因此要时刻与远程同步；</p>
</li>
<li><p>dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</p>
</li>
<li><p>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</p>
</li>
<li><p>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</p>
</li>
</ul>
<p>总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！</p>
<p><video width="100%" height="65%" controls="controls" preload="none" style="border:solid 1px #ccc"><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/git-push-origin.mp4" /><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/git-push-origin.webm" /></video></p>
<h3 id="抓取分支"><a href="#抓取分支" class="headerlink" title="抓取分支"></a>抓取分支</h3><p>多人协作时，大家都会往master和dev分支上推送各自的修改。</p>
<p>现在，模拟一个你的小伙伴，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆：</p>
<pre><code>$ git clone git@github.com:michaelliao/learngit.git
Cloning into &#39;learngit&#39;...
remote: Counting objects: 46, done.
remote: Compressing objects: 100% (26/26), done.
remote: Total 46 (delta 16), reused 45 (delta 15)
Receiving objects: 100% (46/46), 15.69 KiB | 6 KiB/s, done.
Resolving deltas: 100% (16/16), done.
</code></pre>
<p>当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的master分支。不信可以用<em>git branch</em>命令看看：</p>
<pre><code>$ git branch
* master
</code></pre>
<p>现在，你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支：</p>
<pre><code>$ git checkout -b dev origin/dev
</code></pre>
<p>现在，他就可以在dev上继续修改，然后，时不时地把dev分支push到远程：</p>
<pre><code>$ git commit -m &quot;add /usr/bin/env&quot;
[dev 291bea8] add /usr/bin/env
 1 file changed, 1 insertion(+)
$ git push origin dev
Counting objects: 5, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 349 bytes, done.
Total 3 (delta 0), reused 0 (delta 0)
To git@github.com:michaelliao/learngit.git
   fc38031..291bea8  dev -&gt; dev
</code></pre>
<p><video width="100%" height="65%" controls="controls" preload="none" style="border:solid 1px #ccc"><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/git-push-by-xiaohuoban.mp4" /><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/git-push-by-xiaohuoban.webm" /></video></p>
<p>你的小伙伴已经向origin&#x2F;dev分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送：</p>
<pre><code>$ git add hello.py 
$ git commit -m &quot;add coding: utf-8&quot;
[dev bd6ae48] add coding: utf-8
 1 file changed, 1 insertion(+)
$ git push origin dev
To git@github.com:michaelliao/learngit.git
 ! [rejected]        dev -&gt; dev (non-fast-forward)
error: failed to push some refs to &#39;git@github.com:michaelliao/learngit.git&#39;
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Merge the remote changes (e.g. &#39;git pull&#39;)
hint: before pushing again.
hint: See the &#39;Note about fast-forwards&#39; in &#39;git push --help&#39; for details.
</code></pre>
<p>推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用<em>git pull</em>把最新的提交从origin&#x2F;dev抓下来，然后，在本地合并，解决冲突，再推送：</p>
<pre><code>$ git pull
remote: Counting objects: 5, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 3 (delta 0)
Unpacking objects: 100% (3/3), done.
From github.com:michaelliao/learngit
   fc38031..291bea8  dev        -&gt; origin/dev
There is no tracking information for the current branch.
Please specify which branch you want to merge with.
See git-pull(1) for details

    git pull &lt;remote&gt; &lt;branch&gt;

If you wish to set tracking information for this branch you can do so with:

    git branch --set-upstream dev origin/&lt;branch&gt;
</code></pre>
<p><em>git pull</em>也失败了，原因是没有指定本地dev分支与远程origin&#x2F;dev分支的链接，根据提示，设置dev和origin&#x2F;dev的链接：</p>
<pre><code>$ git branch --set-upstream dev origin/dev
Branch dev set up to track remote branch dev from origin.
</code></pre>
<p>再pull：</p>
<pre><code>$ git pull
Auto-merging hello.py
CONFLICT (content): Merge conflict in hello.py
Automatic merge failed; fix conflicts and then commit the result.
</code></pre>
<p>这回<em>git pull</em>成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375840202368c74be33fbd884e71b570f2cc3c0d1dcf000">解决冲突</a>完全一样。解决后，提交，再push：</p>
<pre><code>$ git commit -m &quot;merge &amp; fix hello.py&quot;
[dev adca45d] merge &amp; fix hello.py
$ git push origin dev
Counting objects: 10, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (5/5), done.
Writing objects: 100% (6/6), 747 bytes, done.
Total 6 (delta 0), reused 0 (delta 0)
To git@github.com:michaelliao/learngit.git
   291bea8..adca45d  dev -&gt; dev
</code></pre>
<p><video width="100%" height="65%" controls="controls" preload="none" style="border:solid 1px #ccc"><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/git-pull-push-fix.mp4" /><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/git-pull-push-fix.webm" /></video></p>
<p>因此，多人协作的工作模式通常是这样：</p>
<ol>
<li><p>首先，可以试图用<em>git push origin branch-name</em>推送自己的修改；</p>
</li>
<li><p>如果推送失败，则因为远程分支比你的本地更新，需要先用<em>git pull</em>试图合并；</p>
</li>
<li><p>如果合并有冲突，则解决冲突，并在本地提交；</p>
</li>
<li><p>没有冲突或者解决掉冲突后，再用<em>git push origin branch-name</em>推送就能成功！</p>
</li>
</ol>
<p>如果<em>git pull</em>提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令<em>git branch –set-upstream branch-name origin&#x2F;branch-name</em>。</p>
<p>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p>
<p><strong>小结</strong></p>
<ul>
<li><p>查看远程库信息，使用<em>git remote -v</em>；</p>
</li>
<li><p>本地新建的分支如果不推送到远程，对其他人就是不可见的；</p>
</li>
<li><p>从本地推送分支，使用<em>git push origin branch-name</em>，如果推送失败，先用<em>git pull</em>抓取远程的新提交；</p>
</li>
<li><p>在本地创建和远程分支对应的分支，使用<em>git checkout -b branch-name origin&#x2F;branch-name</em>，本地和远程分支的名称最好一致；</p>
</li>
<li><p>建立本地分支和远程分支的关联，使用<em>git branch –set-upstream branch-name origin&#x2F;branch-name</em>；</p>
</li>
<li><p>从远程抓取分支，使用<em>git pull</em>，如果有冲突，要先处理冲突。</p>
</li>
</ul>
<p>#标签管理</p>
<p>发布一个版本时，我们通常先在版本库中打一个标签，这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。</p>
<p>Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动），所以，创建和删除标签都是瞬间完成的。</p>
<h2 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h2><p>在Git中打标签非常简单，首先，切换到需要打标签的分支上：</p>
<pre><code>$ git branch
* dev
  master
$ git checkout master
Switched to branch &#39;master&#39;
</code></pre>
<p>然后，敲命令<em>git tag name</em>就可以打一个新标签：</p>
<pre><code>$ git tag v1.0
</code></pre>
<p>可以用命令<em>git tag</em>查看所有标签：</p>
<pre><code>$ git tag
v1.0
</code></pre>
<p>默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？</p>
<p>方法是找到历史提交的commit id，然后打上就可以了：</p>
<pre><code>$ git log --pretty=oneline --abbrev-commit
6a5819e merged bug fix 101
cc17032 fix bug 101
7825a50 merge with no-ff
6224937 add merge
59bc1cb conflict fixed
400b400 &amp; simple
75a857c AND simple
fec145a branch test
d17efd8 remove test.txt
...
</code></pre>
<p>比方说要对“add merge”这次提交打标签，它对应的commit id是“6224937”，敲入命令：</p>
<pre><code>$ git tag v0.9 6224937
</code></pre>
<p>再用命令<em>git tag</em>查看标签：</p>
<pre><code>$ git tag
v0.9
v1.0
</code></pre>
<p>注意，标签不是按时间顺序列出，而是按字母排序的。可以用<em>git show tagname</em>查看标签信息：</p>
<pre><code>$ git show v0.9
commit 622493706ab447b6bb37e4e2a2f276a20fed2ab4
Author: Michael Liao &lt;askxuefeng@gmail.com&gt;
Date:   Thu Aug 22 11:22:08 2013 +0800

    add merge
...
</code></pre>
<p>可以看到，“v0.9”确实打在“add merge”这次提交上。</p>
<p>还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：</p>
<pre><code>$ git tag -a v0.1 -m &quot;version 0.1 released&quot; 3628164
</code></pre>
<p>用命令<em>git show tagname</em>可以看到说明文字：</p>
<pre><code>$ git show v0.1
tag v0.1
Tagger: Michael Liao &lt;askxuefeng@gmail.com&gt;
Date:   Mon Aug 26 07:28:11 2013 +0800

version 0.1 released

commit 3628164fb26d48395383f8f31179f24e0882e1e0
Author: Michael Liao &lt;askxuefeng@gmail.com&gt;
Date:   Tue Aug 20 15:11:49 2013 +0800

    append GPL
...
</code></pre>
<p>还可以通过-s用私钥签名一个标签：</p>
<pre><code>$ git tag -s v0.2 -m &quot;signed version 0.2 released&quot; fec145a
</code></pre>
<p>签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，或者没有gpg密钥对，就会报错：</p>
<pre><code>gpg: signing failed: secret key not available
error: gpg failed to sign the data
error: unable to sign the tag
</code></pre>
<p>如果报错，请参考GnuPG帮助文档配置Key。</p>
<p>用命令<em>git show tagname</em>可以看到PGP签名信息：</p>
<pre><code>$ git show v0.2
tag v0.2
Tagger: Michael Liao &lt;askxuefeng@gmail.com&gt;
Date:   Mon Aug 26 07:28:33 2013 +0800

signed version 0.2 released
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.12 (Darwin)

iQEcBAABAgAGBQJSGpMhAAoJEPUxHyDAhBpT4QQIAKeHfR3bo...
-----END PGP SIGNATURE-----

commit fec145accd63cdc9ed95a2f557ea0658a2a6537f
Author: Michael Liao &lt;askxuefeng@gmail.com&gt;
Date:   Thu Aug 22 10:37:30 2013 +0800

    branch test
...
</code></pre>
<p>用PGP签名的标签是不可伪造的，因为可以验证PGP签名。验证签名的方法比较复杂，这里就不介绍了。</p>
<p><video width="100%" height="65%" controls="controls" preload="none" style="border:solid 1px #ccc"><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/git-tags.mp4" /><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/git-tags.webm" /></video></p>
<p><strong>小结</strong></p>
<ul>
<li><p>命令<em>git tag name</em>用于新建一个标签，默认为HEAD，也可以指定一个commit id；</p>
</li>
<li><p>-a tagname -m “blablabla…”可以指定标签信息；</p>
</li>
<li><p>-s tagname -m “blablabla…”可以用PGP签名标签；</p>
</li>
<li><p>命令<em>git tag</em>可以查看所有标签；</p>
</li>
</ul>
<h2 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h2><p>如果标签打错了，也可以删除：</p>
<pre><code>$ git tag -d v0.1
Deleted tag &#39;v0.1&#39; (was e078af9)
</code></pre>
<p>因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。</p>
<p>如果要推送某个标签到远程，使用命令git push origin tagname：</p>
<pre><code>$ git push origin v1.0
Total 0 (delta 0), reused 0 (delta 0)
To git@github.com:michaelliao/learngit.git
 * [new tag]         v1.0 -&gt; v1.0
</code></pre>
<p>或者，一次性推送全部尚未推送到远程的本地标签：</p>
<pre><code>$ git push origin --tags
Counting objects: 1, done.
Writing objects: 100% (1/1), 554 bytes, done.
Total 1 (delta 0), reused 0 (delta 0)
To git@github.com:michaelliao/learngit.git
 * [new tag]         v0.2 -&gt; v0.2
 * [new tag]         v0.9 -&gt; v0.9
</code></pre>
<p>如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：</p>
<pre><code>$ git tag -d v0.9
Deleted tag &#39;v0.9&#39; (was 6224937)
</code></pre>
<p>然后，从远程删除。删除命令也是push，但是格式如下：</p>
<pre><code>$ git push origin :refs/tags/v0.9
To git@github.com:michaelliao/learngit.git
 - [deleted]         v0.9
</code></pre>
<p>要看看是否真的从远程库删除了标签，可以登陆GitHub查看。</p>
<p><video width="100%" height="65%" controls="controls" preload="none" style="border:solid 1px #ccc"><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/git-tag-d.mp4" /><source src="http://liaoxuefeng-liaoxuefeng.stor.sinaapp.com/learngit/video/git-tag-d.webm" /></video></p>
<p><strong>小结</strong></p>
<ul>
<li><p>命令<em>git push origin tagname</em>可以推送一个本地标签；</p>
</li>
<li><p>命令<em>git push origin –tags</em>可以推送全部未推送过的本地标签；</p>
</li>
<li><p>命令<em>git tag -d tagname</em>可以删除一个本地标签；</p>
</li>
<li><p>命令<em>git push origin :refs&#x2F;tags&#x2F;tagname</em>可以删除一个远程标签。</p>
</li>
</ul>
<h1 id="自定义Git"><a href="#自定义Git" class="headerlink" title="自定义Git"></a>自定义Git</h1><p>在<a href="file/git%E5%AE%89%E8%A3%85.md#anchor_0">安装Git</a>一节中，我们已经配置了user.name和user.email，实际上，Git还有很多可配置项。</p>
<p>比如，让Git显示颜色，会让命令输出看起来更醒目：</p>
<pre><code>$ git config --global color.ui true
</code></pre>
<p>这样，Git会适当地显示不同的颜色，比如<em>git status</em>命令：</p>
<p><img data-src="/images/Git%E6%95%99%E7%A8%8B/32.png" alt="这里写图片描述"></p>
<p>文件名就会标上颜色。</p>
<p>我们在后面还会介绍如何更好地配置Git，以便让你的工作更高效。</p>
<h2 id="忽略特殊文件"><a href="#忽略特殊文件" class="headerlink" title="忽略特殊文件"></a>忽略特殊文件</h2><p>有些时候，你必须把某些文件放到Git工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件啦，等等，每次<em>git status</em>都会显示“Untracked files …”，有强迫症的童鞋心里肯定不爽。</p>
<p>好在Git考虑到了大家的感受，这个问题解决起来也很简单，在Git工作区的根目录下创建一个特殊的*.gitignore*文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。</p>
<p>不需要从头写*.gitignore*文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：<a href="https://github.com/github/gitignore">https://github.com/github/gitignore</a></p>
<p>忽略文件的原则是：</p>
<ol>
<li>忽略操作系统自动生成的文件，比如缩略图等；</li>
<li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的*.class*文件；</li>
<li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。</li>
</ol>
<p>举个例子：</p>
<p>假设你在Windows下进行Python开发，Windows会自动在有图片的目录下生成隐藏的缩略图文件，如果有自定义目录，目录下就会有<em>Desktop.ini</em>文件，因此你需要忽略Windows自动生成的垃圾文件：</p>
<pre><code># Windows:
Thumbs.db
ehthumbs.db
Desktop.ini
</code></pre>
<p>然后，继续忽略Python编译产生的*.pyc*、<em>.pyo</em>、<em>dist</em>等文件或目录：</p>
<pre><code># Python:
*.py[cod]
*.so
*.egg
*.egg-info
dist
build
</code></pre>
<p>加上你自己定义的文件，最终得到一个完整的*.gitignore*文件，内容如下：</p>
<pre><code># Windows:
Thumbs.db
ehthumbs.db
Desktop.ini

# Python:
*.py[cod]
*.so
*.egg
*.egg-info
dist
build

# My configurations:
db.ini
deploy_key_rsa
</code></pre>
<p>最后一步就是把*.gitignore<em>也提交到Git，就完成了！当然检验</em>.gitignore<em>的标准是</em>git status*命令是不是说“working directory clean”。</p>
<p><strong>小结</strong></p>
<ol>
<li>忽略某些文件时，需要编写*.gitignore*。</li>
<li><em>.gitignore</em>文件本身要放到版本库里，并且可以对*.gitignore*做版本管理！</li>
</ol>
<h2 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h2><p>有没有经常敲错命令？比如<em>git status</em>？<em>status</em>这个单词真心不好记。</p>
<p>如果敲<em>git st</em>就表示<em>git status</em>那就简单多了，当然这种偷懒的办法我们是极力赞成的。</p>
<p>我们只需要敲一行命令，告诉Git，以后<em>st</em>就表示<em>status</em>：</p>
<pre><code>$ git config --global alias.st status
</code></pre>
<p>好了，现在敲<em>git st</em>看看效果。</p>
<p>当然还有别的命令可以简写，很多人都用<em>co</em>表示<em>checkout</em>，<em>ci</em>表示<em>commit</em>，<em>br</em>表示<em>branch</em>：</p>
<pre><code>$ git config --global alias.co checkout
$ git config --global alias.ci commit
$ git config --global alias.br branch
</code></pre>
<p>以后提交就可以简写成：</p>
<pre><code>$ git ci -m &quot;bala bala bala...&quot;
</code></pre>
<p><em>–global</em>参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。</p>
<p>在<a href="file/%E6%97%B6%E5%85%89%E6%9C%BA%E7%A9%BF%E6%A2%AD.md#anchor_4">撤销修改</a>一节中，我们知道，命令<em>git reset HEAD file</em>可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个unstage别名：</p>
<pre><code>$ git config --global alias.unstage &#39;reset HEAD&#39;
</code></pre>
<p>当你敲入命令：</p>
<pre><code>$ git unstage test.py
</code></pre>
<p>实际上Git执行的是：</p>
<pre><code>$ git reset HEAD test.py
</code></pre>
<p>配置一个<em>git last</em>，让其显示最后一次提交信息：</p>
<pre><code>$ git config --global alias.last &#39;log -1&#39;
</code></pre>
<p>这样，用<em>git last</em>就能显示最近一次的提交：</p>
<pre><code>$ git last
commit adca45d317e6d8a4b23f9811c3d7b7f0f180bfe2
Merge: bd6ae48 291bea8
Author: Michael Liao &lt;askxuefeng@gmail.com&gt;
Date:   Thu Aug 22 22:49:22 2013 +0800

    merge &amp; fix hello.py
</code></pre>
<p>甚至还有人丧心病狂地把<em>lg</em>配置成了：</p>
<pre><code>git config --global alias.lg &quot;log --color --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&quot;
</code></pre>
<p>来看看<em>git lg</em>的效果：</p>
<p><img data-src="/images/Git%E6%95%99%E7%A8%8B/33.png" alt="这里写图片描述"></p>
<p>为什么不早点告诉我？别激动，咱不是为了多记几个英文单词嘛！</p>
<p><strong>小结</strong></p>
<p>给Git配置好别名，就可以输入命令时偷个懒。我们鼓励偷懒。</p>
<h2 id="搭建Git服务器"><a href="#搭建Git服务器" class="headerlink" title="搭建Git服务器"></a>搭建Git服务器</h2><p>在<a href="file/%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.md#anchor_0">远程仓库</a>一节中，我们讲了远程仓库实际上和本地仓库没啥不同，纯粹为了7x24小时开机并交换大家的修改。</p>
<p>GitHub就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给GitHub交保护费，那就只能自己搭建一台Git服务器作为私有仓库使用。</p>
<p>搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，这样，通过几条简单的apt命令就可以完成安装。</p>
<p>假设你已经有sudo权限的用户账号，下面，正式开始安装。</p>
<p>第一步，安装git：</p>
<pre><code>$ sudo apt-get install git
</code></pre>
<p>第二步，创建一个git用户，用来运行git服务：</p>
<pre><code>$ sudo adduser git
</code></pre>
<p>第三步，创建证书登录：</p>
<p>收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到*&#x2F;home&#x2F;git&#x2F;.ssh&#x2F;authorized_keys*文件里，一行一个。</p>
<p>第四步，初始化Git仓库：</p>
<p>先选定一个目录作为Git仓库，假定是&#x2F;srv&#x2F;sample.git，在&#x2F;srv目录下输入命令：</p>
<pre><code>$ sudo git init --bare sample.git
</code></pre>
<p>Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：</p>
<pre><code>$ sudo chown -R git:git sample.git
</code></pre>
<p>第五步，禁用shell登录：</p>
<p>出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑&#x2F;etc&#x2F;passwd文件完成。找到类似下面的一行：</p>
<pre><code>git:x:1001:1001:,,,:/home/git:/bin/bash
</code></pre>
<p>改为：</p>
<pre><code>git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
</code></pre>
<p>这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。</p>
<p>第六步，克隆远程仓库：</p>
<p>现在，可以通过<em>git clone</em>命令克隆远程仓库了，在各自的电脑上运行：</p>
<pre><code>$ git clone git@server:/srv/sample.git
Cloning into &#39;sample&#39;...
warning: You appear to have cloned an empty repository.
</code></pre>
<p>剩下的推送就简单了。</p>
<h3 id="管理公钥"><a href="#管理公钥" class="headerlink" title="管理公钥"></a>管理公钥</h3><p>如果团队很小，把每个人的公钥收集起来放到服务器的*&#x2F;home&#x2F;git&#x2F;.ssh&#x2F;authorized_keys*文件里就是可行的。如果团队有几百号人，就没法这么玩了，这时，可以用<a href="https://github.com/res0nat0r/gitosis">Gitosis</a>来管理公钥。</p>
<p>这里我们不介绍怎么玩<a href="https://github.com/res0nat0r/gitosis">Gitosis</a>了，几百号人的团队基本都在500强了，相信找个高水平的Linux管理员问题不大。</p>
<h3 id="管理权限"><a href="#管理权限" class="headerlink" title="管理权限"></a>管理权限</h3><p>有很多不但视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，每个人是否有读写权限会精确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，所以Git也继承了开源社区的精神，不支持权限控制。不过，因为Git支持钩子（hook），所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。<a href="https://github.com/sitaramc/gitolite">Gitolite</a>就是这个工具。</p>
<p>这里我们也不介绍<a href="https://github.com/sitaramc/gitolite">Gitolite</a>了，不要把有限的生命浪费到权限斗争中。</p>
<p><strong>小结</strong></p>
<p>搭建Git服务器非常简单，通常10分钟即可完成；</p>
<p>要方便管理公钥，用<a href="https://github.com/sitaramc/gitolite">Gitosis</a>；</p>
<p>要像SVN那样变态地控制权限，用<a href="https://github.com/sitaramc/gitolite">Gitolite</a>。</p>
<h1 id="期末总结"><a href="#期末总结" class="headerlink" title="期末总结"></a>期末总结</h1><p>终于到了期末总结的时刻了！</p>
<p>经过几天的学习，相信你对Git已经初步掌握。一开始，可能觉得Git上手比较困难，尤其是已经熟悉SVN的童鞋，没关系，多操练几次，就会越用越顺手。</p>
<p>Git虽然极其强大，命令繁多，但常用的就那么十来个，掌握好这十几个常用命令，你已经可以得心应手地使用Git了。</p>
<p>友情附赠国外网友制作的Git Cheat Sheet，建议打印出来备用：</p>
<p><a href="http://www.git-tower.com/blog/assets/2013-05-22-git-cheat-sheet/cheat-sheet-large01.png">Git Cheat Sheet</a></p>
<p>现在告诉你Git的官方网站：<a href="http://git-scm.com/">http://git-scm.com</a>，英文自我感觉不错的童鞋，可以经常去官网看看。什么，打不开网站？相信我，我给出的绝对是官网地址，而且，Git官网决没有那么容易宕机，可能是你的人品问题，赶紧面壁思过，好好想想原因。</p>
<p>如果你学了Git后，工作效率大增，有更多的空闲时间健身看电影，那我的教学目标就达到了。为了激励我写出更优秀的教程，你可以考虑赠送我一杯咖啡，至于是喝麦当劳还是星巴克就看你的心情了。有支付宝的童鞋请狠狠地点这里：</p>
<p><a href="https://me.alipay.com/askxuefeng" target="_blank" class="btn btn-success btn-large" style="padding-left:60px;background-repeat:no-repeat;background-position:15px center;background-image:url(http://static.itranswarp.com/0013738742366844b31d0ceab84491682c4556f8daa5101000/attachment/2013/8/12/9d9043ba785d43ab8f4cffb04a4b1300.png)">请我喝咖啡</a></p>
<p>谢谢观看！</p>
<h1 id="转载声明"><a href="#转载声明" class="headerlink" title="转载声明"></a>转载声明</h1><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">转载链接</a></p>
]]></content>
      <categories>
        <category>互联网</category>
        <category>转载</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>版本控制</tag>
      </tags>
  </entry>
  <entry>
    <title>【NOIP】考前必备</title>
    <url>/2015/NOIP-%E8%80%83%E5%89%8D%E5%BF%85%E5%A4%87/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>考试前首先要调整好自己的心态，忘却之前发生的任何事情。</p>
<h1 id="考试前-调试机子"><a href="#考试前-调试机子" class="headerlink" title="考试前(调试机子)"></a><strong>考试前(调试机子)</h1><p>首先做好所有文件名后缀的关联，将.in，.out的文件关联至Notepad ++。<br>将.cpp，.pas关联至gvim。<br>在_vimrc中敲入下面配置信息</p>
<hr>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span></span><br><span class="line"><span class="keyword">set</span> nu!</span><br><span class="line"><span class="keyword">colorscheme</span> darkblue</span><br><span class="line"></span><br><span class="line"><span class="keyword">imap</span> <span class="symbol">&lt;F2&gt;</span> <span class="symbol">&lt;esc&gt;</span>:<span class="keyword">w</span><span class="symbol">&lt;cr&gt;</span>i</span><br><span class="line"><span class="keyword">imap</span> <span class="symbol">&lt;F9&gt;</span> <span class="symbol">&lt;F2&gt;</span><span class="symbol">&lt;esc&gt;</span>:!fpc -g %<span class="symbol">&lt;cr&gt;</span>i</span><br><span class="line"><span class="keyword">imap</span> <span class="symbol">&lt;F10&gt;</span> <span class="symbol">&lt;F2&gt;</span><span class="symbol">&lt;esc&gt;</span>:!g++ -Wall -g % -<span class="keyword">o</span> %:r<span class="symbol">&lt;cr&gt;</span>i</span><br><span class="line"><span class="keyword">imap</span> <span class="symbol">&lt;F11&gt;</span> assign(<span class="built_in">input</span>,<span class="string">&#x27;.in&#x27;</span>);reset(<span class="built_in">input</span>);</span><br><span class="line"><span class="keyword">imap</span> <span class="symbol">&lt;F12&gt;</span> freopen(<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br></pre></td></tr></table></figure>
<hr>
<p>在notepad ++中设置</p>
<hr>
<ol>
<li>将窗口界面调小</li>
<li>配色方案选择blackboard</li>
<li>在首选项中设置自动更新文件</li>
</ol>
<hr>
<p>打好对拍程序</p>
<hr>
<p>对拍</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">:loop</span><br><span class="line">	data.exe&gt;data.<span class="keyword">in</span></span><br><span class="line">	<span class="number">2</span>.exe&lt;data.<span class="keyword">in</span>&gt;<span class="number">1</span>.out</span><br><span class="line">	<span class="number">22</span>.exe&lt;data.<span class="keyword">in</span>&gt;<span class="number">11</span>.out</span><br><span class="line">fc &quot;<span class="number">1</span>.out&quot; &quot;<span class="number">11</span>.out&quot;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">errorlevel</span> <span class="number">1</span> <span class="keyword">goto</span> loop</span><br><span class="line"><span class="built_in">pause</span></span><br><span class="line"><span class="keyword">goto</span> loop</span><br></pre></td></tr></table></figure>
<p>单测</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">:loop</span><br><span class="line">	data.exe&gt;data.<span class="keyword">in</span></span><br><span class="line">	<span class="number">1</span>.exe&lt;data.<span class="keyword">in</span></span><br><span class="line">	<span class="built_in">echo</span> .............</span><br><span class="line">	<span class="built_in">echo</span>.</span><br><span class="line"><span class="keyword">goto</span> loop</span><br></pre></td></tr></table></figure>
<hr>
<p>打好文件输入输出</p>
<hr>
<p>cpp版本</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">	<span class="comment">//freopen(&quot;.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>pascal版本</p>
<figure class="highlight pascal"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>	i,j,k,m,n:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	assign(input,<span class="string">&#x27;.in&#x27;</span>);reset(input);</span><br><span class="line">	assign(output,<span class="string">&#x27;.out&#x27;</span>);rewrite(output);</span><br><span class="line">	</span><br><span class="line">	close(input);close(output);</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>

<hr>
<p>对拍数据生成例程</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">random</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>			<span class="comment">//在int范围下生成区间为[x,y]的随机整数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> ret = <span class="built_in">rand</span>()*<span class="built_in">rand</span>();</span><br><span class="line">	<span class="keyword">return</span> ret%(y-x<span class="number">+1</span>)+x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="built_in">random</span>(<span class="number">1</span>,<span class="number">100</span>) &lt;&lt; endl;</span><br><span class="line">		<span class="built_in">Sleep</span>(<span class="number">100</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>测试一下g++,fpc,gdb是否可用，若不可用，将环境变量设置一下。</p>
<h1 id="考试中"><a href="#考试中" class="headerlink" title="考试中"></a><strong>考试中</h1><p>考试时间3.5小时，有三道题目，注意分配好时间。</p>
<ol>
<li>先浏览三道题目，确保充分理解题目意思，并且能够模拟出样例数据。自己在心中评出试题的难度等级(一般题目顺序就是难度顺序)。最好能够在15分钟完成这部分内容。</li>
<li>对每一道题目重新理解后，对照着数据范围想一个暴力可过好打的程序。(作为对拍的标程)，然后尽自己所能想一个最好的算法。</li>
</ol>
<ul>
<li>在样例数据可以过的情况下，手动出一些小数据和一些一般性数据。然后用data生成大数据测试。</li>
<li>在暴力确保正确性，且不超过暴力程序的数据范围的情况下，对拍“标程”。</li>
</ul>
<p>3.在完成并测试过第一题的时间最好在比赛开始后的1个小时内(方便准备后面的题目)<br>4.第二三题尽量在1个小时之内完成。<br>5.在考试后的最后10分钟内，停止正在做的题目，将所有的程序文件输入输出改对，去掉调试代码。还有时间在争取能否做完其他题目。</p>
<h1 id="考试后"><a href="#考试后" class="headerlink" title="考试后"></a><strong>考试后</h1><ol>
<li>跟同学讨论一下试题，调整好心态，忘掉当天发生的任何事。</li>
<li>如果心理素质较好写个总结也是可以的</li>
</ol>
<h1 id="NOIP知识点"><a href="#NOIP知识点" class="headerlink" title="NOIP知识点"></a><strong>NOIP知识点</h1><p><a href="http://blog.sina.com.cn/s/blog_6b249a4f0100uvu1.html">NOIP提高组复赛考察点详细分析(新浪)</a><br><a href="http://www.zybang.com/question/924e718b7ff691252820f49ddec9e792.html">noip需要准备哪些方面的基础知识.复赛需要做哪些类型的题目（提高组）(作业帮)</a></p>
]]></content>
      <categories>
        <category>信息学</category>
        <category>原创</category>
      </categories>
  </entry>
  <entry>
    <title>[NOIP2015提高组复赛]总结</title>
    <url>/2015/NOIP2015%E6%8F%90%E9%AB%98%E7%BB%84%E5%A4%8D%E8%B5%9B-%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><strong>概述</strong></h2><h2 id="考试时太浮躁！不要心急打程序，一定要静下心来仔细思考算法。是否可行（时限能否过）。保证思考算法的时间。对于自己熟练地算法，要相信能想得出来就一定能最快的调出来。根据数据范围，大胆猜测考得是什么算法。有时候直接想暴力是不科学的，暴力有时非常的复杂，还会带乱对整道题的思绪。对一些普通算法的应用还不够了解，看不出一道题考察的是什么算法。平时训练要多一些对算法的思考，能不看题解就不看题解，花多点时间在思考上。DAY1"><a href="#考试时太浮躁！不要心急打程序，一定要静下心来仔细思考算法。是否可行（时限能否过）。保证思考算法的时间。对于自己熟练地算法，要相信能想得出来就一定能最快的调出来。根据数据范围，大胆猜测考得是什么算法。有时候直接想暴力是不科学的，暴力有时非常的复杂，还会带乱对整道题的思绪。对一些普通算法的应用还不够了解，看不出一道题考察的是什么算法。平时训练要多一些对算法的思考，能不看题解就不看题解，花多点时间在思考上。DAY1" class="headerlink" title="考试时太浮躁！不要心急打程序，一定要静下心来仔细思考算法。是否可行（时限能否过）。保证思考算法的时间。对于自己熟练地算法，要相信能想得出来就一定能最快的调出来。根据数据范围，大胆猜测考得是什么算法。有时候直接想暴力是不科学的，暴力有时非常的复杂，还会带乱对整道题的思绪。对一些普通算法的应用还不够了解，看不出一道题考察的是什么算法。平时训练要多一些对算法的思考，能不看题解就不看题解，花多点时间在思考上。DAY1"></a>考试时太浮躁！不要心急打程序，一定要静下心来仔细思考算法。是否可行（时限能否过）。保证思考算法的时间。对于自己熟练地算法，要相信能想得出来就一定能最快的调出来。根据数据范围，大胆猜测考得是什么算法。有时候直接想暴力是不科学的，暴力有时非常的复杂，还会带乱对整道题的思绪。<br>对一些普通算法的应用还不够了解，看不出一道题考察的是什么算法。平时训练要多一些对算法的思考，能不看题解就不看题解，花多点时间在思考上。<br><strong>DAY1</strong></h2><p>开考时有点小紧张，看到T1题目很长，就更紧张了！！！<br>T1:仔细读题，纯暴力。打完用了半个小时，又打了一个判断正确性的程序拍了一下，花了1个多小时，耗时较大，拖慢了后面的解题时间。</p>
<p>T2:紧张依旧挥之不去，随手画了个图，发现是找一个最小的环，然后就想到了tarjan缩点。就开打了。到了最后才发现，tarjan会爆栈，然而为时已晚。<br>考试时要及时测试小数据和大数据，不要嫌麻烦而只出随机数据。尽管大部分时候程序可以在随机数据下面表现良好。<br>考试时要冷静下来，仔细思考算法是否存在漏洞。</p>
<p>T3:题目复杂，加之从小到大不会打牌，所以看了很多遍题目。大概了解了出牌方法。发现了花色是没有用的。<br>于是打dfs，但是没有将牌统计到一块打了半天又长又有诸多bug。所以直接被我推倒重来了。感觉dfs特别难打，所以打了一个错误的贪心。</p>
<h2 id="DAY2"><a href="#DAY2" class="headerlink" title="DAY2"></a><strong>DAY2</strong></h2><p>T1:这道题怎么想都没有想到可以用二分答案的方法去算，一开始想把每一块最短的石头都拿出来，但是部分最优解并不能推出全局最有解。所以打了一个错误的贪心，在贪心的路上越走越远，依然没走到尽头。</p>
<p>T2:想到搜索,算了一下搜索太慢。就冲着50%的数据去了，但是到最后面k&#x3D;&#x3D;m的情况还是没有想到满足时限的做法。当时只要推一下，很快就能得到dp方程。</p>
<p>T3:打了倍增最短路，计划过30%的数据，确实想不到特别好的算法，暴力非常复杂，打了很长时间，才打完。</p>
]]></content>
      <categories>
        <category>信息学</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>Padavan使用记录</title>
    <url>/2023/Padavan%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>主流的路由器固件中的一种，同样是基于Linux改的。给我的感觉是，相比于Openwrt更像路由器系统。并且功能菜单分类的更好，缺点是没Openwrt灵活，但稳定性不错。<br>下面主要将一些我经常配置的功能记录下来，以备后用。</p>
<h1 id="高级设置"><a href="#高级设置" class="headerlink" title="高级设置"></a>高级设置</h1><h2 id="内网LAN"><a href="#内网LAN" class="headerlink" title="内网LAN"></a>内网LAN</h2><h3 id="内网设置"><a href="#内网设置" class="headerlink" title="内网设置"></a>内网设置</h3><p>修改路由器LAN口IP</p>
<h3 id="DHCP服务器（dnsmasq）"><a href="#DHCP服务器（dnsmasq）" class="headerlink" title="DHCP服务器（dnsmasq）"></a>DHCP服务器（dnsmasq）</h3><p>设置DHCP地址池<br>设置DHCP租期<br>设置DHCP下发的DNS<br>静态IP（固定IP）的绑定<br>dnsmasq的扩展功能</p>
<h3 id="路由设置"><a href="#路由设置" class="headerlink" title="路由设置"></a>路由设置</h3><p>除了DHCP的动态默认路由外，可以配置很多静态路由<br>经典的是将一些IP段的流量走旁路由，比方说：</p>
<ul>
<li>Clash代理fake-ip段</li>
<li>Telegram IP段</li>
<li>Wireguard IP段。</li>
</ul>
<h3 id="网络唤醒"><a href="#网络唤醒" class="headerlink" title="网络唤醒"></a>网络唤醒</h3><p>在配置好WOL功能的电脑中，用于唤醒电脑。<br>需要在电脑和BIOS中开启有关设置<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[不用开机键，你的 Windows 也能随时就绪：WoL 网络唤醒入门](https://sspai.com/post/67003)
">[1]</span></a></sup>，并且电脑要支持WOL功能。</p>
<h2 id="外网WAN"><a href="#外网WAN" class="headerlink" title="外网WAN"></a>外网WAN</h2><h3 id="外网设置"><a href="#外网设置" class="headerlink" title="外网设置"></a>外网设置</h3><p>路由器改桥接后，在此设置PPPoE相关信息。<br>可以修改运营商下发的DNS为自己设置的DNS，此DNS位于路由器DNS（dnsmasq）的上游。</p>
<h3 id="IPv6协议"><a href="#IPv6协议" class="headerlink" title="IPv6协议"></a>IPv6协议</h3><p>运营商支持IPv6的话，可以在此配置IPv6支持。<br>可以修改运营商下发的DNS为自己设置的DNS，此DNS位于路由器DNS（dnsmasq）的上游。</p>
<h3 id="端口映射（UPnP）"><a href="#端口映射（UPnP）" class="headerlink" title="端口映射（UPnP）"></a>端口映射（UPnP）</h3><p>可以启用UPnP功能，这样位于内网的设备，可以自动在路由器上设置端口转发。<br>手动端口转发也在此设置，一般我会设置以下功能的端口转发：</p>
<ul>
<li>电脑远程桌面（rdp）</li>
<li>比特彗星（BitComet）</li>
<li>VPN（Wireguard）</li>
<li>FRPS</li>
</ul>
<h3 id="动态域名解析"><a href="#动态域名解析" class="headerlink" title="动态域名解析"></a>动态域名解析</h3><p>有待研究！<br>目前我是通过脚本的方式实现DDNS。<br>参考附录中的DDNS脚本，以及此博文<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[UE-DDNS 一个通用嵌入式DDNS脚本](https://blog.03k.org/post/ue-ddns.html)">[2]</span></a></sup>。</p>
<h1 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h1><p>在开启的情况下INPUT与FORWARD链的Policy都是DROP。<br>需要单独使用iptables与ip6tables设置。</p>
<figure class="highlight bash"><figcaption><span>在防火墙规则启动后执行</span></figcaption><table><tr><td class="code"><pre><span class="line">ip6tables -I FORWARD -p tcp -m multiport --dport 8080,51820,22604,3389 -j ACCEPT</span><br><span class="line">ip6tables -I FORWARD -p udp -m multiport --dport 8080,51820,22604,3389 -j ACCEPT</span><br></pre></td></tr></table></figure>
<p>前面设置过的IPv4端口转发依旧生效。</p>
<h1 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h1><h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><p>记得在此修改默认路由器密码。<br>这里可以设置路由器定时重启，有需要可以设置。</p>
<h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><p>这里可以设置定时任务（crontab）</p>
<h1 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h1><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p>可以设置一些与路由器运行状态有关的脚本，增加灵活性。</p>
<h1 id="系统日志"><a href="#系统日志" class="headerlink" title="系统日志"></a>系统日志</h1><p>除了基本的系统日志外，还有DHCP租期，UPnP，路由表，链接等值得关注的一些日志。</p>
<h1 id="穿透服务"><a href="#穿透服务" class="headerlink" title="穿透服务"></a>穿透服务</h1><h2 id="WIREGUARD"><a href="#WIREGUARD" class="headerlink" title="WIREGUARD"></a>WIREGUARD</h2><p>没什么用，只是作为客户端接入其他的WIREGUARD服务端，功能不全。</p>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>需要重启保存的文件需要放在<code>/etc/storage</code>下。</p>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="ddns-sh"><a href="#ddns-sh" class="headerlink" title="ddns.sh"></a>ddns.sh</h2><figure class="highlight bash"><figcaption><span>/etc/storage/ddns.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;*** 1306.dnspod.lyz05.cn ***&quot;</span></span><br><span class="line">/etc/storage/ddns/1306.dnspod.lyz05.cn@dnspod_IPV4_ppp0.sh</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;*** 1306v6.dnspod.lyz05.cn ***&quot;</span></span><br><span class="line">/etc/storage/ddns/1306v6.dnspod.lyz05.cn@dnspod_IPV6_br0.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;*** Dnsmasq IPv6 DDNS ***&quot;</span></span><br><span class="line">leases_file=<span class="string">&quot;/tmp/dnsmasq.leases&quot;</span>  <span class="comment"># dnsmasq.leases 文件路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查文件是否存在</span></span><br><span class="line"><span class="keyword">if</span> [ ! -f <span class="string">&quot;<span class="variable">$leases_file</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Error: dnsmasq.leases file not found.&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用grep过滤包含 &quot;240e&quot; 的行，并逐行读取过滤结果</span></span><br><span class="line">grep <span class="string">&quot;240e&quot;</span> <span class="string">&quot;<span class="variable">$leases_file</span>&quot;</span> | <span class="keyword">while</span> IFS=<span class="string">&#x27; &#x27;</span> <span class="built_in">read</span> -r lease_time mac_address ip_address hostname client_id; <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># 在这里可以对满足条件的行进行处理</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;--------------------------&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Lease Time: <span class="variable">$lease_time</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;MAC Address: <span class="variable">$mac_address</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;IP Address: <span class="variable">$ip_address</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Hostname: <span class="variable">$hostname</span>&quot;</span></span><br><span class="line">    <span class="comment"># echo &quot;Client ID: $client_id&quot;</span></span><br><span class="line">        curl -k <span class="string">&quot;http://sub.lyz05.cn/ipinfo/ddns?subdomain=<span class="variable">$&#123;hostname&#125;</span>&amp;ip=<span class="variable">$&#123;ip_address&#125;</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;--------------------------&quot;</span></span><br><span class="line">    <span class="comment"># 在这里可以根据需要进行其他操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://sspai.com/post/67003">不用开机键，你的 Windows 也能随时就绪：WoL 网络唤醒入门</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.03k.org/post/ue-ddns.html">UE-DDNS 一个通用嵌入式DDNS脚本</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>PandoraBox使用记录</title>
    <url>/2019/PandoraBox%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>其实早在大一下就开始使用PandoraBox了，奈何一直没有写篇博文记录一下。<br>PandoraBox是国内从原版OpenWrt整出来的分支。最开始时，我是想直接用OpenWrt，但是好像我用的版本在路由器上有些问题。<br>后面发现了PandoraBox，有着除名字不同外，几乎一模一样的OpenWrt。<br>本次使用的路由器是斐讯K2p。早在高中时就有耳闻当时斐讯搞得0元购，奈何自己太年轻，并没有及时上车。所以我上车的时候已经晚了。<br>以为遭阿里系的封杀，我在腾讯系的转转找了一个专门做斐讯硬改和刷机的商家，选了硬改的斐讯k2p，大概270元左右，己经相当贵了，但是挺值的。（主要原因还是知名度太高，被炒高价格了）暑假帮同学再买时又贵了10-20元。</p>
<h2 id="需求-选择"><a href="#需求-选择" class="headerlink" title="需求&amp;选择"></a>需求&amp;选择</h2><p>有两大需求促使我买一台路由器，并刷机上PandoraBox。<br>一是我需要一个支持WIFI 5(802.11ac)且穿墙信号尚可的路由器，用于家里上网，家里广电原配的渣渣路由器穿墙能力不行。<br>二是学校宿舍需要一台路由器，搞定我在学校使用WIFI上网的难题。因为学校宽带贼贵，我没买，WIFI绑定MAC地址上网。<br>如果只是普通的上网，那也不需要刷机，主要是想实现路由器WIFI自动认证，以及使用附带的其他功能。如：打印机、SSR。<br>打印机是因为宿舍弄了个小型打印店，方便我直接远程打印。<br>SSR不解释</p>
<h3 id="系统选择"><a href="#系统选择" class="headerlink" title="系统选择"></a>系统选择</h3><p>而在所有的路由器相关的系统中，也就OpenWrt的软件包最为多，可以实现高度定制化的功能。就直接上手最难的OpenWrt。后面，歪打正着的遇到了PandoraBox。</p>
<h3 id="路由器选择"><a href="#路由器选择" class="headerlink" title="路由器选择"></a>路由器选择</h3><p>主要还是因为我孤陋寡闻，只知道K2P牛逼，支持刷机。因为原版K2P是不带USB口的，然后看到有硬改的，而且直接刷好，完美符合小白的我的需求。</p>
<h1 id="刷机"><a href="#刷机" class="headerlink" title="刷机"></a>刷机</h1><h2 id="uboot"><a href="#uboot" class="headerlink" title="uboot"></a>uboot</h2><p>首先选择一台成色上好的路由器，然后开始刷机。<br>刷机前，像安卓机的Recovery系统一样，需要刷个预刷机系统不死uboot。<br><a href="http://www.elecfans.com/dianzichangshi/20171211600608_a.html">不死uboot使用教程 - 全文</a><br>上面有一篇关于uboot的使用教程，和针对newifi的刷机教程。<br>因为买回来的时候已经是刷好uboot的了。所以，并没有实际尝试过，只能云尝试一波。</p>
<h2 id="Pandorabox"><a href="#Pandorabox" class="headerlink" title="Pandorabox"></a>Pandorabox</h2><p><a href="https://www.right.com.cn/forum/thread-361922-1-1.html">K2P A1 A2 路由器刷机教程 最详细教程，适合新手！</a><br>然后就是PandoraBox的刷机了，首先肯定是各种备份，把uboot中能备份的组件都备份了。然后选择固件上传，开刷就好。<br>刷机记得选择的是公版。<br>默认用户名密码<code>root</code>和<code>admin</code></p>
<h2 id="LEDE"><a href="#LEDE" class="headerlink" title="LEDE"></a>LEDE</h2><p><a href="http://firmware.koolshare.cn/LEDE_X64_fw867/">koolshare Lede X64 Nuc</a><br>在上面这个链接可以下载到适用于Vmware的LEDE镜像<br>默认密码<code>koolshare</code></p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="配置上网"><a href="#配置上网" class="headerlink" title="配置上网"></a>配置上网</h2><h3 id="路由器配置"><a href="#路由器配置" class="headerlink" title="路由器配置"></a>路由器配置</h3><p>刷好之后，应该可以通过路由器ip访问到uhttpd搭载的luci界面。<br>默认的WAN口连接方式是DHCP客户端，如果网线可以直接使用DHCP获取ip地址上网，就不需要配置。<br>我在学校就需要通过WIFI桥接的方式来联网。<br>在网络————无线中选择扫描，选择要连接的WIFI，输入密码。分配WAN防火墙。一路下一步就可以完成。这种方式相当于WIFI接入WAN口，套了一层NAT。但可以所有设备公用这一个IP地址的网络。所以，接下来要解决的就是让路由器像手机一样认证学校WIFI。<br>学校WIFI其实就是一个网页，通过抓包可以看到学校WIFI认证的URL，访问这个URL就可以认证。这样也就绕过了网页中的只允许手机设备认证的限制。<br>除了当路由器用，也可以当交换机用，只需要关闭DHCP服务，所有的设备都接入LAN口就好。</p>
<h3 id="虚拟机配置"><a href="#虚拟机配置" class="headerlink" title="虚拟机配置"></a>虚拟机配置</h3><p>虚拟机因为有显示器和默认路由器的原因，需要自己配置网络<br><code>vi /etc/config/network</code>中配置静态ip桥接接入宿主主机网络。这个口为LAN口<br>单一LAN口还需要配置网关和DNS</p>
<h2 id="SSH管理"><a href="#SSH管理" class="headerlink" title="SSH管理"></a>SSH管理</h2><p>在系统——管理中可以设置SSH管理方式，修改密码，添加密钥。</p>
<h2 id="酷软中心"><a href="#酷软中心" class="headerlink" title="酷软中心"></a>酷软中心</h2><p>这好像是个asp的动态网页，加上虚拟机强大的性能，完美的图像化，傻瓜都可以配置。<br>关键字<code>koolss</code></p>
<h3 id="虚拟机做旁路由"><a href="#虚拟机做旁路由" class="headerlink" title="虚拟机做旁路由"></a>虚拟机做旁路由</h3><p>这是比较麻烦的事情，因为要做旁路由，简单的说，虚拟机桥接物理网络，配置好虚拟机IP地址，然后需要走旁路由的机子，手动配置网关和DNS。如果拥有局域网中的网关权限，那还可以更自由话的更改DHCP服务器，相关配置。<br>只要做到所有往内网外的报全部转到旁路由，由旁路由转发即可。</p>
<h2 id="软件包"><a href="#软件包" class="headerlink" title="软件包"></a>软件包</h2><p>OP(OpenWrt)的可玩性在于丰富的软件包，以及类linux的Shell。<br>OP使用opkg包管理器，一个类似于apt的包管理器。可以通过shell或者luci界面安装，安装luci应用可以直接过滤luci的包。自动解决依赖。</p>
<h3 id="shadowsocksR-plus"><a href="#shadowsocksR-plus" class="headerlink" title="shadowsocksR plus+"></a>shadowsocksR plus+</h3><p>在路由器上直接配置就好了，1904版本支持多节点轮换，当主节点挂了，可以自动切换结点。路由方式等各种功能还是比较全的。</p>
<h3 id="FRP内网穿透"><a href="#FRP内网穿透" class="headerlink" title="FRP内网穿透"></a>FRP内网穿透</h3><p>frp的路由器版本，也可以直接用作者github上编译的路由器版本，那就没有luci界面可用了。</p>
<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>解决多WAN上网的问题。<br>除了可以单个设备认证wifi热点上网，还可以实现多个设备认证WiFi上网。通过k2p的两个无线网卡，可以分别接入学校的wifi，然后做MAC地址伪装，在从不同的网络接口发出认证包，结合负载均衡(mwan3)就可以实现多WAN上网。目前我在用的就是这种形式(10M+5M)<br>mwan3配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">config rule &#x27;login1&#x27;</span><br><span class="line">	option dest_ip &#x27;10.0.0.0/16&#x27;</span><br><span class="line">	option sticky &#x27;0&#x27;</span><br><span class="line">	option proto &#x27;all&#x27;</span><br><span class="line">	option use_policy &#x27;wwan1_only&#x27;</span><br><span class="line">	option src_ip &#x27;192.168.1.100&#x27;</span><br><span class="line"></span><br><span class="line">config rule &#x27;login&#x27;</span><br><span class="line">	option dest_ip &#x27;10.0.0.0/16&#x27;</span><br><span class="line">	option sticky &#x27;0&#x27;</span><br><span class="line">	option proto &#x27;all&#x27;</span><br><span class="line">	option use_policy &#x27;wwan_only&#x27;</span><br><span class="line">	option src_ip &#x27;192.168.1.1&#x27;</span><br><span class="line"></span><br><span class="line">config rule &#x27;vpn&#x27;</span><br><span class="line">	option dest_ip &#x27;10.1.0.0/16&#x27;</span><br><span class="line">	option proto &#x27;all&#x27;</span><br><span class="line">	option sticky &#x27;0&#x27;</span><br><span class="line">	option use_policy &#x27;wwan1_only&#x27;</span><br><span class="line"></span><br><span class="line">config rule &#x27;https&#x27;</span><br><span class="line">	option sticky &#x27;1&#x27;</span><br><span class="line">	option dest_port &#x27;443&#x27;</span><br><span class="line">	option proto &#x27;tcp&#x27;</span><br><span class="line">	option use_policy &#x27;wwan1_only&#x27;</span><br><span class="line"></span><br><span class="line">config rule &#x27;default_rule&#x27;</span><br><span class="line">	option dest_ip &#x27;0.0.0.0/0&#x27;</span><br><span class="line">	option proto &#x27;all&#x27;</span><br><span class="line">	option sticky &#x27;0&#x27;</span><br><span class="line">	option use_policy &#x27;wwan1_only&#x27;</span><br><span class="line"></span><br><span class="line">config policy &#x27;balanced&#x27;</span><br><span class="line">	option last_resort &#x27;default&#x27;</span><br><span class="line">	list use_member &#x27;wwan1_m1_w1&#x27;</span><br><span class="line">	list use_member &#x27;wwan_m1_w1&#x27;</span><br><span class="line"></span><br><span class="line">config interface &#x27;wwan1&#x27;</span><br><span class="line">	option enabled &#x27;1&#x27;</span><br><span class="line">	option family &#x27;ipv4&#x27;</span><br><span class="line">	option count &#x27;1&#x27;</span><br><span class="line">	option size &#x27;56&#x27;</span><br><span class="line">	option timeout &#x27;2&#x27;</span><br><span class="line">	option interval &#x27;5&#x27;</span><br><span class="line">	option failure_interval &#x27;5&#x27;</span><br><span class="line">	option recovery_interval &#x27;5&#x27;</span><br><span class="line">	option flush_conntrack &#x27;never&#x27;</span><br><span class="line">	option reliability &#x27;1&#x27;</span><br><span class="line">	list track_ip &#x27;10.0.10.11&#x27;</span><br><span class="line">	option down &#x27;5&#x27;</span><br><span class="line">	option up &#x27;1&#x27;</span><br><span class="line"></span><br><span class="line">config interface &#x27;wwan&#x27;</span><br><span class="line">	option enabled &#x27;1&#x27;</span><br><span class="line">	option family &#x27;ipv4&#x27;</span><br><span class="line">	option count &#x27;1&#x27;</span><br><span class="line">	option size &#x27;56&#x27;</span><br><span class="line">	option timeout &#x27;2&#x27;</span><br><span class="line">	option interval &#x27;5&#x27;</span><br><span class="line">	option failure_interval &#x27;5&#x27;</span><br><span class="line">	option recovery_interval &#x27;5&#x27;</span><br><span class="line">	option flush_conntrack &#x27;never&#x27;</span><br><span class="line">	option reliability &#x27;1&#x27;</span><br><span class="line">	list track_ip &#x27;10.0.10.11&#x27;</span><br><span class="line">	option down &#x27;5&#x27;</span><br><span class="line">	option up &#x27;1&#x27;</span><br><span class="line"></span><br><span class="line">config member &#x27;wwan1_m1_w1&#x27;</span><br><span class="line">	option interface &#x27;wwan1&#x27;</span><br><span class="line">	option metric &#x27;1&#x27;</span><br><span class="line">	option weight &#x27;1&#x27;</span><br><span class="line"></span><br><span class="line">config member &#x27;wwan_m1_w1&#x27;</span><br><span class="line">	option interface &#x27;wwan&#x27;</span><br><span class="line">	option metric &#x27;1&#x27;</span><br><span class="line">	option weight &#x27;1&#x27;</span><br><span class="line"></span><br><span class="line">config policy &#x27;wwan_only&#x27;</span><br><span class="line">	list use_member &#x27;wwan_m1_w1&#x27;</span><br><span class="line">	option last_resort &#x27;default&#x27;</span><br><span class="line"></span><br><span class="line">config policy &#x27;wwan1_only&#x27;</span><br><span class="line">	list use_member &#x27;wwan1_m1_w1&#x27;</span><br><span class="line">	option last_resort &#x27;default&#x27;</span><br></pre></td></tr></table></figure>

<h1 id="校园网认证"><a href="#校园网认证" class="headerlink" title="校园网认证"></a>校园网认证</h1><p>这是我写的校园网认证用的shell脚本。<br>这个脚本有指定从那个接口发包，拿去用时，要自己修改一下。<br>auth.sh</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#依赖：curl,wget,network.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#account=180021107080</span></span><br><span class="line">loginurl=<span class="string">&quot;http://10.0.21.23/wifi.jhtml?loginurl&amp;userid=180021104890&amp;ip=10.0.15.102:8080&amp;unicom=1&amp;username=&amp;password=&quot;</span></span><br><span class="line">logouturl=<span class="string">&quot;http://10.0.15.102:8080/portal/entrance/http_logout.jsp?language=Chinese&quot;</span></span><br><span class="line">urlfilename=<span class="string">&quot;/root/0.txt&quot;</span></span><br><span class="line">loginfilename=<span class="string">&quot;/root/login.txt&quot;</span></span><br><span class="line">logoutfilename=<span class="string">&quot;/root/logout.txt&quot;</span></span><br><span class="line">networkfilename=<span class="string">&quot;/root/network.sh&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">login</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">#获取认证链接</span></span><br><span class="line">	<span class="built_in">echo</span> -e <span class="string">&#x27;获取认证链接过程：&#x27;</span></span><br><span class="line">	/usr/bin/curl --interface apclix0 -m 5 <span class="variable">$loginurl</span> -o <span class="variable">$urlfilename</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">#读取并显示认证链接信息</span></span><br><span class="line">	str=$(<span class="built_in">cat</span> /root/0.txt)</span><br><span class="line">	<span class="built_in">echo</span> -e <span class="string">&#x27;\n认证原始链接：&#x27;</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="variable">$str</span></span><br><span class="line">	<span class="built_in">echo</span> -e <span class="string">&#x27;认证处理后链接：&#x27;</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="variable">$&#123;str:21:197&#125;</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> $(<span class="built_in">seq</span> 1 5); <span class="keyword">do</span></span><br><span class="line">		<span class="comment">#访问认证链接</span></span><br><span class="line">		<span class="built_in">echo</span> -e <span class="string">&#x27;认证过程：&#x27;</span></span><br><span class="line">		/usr/bin/wget --bind-address=10.3.20.249 --header=<span class="string">&quot;Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3&quot;</span> --header=<span class="string">&quot;Accept-Encoding: gzip, deflate&quot;</span> --header=<span class="string">&quot;Accept-Language: zh-CN,zh;q=0.9,zh-TW;q=0.8&quot;</span> -U <span class="string">&quot;Mozilla/5.0 (Linux; U; Android 2.2.1; en-us; Nexus One Build/FRG83) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1&quot;</span> -O <span class="variable">$loginfilename</span> <span class="string">&quot;<span class="variable">$&#123;str:21:197&#125;</span>&quot;</span></span><br><span class="line">		<span class="comment">#/usr/bin/curl --interface apcli0 --header &quot;Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3&quot; --header &quot;Accept-Encoding: gzip, deflate&quot; --header &quot;Accept-Language: zh-CN,zh;q=0.9,zh-TW;q=0.8&quot; -A &quot;Mozilla/5.0 (Linux; U; Android 2.2.1; en-us; Nexus One Build/FRG83) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1&quot; -o $loginfilename &quot;$&#123;str:21:193&#125;&quot;</span></span><br><span class="line">		<span class="comment">#获取认证返回信息文件的大小</span></span><br><span class="line">		size=$(<span class="built_in">ls</span> -l <span class="variable">$loginfilename</span> | awk <span class="string">&#x27;&#123;print $5&#125;&#x27;</span>)</span><br><span class="line">		<span class="built_in">echo</span> -e <span class="string">&#x27;认证结果文件大小：&#x27;</span></span><br><span class="line">		<span class="built_in">echo</span> <span class="variable">$size</span></span><br><span class="line">		<span class="comment">#显示认证返回信息</span></span><br><span class="line">		str1=$(<span class="built_in">cat</span> <span class="variable">$loginfilename</span>)</span><br><span class="line">		<span class="built_in">echo</span> -e <span class="string">&#x27;认证返回信息：\n&#x27;</span></span><br><span class="line">		<span class="built_in">echo</span> <span class="variable">$str1</span></span><br><span class="line">		<span class="comment">#判断认证是否成功</span></span><br><span class="line">		<span class="keyword">if</span> [ <span class="variable">$size</span> = <span class="string">&quot;7&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">			<span class="built_in">break</span>;</span><br><span class="line">		<span class="keyword">fi</span></span><br><span class="line">	<span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">logout</span></span>()</span><br><span class="line">&#123;	</span><br><span class="line">	<span class="built_in">echo</span> -e <span class="string">&#x27;下线过程：&#x27;</span></span><br><span class="line">	/usr/bin/curl --interface apclix0 --header <span class="string">&quot;Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3&quot;</span> --header <span class="string">&quot;Accept-Encoding: gzip, deflate&quot;</span> --header <span class="string">&quot;Accept-Language: zh-CN,zh;q=0.9,zh-TW;q=0.8&quot;</span> -A <span class="string">&quot;Mozilla/5.0 (Linux; U; Android 2.2.1; en-us; Nexus One Build/FRG83) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1&quot;</span> -o <span class="variable">$logoutfilename</span> <span class="variable">$logouturl</span></span><br><span class="line">	<span class="built_in">echo</span> -e <span class="string">&#x27;下线结果：&#x27;</span></span><br><span class="line">	str=$(<span class="built_in">cat</span> <span class="variable">$logoutfilename</span>)</span><br><span class="line">	<span class="built_in">echo</span> <span class="variable">$str</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">relogin</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">	ash <span class="variable">$networkfilename</span> www.baidu.com</span><br><span class="line">	<span class="keyword">if</span> [ $? -eq 1 ]; <span class="keyword">then</span></span><br><span class="line">		login</span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">help</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&#x27;auth version: auth&#x27;</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&#x27;Describe: 校园网认证工具&#x27;</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&#x27;Useage：auth [command]&#x27;</span></span><br><span class="line">	<span class="built_in">echo</span> -e <span class="string">&#x27;\nOptions:&#x27;</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&#x27; login			: 校园网认证&#x27;</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&#x27; logout			: 校园网下线&#x27;</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&#x27; relogin		: 校园网检测断线并重连，与crontab搭配使用&#x27;</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&#x27; help			: 显示本帮助信息&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$1</span> ]; <span class="keyword">then</span> </span><br><span class="line">	<span class="built_in">help</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$1</span> = <span class="string">&quot;help&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">	<span class="built_in">help</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$1</span> = <span class="string">&quot;login&quot;</span> ]; <span class="keyword">then</span> </span><br><span class="line">	login</span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$1</span> = <span class="string">&quot;logout&quot;</span> ]; <span class="keyword">then</span> </span><br><span class="line">	<span class="built_in">logout</span> </span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$1</span> = <span class="string">&quot;relogin&quot;</span> ]; <span class="keyword">then</span> </span><br><span class="line">	relogin </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;无效的参数&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#wget --header=&quot;Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3&quot; --header=&quot;Accept-Encoding: gzip, deflate&quot; --header=&quot;Accept-Language: zh-CN,zh;q=0.9,zh-TW;q=0.8&quot; -U &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36&quot; -O 0.txt &#x27;http://blxx.zhbit.com/wifi.jhtml?loginurl&amp;userid=180021104890&amp;ip=10.0.15.102:8080&amp;unicom=0&amp;username=&amp;password=&#x27;</span></span><br><span class="line"><span class="comment">#blxx.zhbit.com</span></span><br><span class="line"><span class="comment">#/usr/bin/wget --bind-address=10.3.44.59 --header=&quot;Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3&quot; --header=&quot;Accept-Encoding: gzip, deflate&quot; --header=&quot;Accept-Language: zh-CN,zh;q=0.9,zh-TW;q=0.8&quot; -U &quot;Mozilla/5.0 (Linux; U; Android 2.2.1; en-us; Nexus One Build/FRG83) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1&quot; -O $logoutfilename $logouturl</span></span><br></pre></td></tr></table></figure>
<p>network.sh</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#检测网络连接</span></span><br><span class="line"><span class="comment">#依赖：httping</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">httptest</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">	httping -c 2 -t 1 <span class="variable">$1</span> &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">	<span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">		<span class="built_in">echo</span> success</span><br><span class="line">		<span class="built_in">return</span> 0</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">echo</span> failed</span><br><span class="line">		<span class="built_in">return</span> 1</span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">pingtest</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">	ping -W 2 -c 2  <span class="variable">$1</span> &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">	<span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">		<span class="built_in">echo</span> success</span><br><span class="line">		<span class="built_in">return</span> 0</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">echo</span> failed</span><br><span class="line">		<span class="built_in">return</span> 1</span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$1</span> ]; <span class="keyword">then</span> </span><br><span class="line">	<span class="built_in">echo</span> -n <span class="string">&#x27;校园dns测试.........&#x27;</span></span><br><span class="line">	pingtest 10.0.10.11</span><br><span class="line">	<span class="built_in">echo</span> -n <span class="string">&#x27;校园官网测试.........&#x27;</span></span><br><span class="line">	httptest www.bitzh.edu.cn</span><br><span class="line">	<span class="built_in">echo</span> -n <span class="string">&#x27;Baidu测试.........&#x27;</span></span><br><span class="line">	pingtest www.baidu.com</span><br><span class="line">	<span class="built_in">echo</span> -n <span class="string">&#x27;google测试.........&#x27;</span></span><br><span class="line">	httptest www.google.com</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="built_in">echo</span> -n <span class="variable">$1</span><span class="string">&#x27; test......&#x27;</span></span><br><span class="line">	pingtest <span class="variable">$1</span></span><br><span class="line">	<span class="comment">#echo $?</span></span><br><span class="line">	<span class="built_in">exit</span> $?</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>与corntab结合可以实现定时自动认证，corntab+auth.sh relogin可以实现轮询检测是否断网，从而重新认证。<br>对于我来说一般不会掉认证。但是因为学校的WIFI晚上1点会有使用时段限制，所以每天一大早就会掉认证，这就需要每天一大早，给他自动认证一发。<br>corntab中使用的执行语句</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/root/auth.sh relogin &gt; /root/auth.log 2&gt;&amp;1  &amp;</span><br></pre></td></tr></table></figure>
<p>修改rc.local可以添加路由器启动时执行的语句<br>因为rc.local执行的时候网络还没初始化好，所以要延迟执行语句,我设置的是1min，相对来说比较合适。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sleep</span> 60 &amp;&amp; /root/auth.sh relogin &gt; /root/auth.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure>
<h1 id="LED灯开关"><a href="#LED灯开关" class="headerlink" title="LED灯开关"></a>LED灯开关</h1><p>鉴于晚上LED灯刺眼，所以使用脚本开关<br>关灯脚本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">ls</span> /sys/class/leds`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">cd</span> /sys/class/leds</span><br><span class="line">  <span class="built_in">cd</span> <span class="variable">$i</span></span><br><span class="line">  <span class="built_in">echo</span> 0 &gt; brightness</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>开灯脚本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/etc/init.d/led start</span><br></pre></td></tr></table></figure>
<p>然后弄一个crontab就好了</p>
]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Road</title>
    <url>/2015/Road/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a><strong>Description</strong></h2><p>给你一棵有N个结点的数。这N个结点都有一个权值为$C[i]$。<br>询问你两个结点u、v，在这两个结点的最短路径上，选取两个点i、j，且i靠近结点u，j靠近结点v。让你计算$Max(c[j]-c[i],0)$</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><h2 id="输入第一行有一个整数N-1≤n≤50000-接下来有N-行，每行一个整数Ci-1≤Ci≤50000-再接下来有N-1-行，每行两个整数x-y-1≤x-y≤50000-，表示x-和y-之间有一条边。接下来有一个整数M，表示有M-个询问。然后M-行，每行两个整数，x-y-1≤x-y≤50000-询问-Max-c-j-c-i-0-Output"><a href="#输入第一行有一个整数N-1≤n≤50000-接下来有N-行，每行一个整数Ci-1≤Ci≤50000-再接下来有N-1-行，每行两个整数x-y-1≤x-y≤50000-，表示x-和y-之间有一条边。接下来有一个整数M，表示有M-个询问。然后M-行，每行两个整数，x-y-1≤x-y≤50000-询问-Max-c-j-c-i-0-Output" class="headerlink" title="输入第一行有一个整数N(1≤n≤50000)接下来有N 行，每行一个整数Ci(1≤Ci≤50000)再接下来有N-1 行，每行两个整数x,y(1≤x,y≤50000)，表示x 和y 之间有一条边。接下来有一个整数M，表示有M 个询问。然后M 行，每行两个整数，x,y(1≤x,y≤50000)询问$Max(c[j]-c[i],0)$Output"></a>输入第一行有一个整数N(1≤n≤50000)<br>接下来有N 行，每行一个整数Ci(1≤Ci≤50000)<br>再接下来有N-1 行，每行两个整数x,y(1≤x,y≤50000)，表示x 和y 之间有一条边。<br>接下来有一个整数M，表示有M 个询问。<br>然后M 行，每行两个整数，x,y(1≤x,y≤50000)询问$Max(c[j]-c[i],0)$<br><strong>Output</strong></h2><p>对于每次询问,输出对应最大值结果</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a><strong>Sample Input</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4 </span><br><span class="line">1 </span><br><span class="line">2 </span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">1 2</span><br><span class="line">1 4</span><br><span class="line">2 3</span><br><span class="line">3</span><br><span class="line">1 3</span><br><span class="line">3 1</span><br><span class="line">1 4</span><br></pre></td></tr></table></figure>

<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a><strong>Sample Output</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">0</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<h2 id="Data-Constraint"><a href="#Data-Constraint" class="headerlink" title="Data Constraint"></a><strong>Data Constraint</strong></h2><p>对于30%的数据, 1≤N,M≤100<br>对于60%的数据，1≤N,M≤1000<br>对于100%的数据，1≤N,M≤50000</p>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a><strong>Analysis</strong></h2><p>因为是一棵树，所以任意两点的最短路径是唯一的。<br><strong>1°30%　＆＆　60％的数据</strong></p>
<ul>
<li><p>对于每一个询问我们可以O(N)的扫一遍整副图，直到找到终点v。并记录下此时经过路径的结点。然后在O(3*N)的扫一遍得到从结点u到结点i的最小值$(\sum_{i&#x3D;u}^v A[i] &#x3D; Min(C[i]))$，以及从结点i到结点v的最大值$(\sum_{i&#x3D;v}^u B[i] &#x3D; Max(C[i]))$，最后只需要每一个结点对应扫一遍就行了计算最大值即可。$(\sum_{i&#x3D;u}^v Ans &#x3D; Max(B[i]-A[i]))$。这样做的时间复杂度就是$O（MN）$。</p>
</li>
<li><p>还有一种是这种算法的改进。<br>就是充分利用树的特点，先dfs预处理一遍所有结点到根节点的深度，在一步步向上跳。直到调到他们的LCA。后续的答案计算和前面一样。时间复杂度虽然也是$O（MN）$，可是当数据是随机生成的时候很有可能会优化到$O(2<em>M</em>log(N))$。</p>
</li>
</ul>
<p>详情请见代码1……</p>
<hr>
<p><strong>2°100％的数据</strong><br>这种涉及到路径的问题肯定会与LCA有关，LCA最快的在线做法就是倍增。<br>但是倍增在计算是需要合并两个块，所以我们可以考虑一下，怎样合并两个块。<br>对于一个块就是一个有顺序的结点集合，它需要存放四个值，即：</p>
<ol>
<li>块中所有结点的最小值 (buy)</li>
<li>块中所有结点的最大值 (sell)</li>
<li>先最小值后最大值的差的绝对值的最大值(Max(bs))</li>
<li>先最大值后最小值的差的绝对值的最大值(Min(sb))</li>
</ol>
<hr>
<p>我们发现当维护了这四个值后我们就可以进行块合并操作了。<br>假设要合并的块分别为A和B，合并后的块为C。</p>
<ol>
<li>$C.buy &#x3D; Min(A.buy,B.buy)$</li>
<li>$C.sell &#x3D; Max(A.sell,B.sell)$</li>
<li>$C.bs &#x3D; Max(A.bs,B.bs,B.sell-A.buy)$</li>
<li>$C.sb &#x3D; Max(A.sb,B.sb,A.sell-B.buy)$</li>
</ol>
<h2 id="然后倍增的到LCA后我们只需要知道-sum-i-u-LCA-的块与-sum-i-v-LCA-的块合并后即可知道答案。同理我们也可以用tarjan离线LCA的方法来解决这个问题，这样时间复杂度就是-O（N）-。详情请见代码2……-下面说一下具体的程序实现的小问题对于离线的tarjan算法，因为用到了并查集，所以我们可以对每一个节点，维护它向上的块，维护的大小取决于当前并查集的大小，这样就能完成从-sum-i-u-LCA-的块维护，对于另一边我们可以在-u-v-的LCA上打一个标记，当tarjan遍历回到了LCA后。在进行合并。可以对照这篇博客中的图看一看：http-blog-csdn-net-hnust-xiehonghao-article-details-9109295-Code"><a href="#然后倍增的到LCA后我们只需要知道-sum-i-u-LCA-的块与-sum-i-v-LCA-的块合并后即可知道答案。同理我们也可以用tarjan离线LCA的方法来解决这个问题，这样时间复杂度就是-O（N）-。详情请见代码2……-下面说一下具体的程序实现的小问题对于离线的tarjan算法，因为用到了并查集，所以我们可以对每一个节点，维护它向上的块，维护的大小取决于当前并查集的大小，这样就能完成从-sum-i-u-LCA-的块维护，对于另一边我们可以在-u-v-的LCA上打一个标记，当tarjan遍历回到了LCA后。在进行合并。可以对照这篇博客中的图看一看：http-blog-csdn-net-hnust-xiehonghao-article-details-9109295-Code" class="headerlink" title="然后倍增的到LCA后我们只需要知道$\sum_{i&#x3D;u}^{LCA}$的块与$\sum_{i&#x3D;v}^{LCA}$的块合并后即可知道答案。同理我们也可以用tarjan离线LCA的方法来解决这个问题，这样时间复杂度就是$O（N）$。详情请见代码2……****下面说一下具体的程序实现的小问题对于离线的tarjan算法，因为用到了并查集，所以我们可以对每一个节点，维护它向上的块，维护的大小取决于当前并查集的大小，这样就能完成从$\sum_{i&#x3D;u}^{LCA}$的块维护，对于另一边我们可以在(u,v)的LCA上打一个标记，当tarjan遍历回到了LCA后。在进行合并。可以对照这篇博客中的图看一看：http://blog.csdn.net/hnust_xiehonghao/article/details/9109295****Code"></a>然后倍增的到LCA后我们只需要知道$\sum_{i&#x3D;u}^{LCA}$的块与$\sum_{i&#x3D;v}^{LCA}$的块合并后即可知道答案。<br>同理我们也可以用tarjan离线LCA的方法来解决这个问题，这样时间复杂度就是$O（N）$。<br>详情请见代码2……<br>****<br><strong>下面说一下具体的程序实现的小问题</strong><br>对于离线的tarjan算法，因为用到了并查集，所以我们可以对每一个节点，维护它向上的块，维护的大小取决于当前并查集的大小，这样就能完成从$\sum_{i&#x3D;u}^{LCA}$的块维护，对于另一边我们可以在(u,v)的LCA上打一个标记，当tarjan遍历回到了LCA后。在进行合并。<br>可以对照这篇博客中的图看一看：<a href="http://blog.csdn.net/hnust_xiehonghao/article/details/9109295">http://blog.csdn.net/hnust_xiehonghao/article/details/9109295</a><br>****<br><strong>Code</strong></h2><p>代码1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uses	math;</span><br><span class="line">const	maxn=50002;</span><br><span class="line">type	node=record</span><br><span class="line">		y,next:longint;</span><br><span class="line">	end;</span><br><span class="line">var	i,j,k,m,n,tot,x,y,ans:longint;</span><br><span class="line">	v,e,dep,fa:array[1..maxn] of longint;</span><br><span class="line">	h:array[1..2*maxn] of node;</span><br><span class="line">	a,a1,a2,b,c:array[0..maxn] of longint;</span><br><span class="line">	flag:array[1..maxn] of boolean;</span><br><span class="line">procedure add(x,y:longint);</span><br><span class="line">begin</span><br><span class="line">	inc(tot);</span><br><span class="line">	h[tot].y:=y;</span><br><span class="line">	h[tot].next:=e[x];</span><br><span class="line">	e[x]:=tot;</span><br><span class="line">end;</span><br><span class="line">procedure dfs(x:longint);</span><br><span class="line">var	i:longint;</span><br><span class="line">begin</span><br><span class="line">	if flag[x] then exit;</span><br><span class="line">	flag[x]:=true;</span><br><span class="line">	i:=e[x];</span><br><span class="line">	while i&lt;&gt;0 do begin</span><br><span class="line">		if flag[h[i].y] then begin</span><br><span class="line">			i:=h[i].next;</span><br><span class="line">			continue;</span><br><span class="line">		end;</span><br><span class="line">		dep[h[i].y]:=dep[x]+1;</span><br><span class="line">		fa[h[i].y]:=x;</span><br><span class="line">		dfs(h[i].y);</span><br><span class="line">		i:=h[i].next;</span><br><span class="line">	end;</span><br><span class="line">end;</span><br><span class="line">procedure up(var x:longint;y:longint);</span><br><span class="line">begin</span><br><span class="line">	if odd(y) then begin</span><br><span class="line">		inc(a1[0]);</span><br><span class="line">		a1[a1[0]]:=x;</span><br><span class="line">	end else begin</span><br><span class="line">		inc(a2[0]);</span><br><span class="line">		a2[a2[0]]:=x;</span><br><span class="line">	end;</span><br><span class="line">	x:=fa[x];</span><br><span class="line">end;</span><br><span class="line">procedure link;</span><br><span class="line">var	i:longint;</span><br><span class="line">begin</span><br><span class="line">	for i:=1 to a1[0] do a[i]:=a1[i];</span><br><span class="line">	a[0]:=a1[0];</span><br><span class="line">	for i:=a2[0] downto 1 do begin</span><br><span class="line">		inc(a[0]);</span><br><span class="line">		a[a[0]]:=a2[i];</span><br><span class="line">	end;</span><br><span class="line">end;</span><br><span class="line">procedure work(x,y:longint);</span><br><span class="line">var	i:longint;</span><br><span class="line">begin</span><br><span class="line">	a1[0]:=0;a2[0]:=0;ans:=0;</span><br><span class="line">	while dep[x]&gt;dep[y] do up(x,1);</span><br><span class="line">	while dep[x]&lt;dep[y] do up(y,2);</span><br><span class="line">	while x&lt;&gt;y do begin</span><br><span class="line">		up(x,1);up(y,2);</span><br><span class="line">	end;</span><br><span class="line">	inc(a1[0]);</span><br><span class="line">	a1[a1[0]]:=x;</span><br><span class="line">	link;</span><br><span class="line">	b[0]:=1000000007;c[a[0]+1]:=0;</span><br><span class="line">	for i:=1 to a[0] do b[i]:=min(b[i-1],v[a[i]]);</span><br><span class="line">	for i:=a[0] downto 1 do c[i]:=max(c[i+1],v[a[i]]);</span><br><span class="line">	for i:=1 to a[0] do ans:=max(ans,c[i]-b[i]);</span><br><span class="line">	&#123;</span><br><span class="line">	for i:=1 to a[0] do begin</span><br><span class="line">		for j:=i+1 to a[0] do begin</span><br><span class="line">			ans:=max(ans,v[a[j]]-v[a[i]]);</span><br><span class="line">		end;</span><br><span class="line">	end;</span><br><span class="line">	&#125;</span><br><span class="line">end;</span><br><span class="line">begin</span><br><span class="line">	//assign(input,&#x27;1230.in&#x27;);reset(input);</span><br><span class="line">	//assign(output,&#x27;1230.out&#x27;);rewrite(output);</span><br><span class="line"></span><br><span class="line">	readln(n);</span><br><span class="line">	for i:=1 to n do read(v[i]);</span><br><span class="line">	for i:=1 to n-1 do begin</span><br><span class="line">		readln(x,y);</span><br><span class="line">		add(x,y);</span><br><span class="line">		add(y,x);</span><br><span class="line">	end;</span><br><span class="line">	dep[1]:=1;fa[1]:=0;</span><br><span class="line">	dfs(1);</span><br><span class="line">	readln(m);</span><br><span class="line">	for i:=1 to m do begin</span><br><span class="line">		readln(x,y);</span><br><span class="line">		work(x,y);</span><br><span class="line">		writeln(ans);</span><br><span class="line">	end;</span><br><span class="line">end.</span><br></pre></td></tr></table></figure>

<hr>
<p>代码2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int N = 50000+5,M = N*3;</span><br><span class="line"></span><br><span class="line">struct node</span><br><span class="line">&#123;</span><br><span class="line">	int fa,buy,sell,bs,sb;</span><br><span class="line">	node (int A=0,int B=0,int C=0,int D=0,int E=0)</span><br><span class="line">	&#123;</span><br><span class="line">		fa = A,buy = B,sell = C,bs = D,sb = E;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; f[N];</span><br><span class="line"></span><br><span class="line">struct Edge</span><br><span class="line">&#123;</span><br><span class="line">	int y,next;</span><br><span class="line">&#125; h[3][M];</span><br><span class="line"></span><br><span class="line">int e[3][N],tot[3],b[N][2],ans[N],a[N];</span><br><span class="line">int n,m;</span><br><span class="line">bool vis[N];</span><br><span class="line"></span><br><span class="line">void add(int x,int y,int kind)</span><br><span class="line">&#123;</span><br><span class="line">	h[kind][++ tot[kind]].y = y;</span><br><span class="line">	h[kind][tot[kind]].next = e[kind][x];</span><br><span class="line">	e[kind][x] = tot[kind];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node gf(int x)</span><br><span class="line">&#123;</span><br><span class="line">	node t;</span><br><span class="line">	if (f[x].fa != x)</span><br><span class="line">	&#123;</span><br><span class="line">		t = gf(f[x].fa);</span><br><span class="line">		f[x] = node(t.fa,min(f[x].buy,t.buy),max(f[x].sell,t.sell),max(t.sell-f[x].buy,max(f[x].bs,t.bs)),max(f[x].sell-t.buy,max(f[x].sb,t.sb)));</span><br><span class="line">	&#125;</span><br><span class="line">	return f[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void tarjan(int x,int fa)</span><br><span class="line">&#123;</span><br><span class="line">	vis[x] = 1;</span><br><span class="line">	for (int i=e[0][x];i;i=h[0][i].next)</span><br><span class="line">	&#123;</span><br><span class="line">		int y = h[0][i].y;</span><br><span class="line">		if (y==fa) continue; </span><br><span class="line">		tarjan(y,x);</span><br><span class="line">		f[y].fa = x;</span><br><span class="line">	&#125;</span><br><span class="line">	for (int i=e[1][x];i;i=h[1][i].next)</span><br><span class="line">	&#123;</span><br><span class="line">		int j = h[1][i].y,y = b[j][b[j][0] == x];//Υµ½Αν»µγ</span><br><span class="line">		if (!vis[y]) continue;</span><br><span class="line">		if (gf(y).fa != x) </span><br><span class="line">			add(f[y].fa,j,2);</span><br><span class="line">	&#125;</span><br><span class="line">	for (int i=e[2][x];i;i = h[2][i].next)</span><br><span class="line">	&#123;</span><br><span class="line">		int j=h[2][i].y,x=b[j][0],y=b[j][1];</span><br><span class="line">		gf(x),gf(y);</span><br><span class="line">		ans[j] = max(ans[j],f[x].bs);</span><br><span class="line">		ans[j] = max(ans[j],f[y].sb);</span><br><span class="line">		ans[j] = max(ans[j],f[y].sell-f[x].buy);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	//freopen(&quot;1230.in&quot;,&quot;r&quot;,stdin);</span><br><span class="line">	//freopen(&quot;1230.out&quot;,&quot;w&quot;,stdout);</span><br><span class="line"></span><br><span class="line">	scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">	for (int i=1;i&lt;=n;i ++)</span><br><span class="line">	&#123;</span><br><span class="line">		scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">		f[i] = node(i,a[i],a[i],0,0);</span><br><span class="line">	&#125;</span><br><span class="line">	for (int i=1;i&lt;n;i ++)</span><br><span class="line">	&#123;</span><br><span class="line">		int x,y;</span><br><span class="line">		scanf(&quot;%d%d&quot;,&amp;x,&amp;y);</span><br><span class="line">		add(x,y,0),add(y,x,0);</span><br><span class="line">	&#125;</span><br><span class="line">	scanf(&quot;%d&quot;,&amp;m);</span><br><span class="line">	for (int i=1;i&lt;=m;i ++)</span><br><span class="line">	&#123;</span><br><span class="line">		scanf(&quot;%d%d&quot;,&amp;b[i][0],&amp;b[i][1]);</span><br><span class="line">		add(b[i][0],i,1);add(b[i][1],i,1);</span><br><span class="line">	&#125;</span><br><span class="line">	tarjan(1,0);</span><br><span class="line">	for (int i=1;i&lt;=m;i ++) printf(&quot;%d\n&quot;,ans[i]);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>信息学</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>SAMSUNG Galaxy SⅡ玩机系列</title>
    <url>/2018/SAMSUNG%20Galaxy%20S%E2%85%A1%E7%8E%A9%E6%9C%BA%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一次偶然的机会，翻出来了这部古董机。仔细研究了一下，发现这部当年的旗舰机并没有先前想的那样不堪。遂将我研究后的经验写下。</p>
<h1 id="手机来源"><a href="#手机来源" class="headerlink" title="手机来源"></a>手机来源</h1><p>作为家里第一部智能机，印象深刻。奠定了我对安卓机整体的初步认知。在此之前，我曾用过一段时间的HTC Desire S。感觉还不错，玩跑跑卡丁车，植物大战僵尸，水果忍者等早期游戏，体验都很棒。而且那部机刷了MIUI4，用起来相当的顺手。算是我最早接触的安卓机。也是因此，我产生了对MIUI的信仰。<br>言归正传，让我们来一起看看这部当年的三星机皇。出厂版本是Android 2.3。但实际到手时应该已经是Android 4.0.3。<del>(我记得我没有升级过系统)</del>,操作系统是TouchWiz，期间有过软件更新的提醒。但当时的我不知道是干啥子的，就没去更新系统。<br>在当年那就是<strong>屏幕大，性能强。厚度薄。</strong><br>买的时候应该是13年，用了1年左右，因为发热严重，续航尿崩，就提前结束了它的使用。后来，我妈换新机，这部手机就归我了。但我也受不了这部机子的高热，时刻感觉会爆炸。<del>(如同Note7一般)</del>随后买了红米1S，弃用之。<br>直到今年(2017)，因为种种原因，不得不再次启用它做备用机。但如今的我，已经有相当好的使用<del>(调教)</del>经验。只要不是硬件硬伤，有相应的第三方软件支持，我就能带这部机重回流畅省电。</p>
<h1 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h1><h2 id="为什么会如此的高耗电，续航崩？"><a href="#为什么会如此的高耗电，续航崩？" class="headerlink" title="为什么会如此的高耗电，续航崩？"></a>为什么会如此的高耗电，续航崩？</h2><p>首先很容易猜测到是CPU的问题。<br>所以，我打开了CPU-Z，能很明显的看到两个cpu的频率居高不下。这不可能啊，我啥软件都没开啊！打开后台应用进程，好像也没什么问题，最后想到开发者模式似乎可以看各个应用的占用率。<br>于是乎打开开发者模式中的显示CPU使用情况，就很容易发现360安全卫士一直占据第一的位置。当时，我从未想过360会这么耗CPU。</p>
<h2 id="干掉360"><a href="#干掉360" class="headerlink" title="干掉360"></a>干掉360</h2><p>刚开始的时候，想到可以直接在360中退出，但依旧会有进程残留在后台。最后直接在系统设置应用中将360后台服务结束了。<br>可能是我关了360自动启动的服务，重启后360就再也没有唤醒过了。<br>当然，你可能会问，为什么不直接卸载掉360呢？因为当年智障的我，开启了防卸载功能。360注册了设备管理器，然后我又忘记了解除防卸载的密码。我印象中记得这个功能对系统重置也是很有效的，总之挺强大的。<br>最后只有双清的办法，且慢，我还有很多应用没有备份完。主要还是因为我担心双清会把我内部存储的数据销毁，事实上，就算是双清也会引起问题。(后面会提到)</p>
<h1 id="尝试刷机"><a href="#尝试刷机" class="headerlink" title="尝试刷机"></a>尝试刷机</h1><p>刷机首要条件，是要有刷机包。突然发现i9100至今还有第三方官方维护系统更新。wow！不愧是三星旗舰机。因为一直找不到三星官方固件下载站点，所以在网上胡乱找了一些刷机包。但还好，这些刷机包都挺小的，300M左右，比起主流机型动辄1G+好太多。<br>因为是这部机初次刷机，所以应当循序渐进慢慢来，先刷官方包升级到最新版，在以安卓版本为顺序刷第三方包来玩。</p>
<h1 id="基于官方4-1-2"><a href="#基于官方4-1-2" class="headerlink" title="基于官方4.1.2"></a>基于官方4.1.2</h1><p>官方Touchwiz只维护到4.1.2，这是一个十分尴尬的版本号。目前大部分软件最新版最低支持Android KitKat 4.4。更有少部分冷门软件或国外软件要求Android lollipop 5.0。所以，要有较好的软件体验，需要想办法升级安卓版本。但为了防止机子变砖，不敢过早的刷非官方版本的ROM包。</p>
<h2 id="刷机遇阻"><a href="#刷机遇阻" class="headerlink" title="刷机遇阻"></a>刷机遇阻</h2><p>想要卡刷，首先要有好用的卡刷工具即RECOVERY，第三方rec我首先想到twrp，去官网查询，发现有相应的版本支持。但是只提供了img镜像，可以使用更低版本的twrp刷入，或者线刷，但是我没有电脑，不能线刷。我在网上也找不到低版本的twrp卡刷包。<br>所以只好用官方rec进行刷机了。除了这个基于官方的修改包，我还下载了MIUI包和cm11等其他包，防止某个包因刷机失败而进不了系统。<br>开始卡刷，双清之后重新开机，发现主屏幕一直崩溃，我当时想有可能是我卸载了一些系统软件导致系统的不稳定，又或者是360的锅。总之，如果没有可用的包刷入系统，这部手机就真成砖了。<br>重新回到rec，一个个刷机包试，试到最后一个MIUI包的时候终于成功刷入了。其他的包都因为没有官方签名，而过不了验证。既然如此那就先体验一下MIUI吧！MIUI体验请看下一章。<br>MIUI用了一段时间就又开始做死，想用回官方包。这时我重启发现官方rec替换成CWM了。而CWM是不会进行签名验证，所以成功上了官改的车。</p>
<h2 id="使用体验"><a href="#使用体验" class="headerlink" title="使用体验"></a>使用体验</h2><p>最新的官改包没有三星自家以及Google自家的云服务，只有最基础的系统软件。大概一页纸的自带app，用Kingroot搞定内置推广，发现好多了。续航不差，流畅度也不差，很稳定。还有一些偏原生的好用的功能。没有之前的WiFi开关bug。我认为可以长久的使用。<br>如果安卓版本再高一点我可能就会长期使用这个ROM了，奈何版本太低，很多软件用不了。所以踏上了Android4.4追寻之路</p>
<h1 id="MIUI-V5"><a href="#MIUI-V5" class="headerlink" title="MIUI V5"></a>MIUI V5</h1><p>MIUI官网对这部机型有两位开发者提供的ROM包，均已停更。版本死在MIUI V5。但两个底层安卓版本不同，一个是4.4，一个是4.1.2。</p>
<h2 id="Android-4-4版本MIUI"><a href="#Android-4-4版本MIUI" class="headerlink" title="Android 4.4版本MIUI"></a>Android 4.4版本MIUI</h2><p>意外的通过官方rec刷入的MIUI。当时只下了这一版本。因为它是最新的。</p>
<h2 id="使用体验-1"><a href="#使用体验-1" class="headerlink" title="使用体验"></a>使用体验</h2><p>卡的不能自理，系统流畅性还行，但是动画时间长。旧版MIUI基本都是靠动画时间来给人一种流畅的感觉。同样也会有大面积的发热现象。</p>
<h1 id="CM11"><a href="#CM11" class="headerlink" title="CM11"></a>CM11</h1><p>经过我的多方寻找，找到了鼎鼎大名的CM刷机包，这款刷机包，用了之后顿时舒服多了。我的Android版本终于上了4.4，不会遇到连知乎都装不了的问题了。</p>
<h2 id="使用体验-2"><a href="#使用体验-2" class="headerlink" title="使用体验"></a>使用体验</h2><p>如同前面所说，飞一般的流畅，而且还能开启ART模式。但是，随便使用现在最新款的应用，都容易造成CPU高频，继而带来高发热和耗电。因此，只要注意使用旧版的软件，就好了。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这次重新研究这部手机，使我对三星有了大的改观。真实的感受到了三星强大的硬件实力。也感受到国产流氓软件对三星的毒害。事实证明不是三星硬件实力不行，而是国产软件太流氓。如果三星的价格能再亲民一点，界面能在好看易用，我可能就会选择三星了！</p>
]]></content>
      <categories>
        <category>个人</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH 密钥一键配置脚本</title>
    <url>/2020/SSH-%E5%AF%86%E9%92%A5%E4%B8%80%E9%94%AE%E9%85%8D%E7%BD%AE%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
      <categories>
        <category>互联网</category>
        <category>转载</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>link</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu18.04与Win10双系统</title>
    <url>/2018/Ubuntu18-04%E4%B8%8EWin10%E5%8F%8C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="搭建Ubuntu-18-04与Win10双系统运行环境"><a href="#搭建Ubuntu-18-04与Win10双系统运行环境" class="headerlink" title="搭建Ubuntu 18.04与Win10双系统运行环境"></a>搭建Ubuntu 18.04与Win10双系统运行环境</h1><p>目标主机：XPS 13 9360<br>目标引导模式：UEFI</p>
<h1 id="安装系统大致步骤"><a href="#安装系统大致步骤" class="headerlink" title="安装系统大致步骤"></a>安装系统大致步骤</h1><ol>
<li><pre><code>下载ubuntu 18.04.1 LTS镜像
</code></pre>
<p> <a href="https://www.ubuntu.com/download/desktop">Ubuntu官方下载页面</a></p>
</li>
<li><pre><code>准备4G以上空间U盘，并使用Rufus烧录
</code></pre>
<p> <a href="https://rufus.ie/en_IE.html">Rufus官方下载页面</a></p>
</li>
<li><p>Rufus烧录使用默认配置，先选择U盘，选择好镜像，按要求先使用推荐的烧录方式。</p>
</li>
<li><p>重启电脑，狂按F12进入一次启动页面，选择U盘启动。</p>
</li>
<li><p>先<code>try ubuntu</code>，试试当前版本的Ubuntu与机子的硬件兼容性如何，如果有不兼容的建议换Ubuntu版本，不然找驱动可能要你命。</p>
</li>
<li><p><code>Install Ubuntu</code>，一路正常安装，进入分区页面时，根据需要分区。至少需要两个区<code>/</code>与<code>swap</code>。启动引导安装位置有两种选择，一种是选择整个硬盘，会覆盖Windows Boot Mannager。另一种是选择分区<code>/boot</code>，装好Ubuntu后重启进入windows使用EasyBCD添加Ubuntu开机引导。<br> <img data-src="http://5b0988e595225.cdn.sohucs.com/images/20180628/d33a504fbbd242929da6a969dacded1a.jpeg" alt="分区方式表"></p>
</li>
<li><p>一切顺利的话，重启进入Ubuntu系统。能见到熟悉的Gnome界面</p>
</li>
</ol>
<h1 id="安装Ubuntu下软件"><a href="#安装Ubuntu下软件" class="headerlink" title="安装Ubuntu下软件"></a>安装Ubuntu下软件</h1><p>我选择的是最小安装，所以不带播放器，office等插件。</p>
<h2 id="Ubuntu安装软件的方式"><a href="#Ubuntu安装软件的方式" class="headerlink" title="Ubuntu安装软件的方式"></a>Ubuntu安装软件的方式</h2><p>Ubuntu&#x2F;Debian系都是用deb后缀的安装包，可以直接从软件的官网上下载，deb后缀的包。<br>需要注意的是分清系统是32位还是64位，i386代表32位,amd64代表64位。Linux发行版中的软件绝大部分都有64位版。如果我记得没错的话，不打开选项64位系统无法安装32位。<br><code>apt-get</code> <code>apt</code> 这两个命令基本一致可以用于更新&#x2F;搜索&#x2F;安装&#x2F;卸载Debian系的软件，并能自动解决依赖问题，是安装的首选方式。对于软件来源可以直接修改Sources.list或添加ppa。<br><a href="https://www.cnblogs.com/zlslch/p/6860229.html">Ubuntu14.04和16.04官方默认更新源sources.list和第三方源推荐（干货！）</a><br><code>dpkg -i</code> 安装本地的deb包，命令无法直接解决依赖问题，需要再次使用<code>sudo apt install -f</code>解决软件的依赖问题。<br><code>snap install</code> snap工具安装法<br><code>pip3</code> <code>pip</code> python相关的软件安装命令</p>
<h1 id="优化工具"><a href="#优化工具" class="headerlink" title="优化工具"></a>优化工具</h1><p>Gnome Tweak Tool <a href="https://jingyan.baidu.com/article/86f4a73ebd6c9437d7526963.html">参考链接</a></p>
<h1 id="播放器"><a href="#播放器" class="headerlink" title="播放器"></a>播放器</h1><p>SMplayer<br><a href="https://music.163.com/#/download">网易云音乐</a></p>
<h1 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h1><p><a href="https://pinyin.sogou.com/linux/?r=pinyin">搜狗输入法</a></p>
<h1 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h1><p><a href="https://jingyan.baidu.com/article/335530da98061b19cb41c31d.html">Google-chrome-stable</a><br><a href="https://jingyan.baidu.com/article/6b182309813095ba58e15915.html">flash</a></p>
<h1 id="办公软件"><a href="#办公软件" class="headerlink" title="办公软件"></a>办公软件</h1><p><a href="http://www.wps.cn/product/wpslinux/">wps office</a><br>字体问题<a href="https://www.cnblogs.com/EasonJim/p/7146587.html">解决方法</a></p>
<h1 id="编程工具-文本编辑器"><a href="#编程工具-文本编辑器" class="headerlink" title="编程工具&amp;文本编辑器"></a>编程工具&amp;文本编辑器</h1><p>git<br>g++<br>vim<br>fpc<br><a href="https://notepadqq.com/s/">notepadqq</a></p>
<h1 id="视频处理"><a href="#视频处理" class="headerlink" title="视频处理"></a>视频处理</h1><p>ffmpeg<br>x264<br><a href="https://www.linuxidc.com/Linux/2016-01/128039.htm">Aegisub</a></p>
<h1 id="Wine-deepin"><a href="#Wine-deepin" class="headerlink" title="Wine-deepin"></a>Wine-deepin</h1><p><a href="https://www.lulinux.com/archives/1319">2018年wine QQ最完美解决方案（多Linux发行版通过测试并稳定运行）</a><br>TIM<br>微信</p>
<h1 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h1><p><a href="https://blog.csdn.net/fengyulinde/article/details/78309314">uGet</a></p>
<h1 id="截图工具"><a href="#截图工具" class="headerlink" title="截图工具"></a>截图工具</h1><p>Shutter 建议在设置-键盘中设置快捷键命令：<code>shutter -s</code></p>
<h1 id="博客工具"><a href="#博客工具" class="headerlink" title="博客工具"></a>博客工具</h1><p>hexo</p>
<h1 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h1><p><a href="https://www.jianshu.com/p/0d37b22aabba">thefuck</a><br><a href="https://blog.csdn.net/tecn14/article/details/24489031/">indicator-sysmonitor</a> 状态栏网速监控工具</p>
<h1 id="相关软件的配置"><a href="#相关软件的配置" class="headerlink" title="相关软件的配置"></a>相关软件的配置</h1><p>gedit 首选项，插件看需求<br>notepadqq 配色 <a href="https://blog.csdn.net/dongzhiyu/article/details/61207022?utm_source=blogxgwz3">编译命令</a><br>gnome-tweak-tool 根据需求设置</p>
]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows服务使用记录</title>
    <url>/2019/Windows%E6%9C%8D%E5%8A%A1%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Windows防火墙"><a href="#Windows防火墙" class="headerlink" title="Windows防火墙"></a>Windows防火墙</h1><p>因为我比较菜，而Windows防火墙太过严苛，我一般是把windows防火墙关掉！但这样WIN10会一直发出警报，裸奔不够安全，建议还是上一个火绒，一切问题都解决了。<br>默认Win10是禁ICMP的，所以要去防火墙开例外。</p>
<h1 id="IIS服务器"><a href="#IIS服务器" class="headerlink" title="IIS服务器"></a>IIS服务器</h1><p>微软自家的软件，搭配使用效果更佳<br>首先进入控制面板——程序和功能——启用或关闭Windows功能——IIS管理控制台<br>根据需要选择搭建的互联网服务<br><a href="https://blog.csdn.net/qq_34610293/article/details/79210539">Win10开启FTP与配置（完整无错版）</a><br>根据需要设置虚拟目录<br><a href="https://blog.csdn.net/taotaox/article/details/69907885">iis搭建WEBDAV注意事项，（成功）</a></p>
<h1 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h1><p>使用小飞机，选项设置中允许来自局域网的连接，就能看到小飞机监听了所有接口的HTTP代理端口</p>
<h1 id="微软远程桌面"><a href="#微软远程桌面" class="headerlink" title="微软远程桌面"></a>微软远程桌面</h1><p>远程桌面需要专业版及以上版本的Win10，下载镜像是要注意！<br>此电脑——属性——高级系统设置——远程<br>RDP默认端口3389</p>
<h1 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h1><table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td><code>netstat -ano</code></td>
<td>查看所有的端口监听情况</td>
</tr>
<tr>
<td><code>netstat -aon | findstr &quot;9050&quot;</code></td>
<td>查看指定端口的监听情况</td>
</tr>
<tr>
<td><code>netsh interface portproxy show all</code></td>
<td>查看所有的端口转发</td>
</tr>
<tr>
<td><code>netsh interface portproxy delete v4tov4 listenport=3340 listenaddress=10.1.1.110</code></td>
<td>删除指定的端口转发规则</td>
</tr>
<tr>
<td><code>netsh interface portproxy add v4tov4 listenaddress=192.168.222.145 listenport=15001 connectaddress=192.168.222.63 connectport=81</code></td>
<td>添加指定的端口转发规则</td>
</tr>
</tbody></table>
<h1 id="nssm"><a href="#nssm" class="headerlink" title="nssm"></a>nssm</h1><p>NSSM是一个服务封装程序，它可以将普通exe程序封装成服务，使之像windows服务一样运行。<br>有一些windows下的服务软件可能没有自带安装成系统服务的功能，这时候就可以使用nssm来实现。<br>下载地址：<a href="https://nssm.cc/download">https://nssm.cc/download</a></p>
]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>bzoj3732 Network</title>
    <url>/2015/bzoj3732-Network/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>题目来源<br><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3732">bzoj3732</a></p>
<h1 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h1><p>这题给的输入是一个无向连通图，说明图中会有环和一些树枝。对于一个询问在环上的两个点，有两条可以联通的道路。<br>一条中的边权最大值是整个环的最大值（舍弃），<br>另一条的边权最大值是整个环的次大值（需要）。<br>所以只有次大值才是我们想要的！因此，我们想到了最小生成树，将这些环中的最大边权值所属的边删掉。<br>最小生成树的求法就是，先让边权从小到大排序，然后依次添加并用并查集维护即可。（Kruskal算法）</p>
<p>所以，现在问题就转化成在一棵树中，求任意两点A，B路径上边权的最大值。</p>
<p>此时我们就需要求LCA了，并维护两点到LCA边权的最大值，在做LCA的时候使用倍增算法，再配上RMQ问题中的st算法即可解决问题。</p>
<h1 id="code"><a href="#code" class="headerlink" title="code"></a>code</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">30000</span><span class="number">+100</span>,M=<span class="number">30000</span><span class="number">+100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;<span class="type">int</span> x,y,d;&#125;c[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node1</span>&#123;<span class="type">int</span> y,v,next;&#125;h[<span class="number">2</span>*M];</span><br><span class="line"><span class="type">int</span> n,m,k,u,v,tot,e[N],fw[N][<span class="number">16</span>],fv[N][<span class="number">16</span>],fa[N],dep[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span> </span>&#123;<span class="keyword">return</span> a.d&lt;b.d;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gf</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (fa[x] == x) <span class="keyword">return</span> x;</span><br><span class="line">	<span class="keyword">return</span> fa[x] = <span class="built_in">gf</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	tot ++;</span><br><span class="line">	h[tot].y = y;</span><br><span class="line">	h[tot].v = z;</span><br><span class="line">	h[tot].next=e[x];</span><br><span class="line">	e[x] = tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x ,<span class="type">int</span> fat)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = e[x];i;i = h[i].next)</span><br><span class="line">		<span class="keyword">if</span> (h[i].y!=fat)</span><br><span class="line">		&#123;</span><br><span class="line">			dep[h[i].y] = dep[x]<span class="number">+1</span>;</span><br><span class="line">			<span class="built_in">dfs</span>(h[i].y,x);</span><br><span class="line">			fv[h[i].y][<span class="number">0</span>] = h[i].v;</span><br><span class="line">			fw[h[i].y][<span class="number">0</span>] = x;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">move</span><span class="params">(<span class="type">int</span> &amp;x,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i,t=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (dep[fw[x][<span class="number">0</span>]]!=d)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>;dep[fw[x][i]]&gt;d;i++);</span><br><span class="line">		t = <span class="built_in">max</span>(t,fv[x][i<span class="number">-1</span>]);</span><br><span class="line">		x = fw[x][i<span class="number">-1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	t = <span class="built_in">max</span>(t,fv[x][<span class="number">0</span>]);</span><br><span class="line">	x = fw[x][<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i,t = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (dep[u]&gt;dep[v]) t = <span class="built_in">move</span>(u,dep[v]);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (dep[u]&lt;dep[v]) t = <span class="built_in">move</span>(v,dep[u]);</span><br><span class="line">	<span class="keyword">while</span> (fw[u][<span class="number">0</span>]!=fw[v][<span class="number">0</span>])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>;fw[u][i] != fw[v][i];i ++);</span><br><span class="line">		t = <span class="built_in">max</span>(t,<span class="built_in">max</span>(fv[u][i<span class="number">-1</span>],fv[v][i<span class="number">-1</span>]));</span><br><span class="line">		u = fw[u][i<span class="number">-1</span>];</span><br><span class="line">		v = fw[v][i<span class="number">-1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (u!=v)</span><br><span class="line">	t = <span class="built_in">max</span>(<span class="built_in">max</span>(fv[u][<span class="number">0</span>],fv[v][<span class="number">0</span>]),t);</span><br><span class="line">	<span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//freopen(&quot;1738.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i &lt;= m ; i ++)</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;c[i].x,&amp;c[i].y,&amp;c[i].d);</span><br><span class="line">	<span class="built_in">sort</span>(c<span class="number">+1</span>,c<span class="number">+1</span>+m,cmp);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span> ; i &lt;= n ; i ++) fa[i]=i;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span> ; i &lt;= m ; i ++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">gf</span>(c[i].x)!=<span class="built_in">gf</span>(c[i].y))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">add</span>(c[i].x,c[i].y,c[i].d);</span><br><span class="line">			<span class="built_in">add</span>(c[i].y,c[i].x,c[i].d);</span><br><span class="line">			fa[fa[c[i].x]] = fa[fa[c[i].y]];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	dep[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span> ; j &lt;= <span class="number">14</span>; j ++)</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span> ;i&lt;=n;i ++)</span><br><span class="line">	<span class="keyword">if</span> (fw[fw[i][j<span class="number">-1</span>]][j<span class="number">-1</span>] != <span class="number">0</span>)<span class="comment">//limit excepeted</span></span><br><span class="line">	&#123;</span><br><span class="line">		fw[i][j] = fw[fw[i][j<span class="number">-1</span>]][j<span class="number">-1</span>];</span><br><span class="line">		fv[i][j] = <span class="built_in">max</span>(fv[i][j<span class="number">-1</span>],fv[fw[i][j<span class="number">-1</span>]][j<span class="number">-1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span> ; i &lt;= k ; i ++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> u,v;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">lca</span>(u,v));</span><br><span class="line">	&#125;	</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p><a href="http://baike.baidu.com/link?url=0x-xezmCp5Fud_PyEPvp6gBHGzdU2tnG-6zEg42g5f6jL7QCCOygSbY8CwqnDalzqb9Ol-36JJJVrw2UBaN5x_#4_1">Kruskal算法</a><br><a href="http://www.tuicool.com/articles/N7jQV32">LCA 倍增算法</a><br><a href="http://www.cnblogs.com/Missa/archive/2012/10/01/2709686.html">RMQ st算法</a></p>
]]></content>
      <categories>
        <category>信息学</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>LCA</tag>
        <tag>RMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Wireguard小记</title>
    <url>/2020/Wireguard%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="研究原因"><a href="#研究原因" class="headerlink" title="研究原因"></a>研究原因</h1><p>我一直需要一个内网穿透的解决方案，将各个地方的内网组在一起，组一个大内网。在网上先是找到了这篇博客</p>
<blockquote>
<p><a href="https://anyisalin.github.io/2018/11/21/fast-flexible-nat-to-nat-vpn-wireguard/">通过 Wireguard 构建 NAT to NAT VPN</a><br>感觉到方案可行就开始着手了。</p>
</blockquote>
<h1 id="服务器选取"><a href="#服务器选取" class="headerlink" title="服务器选取"></a>服务器选取</h1><p>Wireguard只要求一方能够直连即可，就是说双方要有一方能主动发起并建立连接，另一方可以在NAT后。这样位于NAT后的主机也可通过位于公网的主机中转流量，从而实现内网穿透。<br>所以第一部是需要一台位于公网的主机。<br>在’kai’的推荐下，<del>主要是因为贫穷</del>选了一个国内的NAT VPS。国外服务器，Wireguard已被精准识别，也用不了。国内的NAT VPS，带宽大，价格便宜，适合做流量中转，可靠性一般，但对于我个人使用基本是够用的。<br>选的是一台东莞电信的NAT VPS，感觉像是个家宽，基本上IP一天一变。所以要用服务商给的域名去连接。这个动态IP也为后面的Wireguard连接埋了个坑。</p>
<h1 id="Wireguard软件安装"><a href="#Wireguard软件安装" class="headerlink" title="Wireguard软件安装"></a>Wireguard软件安装</h1><p>首先是建立隧道的双方都要安装Wireguard。安装Wireguard可以按照<a href="https://www.wireguard.com/">官网</a>教程操作。<br>Wireguard对于Linux支持较好，功能较全。目前用的Windows,Android端都有图形界面，也还可以。<br>在Ubuntu中，将上面的配置文件保存在’&#x2F;etc&#x2F;wireguard&#x2F;wg0.conf’后，使用<br><code>systemctl enable wg-quick@wg0</code><br><code>systemctl start wg-quick@wg0</code><br>就能把wireguard启动起来，并注册系统服务，下次开机自启动。<br>输入<code>wg</code>可以看到详细的信息。</p>
<h1 id="Wireguard软件配置"><a href="#Wireguard软件配置" class="headerlink" title="Wireguard软件配置"></a>Wireguard软件配置</h1><p>Wireguard的配置部分只有一个配置文件<code>wg0.conf</code><br>这个配置文件形如：</p>
<figure class="highlight ini"><figcaption><span>wg0.conf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">[Interface]</span></span><br><span class="line"><span class="attr">PrivateKey</span> = &#123;PrivateKey&#125;</span><br><span class="line"><span class="attr">ListenPort</span> = <span class="number">7890</span>               <span class="comment">#监听端口</span></span><br><span class="line"><span class="attr">Address</span> = <span class="number">192.168</span>.<span class="number">88.102</span>/<span class="number">24</span>     <span class="comment">#本机VPN接入地址</span></span><br><span class="line"><span class="comment">#发往其他网络策略的自动NAT策略</span></span><br><span class="line"><span class="attr">PostUp</span> = iptables -A FORWARD -i wg0 -j ACCEPT<span class="comment">; iptables -A FORWARD -o wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o ens160 -j MASQUERADE</span></span><br><span class="line"><span class="attr">PostDown</span> = iptables -D FORWARD -i wg0 -j ACCEPT<span class="comment">; iptables -D FORWARD -o wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o ens160 -j MASQUERADE</span></span><br><span class="line"><span class="attr">DNS</span> = <span class="number">192.168</span>.<span class="number">88.4</span>              <span class="comment">#设置全局DNS</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Peer]</span></span><br><span class="line"><span class="attr">PublicKey</span> = &#123;PublicKey&#125;</span><br><span class="line"><span class="attr">PresharedKey</span> = &#123;PresharedKey&#125;</span><br><span class="line"><span class="attr">AllowedIPs</span> = <span class="number">0.0</span>.<span class="number">0.0</span>/<span class="number">0</span>          <span class="comment">#设置本机通过WireGuard的路由，并将符合路由的包发往此对端主机</span></span><br><span class="line"><span class="attr">Endpoint</span> = <span class="number">192.168</span>.<span class="number">11.219</span>:<span class="number">51820</span> <span class="comment">#对端UDP socket，本机可直连的地址</span></span><br><span class="line"><span class="attr">PersistentKeepalive</span> = <span class="number">25</span>        <span class="comment">#位于NAT后的机子，为了保持隧道可用，而设置的心跳包间隔时间</span></span><br></pre></td></tr></table></figure>
<p>在各个需要接入Wireguard网络中的主机填写好相应的配置文件后，各个主机间的三层互通就做好了。<br>要保证数据正常传输，最重要的时通信两端的<code>AllowedIPs</code>的配置，保证数据包有去有回。可以通过<code>ping</code>测试连通性。使用<code>tcpdump</code>与<code>Wireshark</code>抓包，观察数据包流向。</p>
<h1 id="部署过程"><a href="#部署过程" class="headerlink" title="部署过程"></a>部署过程</h1><h2 id="传统星型拓扑组网方案"><a href="#传统星型拓扑组网方案" class="headerlink" title="传统星型拓扑组网方案"></a>传统星型拓扑组网方案</h2><p>如果想让流量往Wireguard以外的网络(公网)发送，在linux上需要用<code>iptables</code>添加相关的SNAT的命令。在WireGuard中可以用<code>PostUp``PostDown</code>字段在程序运行结束时执行脚本。<br>其他所有位于NAT后的机器直连接入位于公网的服务器，并设置相应的<code>AllowedIPs = 0.0.0.0/0</code>，这样所有数据包都从这个公网服务器发出。这就是传统的VPN组件方案。</p>
<h2 id="NAT2NAT星型拓扑组网方案"><a href="#NAT2NAT星型拓扑组网方案" class="headerlink" title="NAT2NAT星型拓扑组网方案"></a>NAT2NAT星型拓扑组网方案</h2><p>有时不仅仅是想访问内网的某台设备，而是想让内网的地址也能走隧道传输。或者有多个地域的内网要打通，就需要本方案了。<br>根据<a href="https://anyisalin.github.io/2018/11/21/fast-flexible-nat-to-nat-vpn-wireguard/">通过 Wireguard 构建 NAT to NAT VPN</a>教程操作基本就可以了。<br>先根据<code>传统星型拓扑组网方案</code>调试好，然后在想要进行内网代理的机子上做SNAT处理，处理方式跟上面一样，添加好相应的路由就行。对于Windows需要开启路由转发。根据<a href="https://www.henrychang.ca/how-to-setup-wireguard-vpn-server-on-windows/">How to Setup Wireguard VPN Server On Windows</a>教程操作即可。对于OpenWrt可以在网络——防火墙——流量规则——SNAT中添加wg到lan的地址改写即可，注意配置路由。</p>
<h1 id="目前方案"><a href="#目前方案" class="headerlink" title="目前方案"></a>目前方案</h1><p>同样是采用星型的拓扑组网方案，作为服务器的是位于学校的服务器，同时用frp将端口映射到公网，便于公网接入。大多数时候直接校园网接入即可。这时只需要在这台服务器和家里的OpenWrt路由上做SNAT就可任意访问校内和家里资源。对于公网的数据还是从校内的这台服务器中转发出。在这台校内服务器上可以做一个透明代理，就能实现神奇的功能。</p>
<h1 id="密钥管理"><a href="#密钥管理" class="headerlink" title="密钥管理"></a>密钥管理</h1><h1 id="wg-gen-web"><a href="#wg-gen-web" class="headerlink" title="wg-gen-web"></a><a href="https://icloudnative.io/posts/configure-wireguard-using-wg-gen-web/">wg-gen-web</a></h1><p>凑合着用一下，此类软件都不太灵活。</p>
]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>cc软件集</title>
    <url>/2012/cc%E8%BD%AF%E4%BB%B6%E9%9B%86/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>cc软件集最新版本Version 3.1<br>最新安装包地址<a href="https://github.com/lyz05/cc_software_set_pkg/releases/tag/3.1">https://github.com/lyz05/cc_software_set_pkg/releases/tag/3.1</a><br>历史安装包地址<a href="https://github.com/lyz05/cc_software_set_pkg/releases">https://github.com/lyz05/cc_software_set_pkg/releases</a><br>目前没有升级补丁或升级包</p>
<p>如有疑问，请发送邮件至:<a href="mailto:&#98;&#x6c;&#111;&#x67;&#64;&#x6c;&#x79;&#122;&#x30;&#53;&#46;&#99;&#x6e;">lyz05</a></p>
]]></content>
      <categories>
        <category>易语言</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>china daily摘录</title>
    <url>/2018/china%20daily%E6%91%98%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="FIRST"><a href="#FIRST" class="headerlink" title="FIRST"></a>FIRST</h1><h2 id="Titles：Dorms’-face-recognition-gets-thumbs-up-for-convenience"><a href="#Titles：Dorms’-face-recognition-gets-thumbs-up-for-convenience" class="headerlink" title="Titles：Dorms’ face recognition gets thumbs-up for convenience"></a>Titles：Dorms’ face recognition gets thumbs-up for convenience</h2><h2 id="Words"><a href="#Words" class="headerlink" title="Words"></a>Words</h2><table>
<thead>
<tr>
<th>word</th>
<th>translate</th>
<th>word</th>
<th>translate</th>
</tr>
</thead>
<tbody><tr>
<td>face-recognition</td>
<td>人脸识别</td>
<td>assuring</td>
<td>保证</td>
</tr>
<tr>
<td>swiping</td>
<td>刷(磁卡)</td>
<td>freshman</td>
<td>（大学）一年级新生</td>
</tr>
<tr>
<td>director</td>
<td>主任</td>
<td>mugshot</td>
<td>（俚）脸面照片</td>
</tr>
<tr>
<td>checkup</td>
<td>检验</td>
<td>compile</td>
<td>编译，编写</td>
</tr>
<tr>
<td>authorities</td>
<td>当局，官方</td>
<td>adopt</td>
<td>采用</td>
</tr>
<tr>
<td>canteens</td>
<td>小饭馆</td>
<td>promoting</td>
<td>促进</td>
</tr>
<tr>
<td>keep track</td>
<td>注意动向</td>
<td>attendance</td>
<td>出勤</td>
</tr>
<tr>
<td>thumbs-up</td>
<td>竖起大拇指</td>
<td>management</td>
<td>管理部门</td>
</tr>
<tr>
<td>efficiency</td>
<td>效率</td>
<td>via</td>
<td>通过</td>
</tr>
<tr>
<td>luggage</td>
<td>行李</td>
<td>parcels</td>
<td>包裹</td>
</tr>
</tbody></table>
<h2 id="Sentence"><a href="#Sentence" class="headerlink" title="Sentence"></a>Sentence</h2><ol>
<li>   The system, officially put into operation on Sept 1, enables students to enter or exit their dormitories via facial scanning at the entrance, instead of swiping their electronic student ID.</li>
<li>   Ge Ruxiong, director of the Hangzhou Normal University Information Center, said the university had input all students’ mugshot photos and information into the face-recognition system before the new semester began.</li>
<li>   “In this way, when they arrive, they were immediately recognized by the checkup systems at the dormitory,” he said.</li>
<li>   Sun Kejia, a student, said the face-recognition system is very convenient.</li>
<li>   there is no need to be worried in case we lose or forget to carry our electronic student ID cards。</li>
</ol>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>人脸识别技术运用于大学宿舍和学生考勤，提高了通行效率，方便了学生日常生活。<br>face recognition technology is applied to college dormitories and students attendance, which improve efficiency and convenient student daily life.</p>
<h1 id="SECOND"><a href="#SECOND" class="headerlink" title="SECOND"></a>SECOND</h1><h2 id="Title-Shine-on-harvest-moon"><a href="#Title-Shine-on-harvest-moon" class="headerlink" title="Title: Shine on, harvest moon"></a>Title: Shine on, harvest moon</h2><h2 id="Words-1"><a href="#Words-1" class="headerlink" title="Words"></a>Words</h2><table>
<thead>
<tr>
<th>word</th>
<th>translate</th>
<th>word</th>
<th>translate</th>
</tr>
</thead>
<tbody><tr>
<td>Shine on, harvest moon</td>
<td>满月照人间</td>
<td>reunion</td>
<td>团聚</td>
</tr>
<tr>
<td>Intrinsically</td>
<td>内在的</td>
<td>resembles</td>
<td>类似</td>
</tr>
<tr>
<td>Academy</td>
<td>学院</td>
<td>customarily</td>
<td>通常</td>
</tr>
<tr>
<td>Flaky</td>
<td>薄片状的</td>
<td>pastry</td>
<td>糕点</td>
</tr>
<tr>
<td>Dense</td>
<td>密集的</td>
<td>consumption</td>
<td>消费</td>
</tr>
<tr>
<td>Repast</td>
<td>饭菜</td>
<td>historical</td>
<td>历史的</td>
</tr>
<tr>
<td>Transcends</td>
<td>超越</td>
<td>derived from</td>
<td>来源于</td>
</tr>
<tr>
<td>Preserved</td>
<td>保存</td>
<td>worship</td>
<td>崇拜</td>
</tr>
<tr>
<td>Incense</td>
<td>焚香</td>
<td>candlesticks</td>
<td>烛台</td>
</tr>
<tr>
<td>Altar</td>
<td>祭坛</td>
<td>tackle</td>
<td>着手处理</td>
</tr>
</tbody></table>
<h2 id="Sentence-1"><a href="#Sentence-1" class="headerlink" title="Sentence"></a>Sentence</h2><ol>
<li>   In Chinese belief, the roundness of the full moon, seen on the Mid-Autumn Day, means “togetherness.</li>
<li>   There are various mooncakes on the market, some are for home consumption, while others are expensively packaged to be given as gifts.</li>
<li>   The point of doing so is to show love and respect to relatives and friends.</li>
<li>   Chen Yannan, a native of Quanzhou in Southeast China’s Fujian province, who now works for a Beijing-based media firm, says she had to give up going home due to the long distance.</li>
<li>   Nowadays, more people in the cities tend to celebrate the festival with friends, dining out or taking short trips together.</li>
</ol>
<h2 id="Summary-1"><a href="#Summary-1" class="headerlink" title="Summary"></a>Summary</h2><p>主要介绍中秋节的历史渊源和传统，以及现代人庆祝中秋节的各种方式。<br>This article mainly introduces the history and tradition of the Mid Autumn Festival, and the ways in which modern people celebrate the Mid Autumn Festival.</p>
]]></content>
      <categories>
        <category>个人</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>收集</tag>
        <tag>英语</tag>
      </tags>
  </entry>
  <entry>
    <title>Hyperledger fabric学习与实践</title>
    <url>/2022/hyperledger-fabric%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在开始学习与实践之前，需要准备相关环境。<br>因为Github Codespaces的免费额度用满了，所以我选择了在Ubuntu22.04.1安装Hyperledger Fabric的开发环境。</p>
<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="所需工具版本"><a href="#所需工具版本" class="headerlink" title="所需工具版本"></a>所需工具版本</h2><p>Ubuntu 22.04.1<br>go version go1.19.3 linux&#x2F;amd64<br>fabric 2.4.7<br>docker 20.10.21<br>docker-compose version 1.29.2</p>
<h2 id="安装Go语言环境"><a href="#安装Go语言环境" class="headerlink" title="安装Go语言环境"></a>安装Go语言环境</h2><p>因为APT软件源中的Go版本较低，所以需要手动安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -O https://storage.googleapis.com/golang/go1.19.3.linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">sudo</span> tar -C /usr/local -xzf go1.19.3.linux-amd64.tar.gz</span><br><span class="line">vi ~/.profile</span><br><span class="line"><span class="built_in">source</span> ~/.profile</span><br></pre></td></tr></table></figure>
<p>在<code>~/.profile</code>文件后追加如下内容</p>
<figure class="highlight bash"><figcaption><span>~/.profile</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> GOROOT=/usr/local/go</span><br><span class="line"><span class="built_in">export</span> GOPATH=<span class="variable">$HOME</span>/go</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOPATH</span>/bin:<span class="variable">$GOROOT</span>/bin</span><br></pre></td></tr></table></figure>

<h2 id="安装Fabric样例、Docker镜像和二进制文件"><a href="#安装Fabric样例、Docker镜像和二进制文件" class="headerlink" title="安装Fabric样例、Docker镜像和二进制文件"></a>安装Fabric样例、Docker镜像和二进制文件</h2><p>your_github_userid：是你的github账号<br>$HOME&#x2F;go： 该目录是Go官方建议目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/go/src/github.com/&lt;your_github_userid&gt;</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span>/go/src/github.com/&lt;your_github_userid&gt;</span><br><span class="line">curl -sSLO https://raw.githubusercontent.com/hyperledger/fabric/main/scripts/install-fabric.sh &amp;&amp; <span class="built_in">chmod</span> +x install-fabric.sh</span><br><span class="line">./install-fabric.sh</span><br></pre></td></tr></table></figure>

<h1 id="使用Fabric的测试网络"><a href="#使用Fabric的测试网络" class="headerlink" title="使用Fabric的测试网络"></a>使用Fabric的测试网络</h1><p>这段命令用于启动Fabric测试网络，它会创建一个由两个对等节点和一个排序节点组成的Fabric网络。<br>启动完测试网络后需要我们创建通道并部署链码（智能合约）。<br>通道是用于划分每个节点的私有区域，每个通道都有自己的账本和账本的副本。<br>官网教程给的链码是一个简单的<a href="https://github.com/hyperledger/fabric-samples/tree/main/asset-transfer-basic">资产管理链码</a>。<br>在Fabric中，智能合约作为链码以软件包的形式部署在网络上。链码安装在组织的对等节点上，然后部署到某个通道，然后可以在该通道中用于认可交易和区块链账本交互。<br>deplyCC: 部署链码<br>-ccn: 链码名称<br>-ccp: 链码路径<br>-ccl: 链码语言(go (default), java, javascript, typescript)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> fabric-samples/test-network</span><br><span class="line">./network.sh down</span><br><span class="line">./network.sh up createChannel <span class="comment"># 启动网络并创建通道</span></span><br><span class="line">./network.sh deployCC -ccn basic -ccp ../asset-transfer-basic/chaincode-go -ccl go <span class="comment"># 部署链码</span></span><br></pre></td></tr></table></figure>
<h2 id="与网络交互"><a href="#与网络交互" class="headerlink" title="与网络交互"></a>与网络交互</h2><p>peer CLI:允许您调用已部署的智能合约，更新通道，或安装和部署新的智能合约。<br>如果已经在<a href="https://hyperledger-fabric.readthedocs.io/zh_CN/latest/install.html">安装示例、二进制和 Docker 镜像</a>中下载了二进制文件，就可以配置二进制文件与配置文件的环境变量。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PWD&#125;</span>/../bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> FABRIC_CFG_PATH=<span class="variable">$PWD</span>/../config/</span><br></pre></td></tr></table></figure>
<p>使用peer0.Org1身份登录网络进行操作<br>初始化账本<br>重置asset6所有者为Christopher</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Environment variables for Org1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> CORE_PEER_TLS_ENABLED=<span class="literal">true</span></span><br><span class="line"><span class="built_in">export</span> CORE_PEER_LOCALMSPID=<span class="string">&quot;Org1MSP&quot;</span></span><br><span class="line"><span class="built_in">export</span> CORE_PEER_TLS_ROOTCERT_FILE=<span class="variable">$&#123;PWD&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span><br><span class="line"><span class="built_in">export</span> CORE_PEER_MSPCONFIGPATH=<span class="variable">$&#123;PWD&#125;</span>/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span><br><span class="line"><span class="built_in">export</span> CORE_PEER_ADDRESS=localhost:7051</span><br><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile <span class="variable">$&#123;PWD&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n basic --peerAddresses localhost:7051 --tlsRootCertFiles <span class="variable">$&#123;PWD&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles <span class="variable">$&#123;PWD&#125;</span>/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c <span class="string">&#x27;&#123;&quot;function&quot;:&quot;InitLedger&quot;,&quot;Args&quot;:[]&#125;&#x27;</span></span><br><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile <span class="variable">$&#123;PWD&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n basic --peerAddresses localhost:7051 --tlsRootCertFiles <span class="variable">$&#123;PWD&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles <span class="variable">$&#123;PWD&#125;</span>/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c <span class="string">&#x27;&#123;&quot;function&quot;:&quot;TransferAsset&quot;,&quot;Args&quot;:[&quot;asset6&quot;,&quot;Christopher&quot;]&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>使用peer0.Org2身份登录网络进行操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Environment variables for Org2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> CORE_PEER_TLS_ENABLED=<span class="literal">true</span></span><br><span class="line"><span class="built_in">export</span> CORE_PEER_LOCALMSPID=<span class="string">&quot;Org2MSP&quot;</span></span><br><span class="line"><span class="built_in">export</span> CORE_PEER_TLS_ROOTCERT_FILE=<span class="variable">$&#123;PWD&#125;</span>/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br><span class="line"><span class="built_in">export</span> CORE_PEER_MSPCONFIGPATH=<span class="variable">$&#123;PWD&#125;</span>/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp</span><br><span class="line"><span class="built_in">export</span> CORE_PEER_ADDRESS=localhost:9051</span><br><span class="line">peer chaincode query -C mychannel -n basic -c <span class="string">&#x27;&#123;&quot;Args&quot;:[&quot;ReadAsset&quot;,&quot;asset6&quot;]&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="客制化"><a href="#客制化" class="headerlink" title="客制化"></a>客制化</h2><p>阅读asset-transfer-basic中chaincode的源码，可知有以下方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">InitLedger</span>(ctx)</span><br><span class="line"><span class="title class_">CreateAsset</span>(ctx, id, color, size, owner, appraisedValue)</span><br><span class="line"><span class="title class_">ReadAsset</span>(ctx, id)</span><br><span class="line"><span class="title class_">UpdateAsset</span>(ctx, id, color, size, owner, appraisedValue)</span><br><span class="line"><span class="title class_">DeleteAsset</span>(ctx, id)</span><br><span class="line"><span class="title class_">AssetExists</span>(ctx, id)</span><br><span class="line"><span class="title class_">TransferAsset</span>(ctx, id, newOwner)</span><br><span class="line"><span class="title class_">GetAllAssets</span>(ctx)</span><br></pre></td></tr></table></figure>
<p>因此可以使用peer CLI调用这些方法<br>对于查询请求使用：query，修改请求使用：invoke</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">peer chaincode query -C mychannel -n basic -c <span class="string">&#x27;&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;&#x27;</span> | jq</span><br><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile <span class="variable">$&#123;PWD&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n basic --peerAddresses localhost:7051 --tlsRootCertFiles <span class="variable">$&#123;PWD&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles <span class="variable">$&#123;PWD&#125;</span>/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c <span class="string">&#x27;&#123;&quot;function&quot;:&quot;CreateAsset&quot;,&quot;Args&quot;:[&quot;asset7&quot;,&quot;blue&quot;,&quot;5&quot;,&quot;Tom&quot;,&quot;35&quot;]&#125;&#x27;</span></span><br><span class="line">peer chaincode query -C mychannel -n basic -c <span class="string">&#x27;&#123;&quot;Args&quot;:[&quot;ReadAsset&quot;,&quot;asset7&quot;]&#125;&#x27;</span></span><br><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile <span class="variable">$&#123;PWD&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n basic --peerAddresses localhost:7051 --tlsRootCertFiles <span class="variable">$&#123;PWD&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles <span class="variable">$&#123;PWD&#125;</span>/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c <span class="string">&#x27;&#123;&quot;function&quot;:&quot;UpdateAsset&quot;,&quot;Args&quot;:[&quot;asset7&quot;,&quot;red&quot;,&quot;6&quot;,&quot;Tony&quot;,&quot;40&quot;]&#125;&#x27;</span></span><br><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile <span class="variable">$&#123;PWD&#125;</span>/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n basic --peerAddresses localhost:7051 --tlsRootCertFiles <span class="variable">$&#123;PWD&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles <span class="variable">$&#123;PWD&#125;</span>/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt -c <span class="string">&#x27;&#123;&quot;function&quot;:&quot;DeleteAsset&quot;,&quot;Args&quot;:[&quot;asset7&quot;]&#125;&#x27;</span></span><br><span class="line">peer chaincode query -C mychannel -n basic -c <span class="string">&#x27;&#123;&quot;Args&quot;:[&quot;AssetExists&quot;,&quot;asset7&quot;]&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="关停网路"><a href="#关停网路" class="headerlink" title="关停网路"></a>关停网路</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./network.sh down</span><br></pre></td></tr></table></figure>

<h1 id="编写你的第一个应用"><a href="#编写你的第一个应用" class="headerlink" title="编写你的第一个应用"></a>编写你的第一个应用</h1><p>启动网络</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> fabric-samples/fabcar</span><br><span class="line">./startFabric.sh javascript</span><br></pre></td></tr></table></figure>
<p>安装依赖</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cd javascript</span><br><span class="line">npm install</span><br><span class="line">ls</span><br></pre></td></tr></table></figure>
<h2 id="登记管理员用户"><a href="#登记管理员用户" class="headerlink" title="登记管理员用户"></a>登记管理员用户</h2><p>下边的部分执行和证书授权服务器通讯。你在运行下边的程序时，你会发现，打开一个新终端，并运行<code>docker logs -f ca_org1</code>来查看 CA 的日志流，会很有帮助。<br>我们登记一个 admin 管理员用户：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">node enrollAdmin.js</span><br></pre></td></tr></table></figure>
<p>注册和登记应用程序用户</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">node registerUser.js</span><br></pre></td></tr></table></figure>
<h2 id="查询账本"><a href="#查询账本" class="headerlink" title="查询账本"></a>查询账本</h2><p>现在，我们有了两个独立用户的身份—— admin 和 appUser ——它们可以被我们的应用程序使用。<br>首先，我们来运行我们的 query.js 程序来返回账本上所有汽车的侦听。这个程序使用我们的第二个身份——user1——来操作账本。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">node query.js</span><br></pre></td></tr></table></figure>
<h2 id="更新账本"><a href="#更新账本" class="headerlink" title="更新账本"></a>更新账本</h2><p><code>submitTransaction</code> 比 <code>evaluateTransaction</code> 更加复杂。除了跟一个单独的 peer 进行互动外，SDK 会将 <code>submitTransaction</code> 提案发送给在区块链网络中的每个需要的组织的 peer。其中的每个 peer 将会使用这个提案来执行被请求的智能合约，以此来产生一个建议的回复，它会为这个回复签名并将其返回给 SDK。<br>SDK 搜集所有签过名的交易反馈到一个单独的交易中，这个交易会被发送给排序节点。<br>排序节点从每个应用程序那里搜集并将交易排序，然后打包进一个交易的区块中。<br>接下来它会将这些区块分发给网络中的每个 peer，在那里每笔交易会被验证并提交。<br>最后，SDK 会被通知，这允许它能够将控制返回给应用程序。<br>在真实世界中的一个应用程序里，智能合约应该有一些访问控制逻辑。比如，只有某些有权限的用户能够创建新车，并且只有车辆的拥有者才能够将车辆交换给其他人。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://learnblockchain.cn/books/enterprise/01%20preface.html">企业级区块链实战教程</a><br><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/latest/install.html">安装示例、二进制和 Docker 镜像</a><br><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/latest/test_network.html">使用Fabric的测试网络</a><br><a href="https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/write_first_app.html">编写你的第一个应用</a></p>
<!-- 
# 论文初步想法
粤康码信息上BCOS链
澳门健康码信息上Fabric链
设计各自链上数据结构（根据现有的二维码上的信息设计）
链上组织机构：卫生局（上传疫苗、核酸信息）、公安局（上传身份证信息）
广东的粤康码依托粤省事，粤省事中需要人脸识别或微信支付密码来实名认证。
澳门的健康码，需要自行填写身份信息。
 -->]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>VPS使用记录</title>
    <url>/2019/vps%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一直以来都是用各种桌面客户端，没有体验过服务器是怎样的，想体验一波，发现国外便宜的VPS都挺贵的，主要是我没什么使用VPS的需求。但国内的学生机还是很便宜的10元&#x2F;月，就是宽带只有1M，买后证明带宽还是很吃紧的。本来是不会写这篇文章的，因为写文章太累。但是我发现我的技术水平不够，经常要推倒系统重来，所以就有了这篇文章。方便我快速查阅恢复服务。<br>体验了2-3周左右的阿里云之后，发现宽带实在是硬伤。再加上服务器处于国内，下载各种国外服务器上的资源都很慢。以及国内发布网站要备案等诸多因素。决定不再使用国内VPS服务器。<br>总的来说国内的VPS，除了延时，稳定性占优，以及1M10元&#x2F;月价格相对较香以外，没有其余优点。<br>然而过了一段时间后，我又来打脸我自己，我一咬牙又买了一台阿里云的轻量应用服务器。最后综合觉得还是用阿里云比较划算。一方面5M带宽也够我用，不够可以再加OSS，而且阿里云学生机配置给的比较够，再加上BGP网络。在中国，访问还是很稳定的。<br>经过去马来西亚国能大学测试发现，深圳阿里云在国外连接慢的想打人。</p>
<hr>
<h1 id="远程连接工具准备"><a href="#远程连接工具准备" class="headerlink" title="远程连接工具准备"></a>远程连接工具准备</h1><p>因为VPS都远在天涯海角，你不可能直接接触到，所以我们需要各种各样的远程工具。对于目标linux操作系统，最重要的就是使用终端，而想安全使用终端<code>ssh</code>必不可少。我个人是使用<code>git</code>自带的<code>Mingw</code>类linux系统中的ssh连接。现在改为<code>putty</code>，方便挂代理。然后还需要一个远程文件管理器，这里我推荐winSCP，支持协议多，速度快，兼容Windows各种操作。对于编辑器，推荐notepad++。</p>
<p>过了一段时间后，觉得putty太丑，winscp配合putty打开太麻烦，在<a href="https://github.com/kaiakz">Kaiak</a>的大力推荐下，尝试使用<code>MobaXterm</code>,发现是真香。<br><code>MobaXterm</code>支持格式各样的远程连接工具，本身的命令行界面就有一定的语法高亮，多标签页，用起来舒服。如果需要频繁操作终端的推荐使用。<br>后面尝试了下<code>VSC</code>的远程连接功能，它能够像在本地使用<code>VSC</code>一样完成各种操作。比较适合需要频繁修改服务器上文本文件的人使用。</p>
<h1 id="Ubuntu-18-04——阿里云"><a href="#Ubuntu-18-04——阿里云" class="headerlink" title="Ubuntu 18.04——阿里云"></a>Ubuntu 18.04——阿里云</h1><h2 id="配置系统"><a href="#配置系统" class="headerlink" title="配置系统"></a>配置系统</h2><p>因为一直以来我只用过Debian系的Linux操作系统，在体验桌面版Linux中又属Ubuntu软件多，所以直接上手Ubuntu，但网上挺多人使用CentOS作为服务器系统，CentOS毕竟是RedHat系的，稳定性方面应该要比Ubuntu好。如果只是想稳定跑服务，用CentOS没问题，新手还是推荐Ubuntu。<br>首先选择一台阿里云ECS实例安装好基本的操作系统Ubuntu 18.04，然后就是开机。<br>因为不知道阿里云的密钥是怎么用的，所以我是选择密码安装。后面可以使用密钥登陆，并关闭密码登陆，保证服务器安全。<br>为了方便，去安全组将所有的端口都开放。</p>
<h2 id="关闭阿里云安骑士"><a href="#关闭阿里云安骑士" class="headerlink" title="关闭阿里云安骑士"></a>关闭阿里云安骑士</h2><p>安骑士确实烦，整天提示我有异常登陆，然而这异常登陆全是我自己，这还叫什么异常！！<br>还总是发短信，是真的良心，实则推销自己的企业版，自动打补丁。<br><a href="https://blog.mimvp.com/article/24653.html">阿里云ECS关闭删除安骑士</a><br>核心代码</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget http://update.aegis.aliyun.com/download/uninstall.sh</span><br><span class="line">bash uninstall.sh</span><br><span class="line">wget http://update.aegis.aliyun.com/download/quartz_uninstall.sh</span><br><span class="line">bash quartz_uninstall.sh</span><br><span class="line"></span><br><span class="line">pkill aliyun-service</span><br><span class="line"><span class="built_in">rm</span> -rf /etc/init.d/agentwatch /usr/sbin/aliyun-service</span><br><span class="line"><span class="built_in">rm</span> -rf /usr/local/aegis*</span><br></pre></td></tr></table></figure>

<h2 id="ssh公钥设置"><a href="#ssh公钥设置" class="headerlink" title="ssh公钥设置"></a>ssh公钥设置</h2><p>现在已经可以ssh远程系统了。因为我们直接用密码登录比较麻烦，再加之会有被暴力破解密码的风险，建议使用密钥认证登录，要使用密钥登录，首先需要在服务器上放置你ssh远程所有设备的公钥。<br>某天，我装了Ubuntu18.04 server版，发现Ubuntu支持直接从Github上获取Github上保存的公钥。这操作非常的赞，这样就可以让我的所有远程设备都能轻轻松松的获取公钥。而且不需要我主动去维护公钥的一致性。<br>从以下地址获取公钥并保存</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget -O - https://github.com/lyz05.keys &gt;&gt; /root/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>
<p>把这些公钥一个一行放置在<code>~/.ssh/authorized_keys</code>，我没有使用<code>ssh-copy-id</code>的命令<br>进行添加。这样可以快速添加设备。<br>关于<code>ssh-copy-id</code>的用法<code>ssh-copy-id root@home999.cc</code></p>
<h2 id="修改终端命令行颜色"><a href="#修改终端命令行颜色" class="headerlink" title="修改终端命令行颜色"></a>修改终端命令行颜色</h2><p>默认的命令行的白字黑底，实在是太难分辨，所以修改配色，提升可读性是很有必要的。<br>在<code>~/.bashrc</code>中添加如下内容</p>
<figure class="highlight sh"><figcaption><span>.bashrc</span></figcaption><table><tr><td class="code"><pre><span class="line">PS1=<span class="string">&quot;<span class="variable">$&#123;debian_chroot:+($debian_chroot)&#125;</span>\[\e[1;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$&quot;</span></span><br><span class="line"><span class="built_in">export</span> PS1</span><br></pre></td></tr></table></figure>

<h2 id="修改系统主机名"><a href="#修改系统主机名" class="headerlink" title="修改系统主机名"></a>修改系统主机名</h2><p>修改<code>/etc/hostname</code>即可</p>
<h2 id="修改系统语言"><a href="#修改系统语言" class="headerlink" title="修改系统语言"></a>修改系统语言</h2><p><a href="https://blog.csdn.net/cnylsy/article/details/52474433">Ubuntu 14.04 英文SSH终端更改为中文显示</a></p>
<h2 id="使用xfce4-Xubuntu-桌面并用rdp远控"><a href="#使用xfce4-Xubuntu-桌面并用rdp远控" class="headerlink" title="使用xfce4(Xubuntu)桌面并用rdp远控"></a>使用xfce4(Xubuntu)桌面并用rdp远控</h2><p><a href="https://blog.csdn.net/qq_25556149/article/details/82216190">教程</a><br>然后就可以直接rdp远控了，ubuntu可以使用Remmina进行远控。<br>远控后我发现Terminal有一点小问题，以下是解决方案。<br><a href="https://zhidao.baidu.com/question/1770374646687303580.html">Ubuntu打开终端出错：failed to execute default terminal emulator（如图示） </a><br>因为我嫌Xubuntu自带的进程管理器太丑了，安装了gnome默认的<code>gnome-system-monitor</code>。</p>
<h1 id="Ubuntu-18-04——Vmware-Workstation"><a href="#Ubuntu-18-04——Vmware-Workstation" class="headerlink" title="Ubuntu 18.04——Vmware Workstation"></a>Ubuntu 18.04——Vmware Workstation</h1><p>因为穷，买不起云服务器，遂在本地跑起了虚拟机。<br>在本地用就一个字爽，缺点就是没公网ip，只能对内网设备提供服务。</p>
<h2 id="安装Vmware-Workstation"><a href="#安装Vmware-Workstation" class="headerlink" title="安装Vmware Workstation"></a>安装Vmware Workstation</h2><p>直接去官网现在最新版安装，网上的密钥基本都可以用于激活。<br>安装好之后需要进BIOS启用CPU虚拟化。</p>
<h2 id="Ubuntu镜像"><a href="#Ubuntu镜像" class="headerlink" title="Ubuntu镜像"></a>Ubuntu镜像</h2><p>不同于云服务厂商，镜像需要自己下载<br><a href="https://ubuntu.com/download/server">Ubuntu Server官网镜像下载页面</a><br>下载之后安装就是无图形界面的最小化Ubuntu安装，可以很人性化的导入Github上的公钥。</p>
<h2 id="Windows镜像"><a href="#Windows镜像" class="headerlink" title="Windows镜像"></a>Windows镜像</h2><p>跑windows系统也不再话下，直接下载镜像，安装时选择镜像安装就行。<br>VMware能自动识别操作系统，填写产品密钥后自动安装。</p>
<h2 id="导入制作的OVF镜像"><a href="#导入制作的OVF镜像" class="headerlink" title="导入制作的OVF镜像"></a>导入制作的OVF镜像</h2><p>为了进一步减少安装操作系统的时间，或者希望自己定制一套镜像来使用。<br>可以在虚拟机中安装必要软件后导出成OVF，分发给要使用虚拟机的人。这样全新安装虚拟机是最快的。</p>
<h2 id="网络穿透"><a href="#网络穿透" class="headerlink" title="网络穿透"></a>网络穿透</h2><p>一般需要用到VMware Workstation的服务器往往在内网之中，如果希望在互联网上远程连接虚拟机，还需要解决虚拟机内网穿透的问题。<br>一种免费解决方案是使用传统的远程控制软件，如：TeamViewer、AnyDesk、ToDesk、向日葵等。<br>另一种是使用自建的内网穿透服务，如：frp、ngrok、natapp等。</p>
<h2 id="命令行操作虚拟机"><a href="#命令行操作虚拟机" class="headerlink" title="命令行操作虚拟机"></a>命令行操作虚拟机</h2><p>要使用命令行创建VMware Workstation虚拟机，您需要使用VMware提供的命令行工具 vmrun。<br>vmrun 是 VMware Workstation 提供的命令行工具，用于启动、关闭、暂停、恢复虚拟机等操作。下面是 vmrun 的使用方法和例子：</p>
<ol>
<li>启动虚拟机<br>启动虚拟机的命令如下：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vmrun start &lt;虚拟机文件路径&gt; [可选参数]</span><br></pre></td></tr></table></figure>
<p>可选参数一般用于指定虚拟机启动时的配置，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vmrun start /path/to/vmware/ubuntu.vmx nogui</span><br></pre></td></tr></table></figure>
<p>这个命令启动名为 “ubuntu” 的虚拟机，并且不在 GUI 模式下运行。<br>2. 关闭虚拟机<br>关闭虚拟机的命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vmrun stop &lt;虚拟机文件路径&gt; [可选参数]</span><br></pre></td></tr></table></figure>
<p>可选参数一般用于指定关闭虚拟机的方式，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vmrun stop /path/to/vmware/ubuntu.vmx hard</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>暂停虚拟机<br>暂停虚拟机的命令如下：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vmrun pause /path/to/vmware/ubuntu.vmx</span><br></pre></td></tr></table></figure>
<p>这个命令将名为 “ubuntu” 的虚拟机暂停。<br>4. 恢复虚拟机<br>恢复虚拟机的命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vmrun unpause /path/to/vmware/ubuntu.vmx</span><br></pre></td></tr></table></figure>
<p>这个命令将名为 “ubuntu” 的虚拟机从暂停状态恢复。<br>5. 列出虚拟机<br>列出虚拟机的命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vmrun list</span><br></pre></td></tr></table></figure>
<p>这个命令将列出所有正在运行的虚拟机。<br>6. 获取虚拟机 IP 地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vmrun getGuestIPAddress /path/to/vmware/ubuntu.vmx</span><br></pre></td></tr></table></figure>
<ol start="7">
<li>删除虚拟机</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vmrun deleteVM /path/to/vmware/ubuntu.vmx</span><br></pre></td></tr></table></figure>

<h1 id="相关有用的小工具安装"><a href="#相关有用的小工具安装" class="headerlink" title="相关有用的小工具安装"></a>相关有用的小工具安装</h1><ul>
<li><a href="https://www.cnblogs.com/dhcn/p/11666845.html">zsh</a></li>
<li><a href="https://github.com/tldr-pages/tldr">tldr</a></li>
<li><a href="https://www.jianshu.com/p/0d37b22aabba">Thefuck</a></li>
<li><a href="https://www.xiaoz.me/archives/11769">Besttrace</a></li>
<li><a href="https://youtube-dl.org/">youtube-dl</a></li>
</ul>
<h1 id="阿里云OSS"><a href="#阿里云OSS" class="headerlink" title="阿里云OSS"></a>阿里云OSS</h1><p>首先声明这个阿里云的OSS性能十分堪忧，主要是ossfs这个挂载工具堪忧。<br>全球上传速度也很慢，内网传输也才20-30M&#x2F;s左右。外网传输也不过10M左右。<br>某404小站的Drive那是真的快！外网上传33M&#x2F;s，外网下载有83M&#x2F;s左右。测速工具Gdrive，测速服务器新加坡Vultr VPS。<br>尽管如此，我还是要用，为了省钱…搭配阿里云ECS不用付流量费，想要高速下载时再付流量费。<br>可以挂载内网OSS，所以有个优点能跟我搭建的nextcloud同步。<br>后面发现这唯一的优点也算不上优点，一方面IO很差，造成Nextcloud显示大批量图片缓慢。而且直接挂载会产生大量的请求，产生额外请求费用。<br><a href="https://help.aliyun.com/document_detail/32196.html?spm=5176.8150156.427429.5.70396fabGjfZ98">ossfs快速安装</a><br><a href="https://help.aliyun.com/document_detail/50452.html?spm=a2c4g.11186623.6.670.61323090dzqURc">ossutil64快速安装</a><br>自动挂载oss参考下面教程，修改fstab文件<br><a href="https://www.jianshu.com/p/67c0816a968d">将阿里云OSS的Bucket挂载到Linux本地</a><br>阿里云OSS可以制定挂载用户</p>
<h1 id="SSL证书申请"><a href="#SSL证书申请" class="headerlink" title="SSL证书申请"></a>SSL证书申请</h1><p>首先我们需要一个私钥和证书，用于SSL加密使用。<br>有两种途径获得，一种途径是像CA申请获得，这就要钱了，不过阿里云有免费的SSL证书申请可以试一下。<br>另一种是自签名证书，不过浏览器会不信任，可以将证书加到受信任证书解决。<br>剩下的事情就好办了，在网页服务器中启用https，填写私钥与证书路径。<br><a href="https://www.cnblogs.com/anlia/p/5920820.html">SSL–Windows下生成OpenSSL自签证书</a><br><a href="https://www.jianshu.com/p/35c31b865bb9">如何让chrome信任自签名证书？</a><br><a href="https://letsencrypt.org/">Let’s Encrypt</a><br>一个能申请免费域名的机构，甚至可以申请通配符域名，强力推荐。</p>
<h1 id="域名配置-CDN加速"><a href="#域名配置-CDN加速" class="headerlink" title="域名配置&amp;CDN加速"></a>域名配置&amp;CDN加速</h1><h2 id="cloudflare"><a href="#cloudflare" class="headerlink" title="cloudflare"></a>cloudflare</h2><p>听说cloudflare的口碑很好。所以，我也就选择它了。主要还是因为穷，cloudflare有free plan可以选，尽管境内加速不咋地，甚至减速。但是有免费的SSL证书，还有解析功能，还是挺期待的。<br>使用了一下，发现不行。主要是阿里云服务器在国内已经优化的很好了，套了个CF真的慢，之前想用它来给我的视频缓存，但好像不行。最主要的是CF的解析真的很迷，我这总是解析不到地址。<br>还有一个很重要的一点加了CDN之后，由于CF只代理部分端口的http和https协议，这使得我的其他TCP的服务通通不能直接连上了。<br><a href="https://zhuanlan.zhihu.com/p/29891330">CloudFlare免费CDN加速使用方法</a></p>
<h2 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a>阿里云</h2><p>毕竟入坑了阿里云的服务器，所以就把阿里云的服务连在一起用咯。阿里云控制台改版后的页面比以前清爽多了，但还是功能按钮太多。<br>一开始，我以为用阿里云的国内CDN需要备案，但好像他只验证了我的域名有没实名就可以用国内CDN加速了，用上CDN，国内小城镇的ping值就降了下来。尽管某些地区用的人少回源时间比较长，比直连慢，但总体上还是很不错的。域名解析，支持设置不同线路的DNS解析，目前我的Blog托管在香港阿里云加阿里云国内CDN，国外解析到Github Pages,这样全球都有CDN加速了。<br>CDN加速可以使用同一域名，只是在填回源地址时，要填ip地址。在回源HOST中填上相应的域名就好了。</p>
<h2 id="腾讯云"><a href="#腾讯云" class="headerlink" title="腾讯云"></a>腾讯云</h2><p>跟阿里云大同小异，腾讯云的CDN有每月10GB的免费流量可用。</p>
<h1 id="服务器搭建"><a href="#服务器搭建" class="headerlink" title="服务器搭建"></a>服务器搭建</h1><h2 id="搭建frp内网穿透"><a href="#搭建frp内网穿透" class="headerlink" title="搭建frp内网穿透"></a>搭建frp内网穿透</h2><p><a href="https://github.com/fatedier/frp/releases">项目地址</a><br>在这里下载当前平台所需要的二进制运行文件。<br>frps.ini配置文件如下：</p>
<figure class="highlight ini"><figcaption><span>frps.ini</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_addr</span> = <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">vhost_http_port</span> = <span class="number">8080</span></span><br><span class="line"><span class="attr">dashboard_port</span> = <span class="number">7500</span></span><br><span class="line"><span class="attr">token</span> = <span class="number">12345678</span></span><br><span class="line"><span class="attr">subdomain_host</span> = home999.cc</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/fanxl10/article/details/82381176">部署教程</a><br>作者很良心的写好了服务脚本，可以后台运行并开机自启<br>部署好之后，有三个重要的管理代码</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl start frps //启动</span><br><span class="line">systemctl status frps //状态查询</span><br><span class="line">systemctl <span class="built_in">enable</span> frps //开机启动</span><br></pre></td></tr></table></figure>
<p>frp十分强大，而且也足够简介，跟nginx一样通过修改配置文件能够实现很多功能。<br>具体使用看项目地址中的Readme即可。<br>目前在本地我已实验成功TCP，http,https的转发。</p>
<h2 id="搭建shadowsocksR"><a href="#搭建shadowsocksR" class="headerlink" title="搭建shadowsocksR"></a>搭建shadowsocksR</h2><p>网上有很多一键安装脚本<br><a href="https://ssr.tools/31">安装教程</a><br>管理脚本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ShadowsocksR 版：</span><br><span class="line">/etc/init.d/shadowsocks-r start | stop | restart | status</span><br></pre></td></tr></table></figure>
<p>可以加入<code>http_simple</code>混淆，来搞定运营商的QOS。<br>ssr<code>http_simple</code>配合nginx在80端口建真的网站效果更佳。<br><a href="https://www.vjsun.com/93.html">利用网站配置端口隐蔽SSR的欺骗流量方案</a><br><a href="https://ssr.tools/194">SSR 添加多用户多端口教程（ShadowsocksR多用户）-SSR中文网</a></p>
<h2 id="BBR加速"><a href="#BBR加速" class="headerlink" title="BBR加速"></a>BBR加速</h2><p><a href="https://www.cheshirex.com/1549.html">阿里云轻应用服务器香港30M轻应用玩法,净化系统，装bbr脚本等(轻量)</a></p>
<h2 id="V2ray"><a href="#V2ray" class="headerlink" title="V2ray"></a>V2ray</h2><p><a href="https://toutyrater.github.io/">V2Ray 配置指南</a><br><a href="https://www.v2ray.com/">V2Ray官网</a></p>
<h2 id="搭建ftp服务器"><a href="#搭建ftp服务器" class="headerlink" title="搭建ftp服务器"></a>搭建ftp服务器</h2><p>我们使用<code>vsftpd</code>作为服务器软件<br><a href="https://www.linuxidc.com/Linux/2017-06/144807.htm">安装教程</a><br>下面这个只是参考，主要看上面那个教程<br><a href="https://blog.csdn.net/qq_20545159/article/details/47701183">root用户亦可登录教程</a><br>关于<code>linux ftp</code>的使用<br><a href="https://www.cnblogs.com/mingforyou/p/4103022.html">linux ftp教程</a></p>
<h2 id="手动搭建nginxWeb服务器"><a href="#手动搭建nginxWeb服务器" class="headerlink" title="手动搭建nginxWeb服务器"></a>手动搭建nginxWeb服务器</h2><p>直接安装，安装后使用<code>systemctl</code>来管理<br>初次安装时发现<code>systemctl status nginx</code>中有<br><code>nginx.service: Failed to parse PID from file /run/nginx.pid: Invalid argument</code><br>这样的错误<br><a href="http://www.linuxdiyf.com/linux/31107.html">解决方法</a><br><a href="http://seanlook.com/2015/05/17/nginx-install-and-config">nginx详细配置</a><br><a href="https://www.cnblogs.com/jiangwangxiang/p/8481661.html">windows下nginx的安装及使用</a><br><a href="https://zhgcao.github.io/2016/06/09/nginx-reverse-proxy-google/">利用Nginx反向代理谷歌</a><br>同理，可以反向代理其他网站。<br>为了避免被GFW扫描到，可以设置ip白名单，或者UA白名单。有钱甚至可以使用国内服务器中转，只不过速度较慢。<br><a href="https://serverfault.com/questions/760359/nginx-allow-deny-based-on-ip-user-agent-combination">NGINX Allow&#x2F;Deny based on IP &amp; User Agent combination</a><br>服务器端反代有诸多限制，不够先进，可以参考<code>jsproxy</code>实现更高效的反代。</p>
<h3 id="搭建Hexo静态网站博客"><a href="#搭建Hexo静态网站博客" class="headerlink" title="搭建Hexo静态网站博客"></a>搭建Hexo静态网站博客</h3><p><a href="https://www.jianshu.com/p/682e62c2a3dc">nginx代理hexo博客</a><br>在我搭建的时候似乎遇到了权限问题，我把我的博客放在<code>/root</code>目录下，结果nginx返回<code>403 Forbidden</code>。<br>事实上很多web程序都不具备访问<code>/root</code>目录的能力，最好将网站统一放在推荐的位置。<br>或者用笨方法，直接root运行nginx。</p>
<h3 id="nginx端口转发-与frp共用端口"><a href="#nginx端口转发-与frp共用端口" class="headerlink" title="nginx端口转发(与frp共用端口)"></a>nginx端口转发(与frp共用端口)</h3><p>目前我有一个二级域名，所以有三级域名可以由我自由分配，frp,nginx本身都要监听一个端口，当我访问不同的网站时需要指定不同的端口。这样做很麻烦，所以问题来了：能不能合并成一个端口提供服务。<br>这时候就要用到nginx的反向代理（端口转发）功能。<br>在目录<code>/etc/nginx/conf.d/</code>中添加配置文件。配置文件名自取，以<code>.conf</code>为文件后缀<br>下面是一段监听8082端口，并将所有的<code>*.home999.cc</code>请求转到端口8080来进行处理的配置文件。</p>
<p>在配置域名的时候，感觉nginx的理解与我的理解有一些偏差。所以只好按照nginx的理解去配域名了。</p>
<h2 id="搭建git服务器"><a href="#搭建git服务器" class="headerlink" title="搭建git服务器"></a>搭建git服务器</h2><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000">廖雪峰版教程</a><br>先完成基本的创建用户，公钥添加，禁止bsah登陆，再按照下面修复<code>git shell修复教程</code>，修复<code>ssh</code>登陆报错。<br><a href="https://www.liaoxuefeng.com/discuss/001409195939432748a2c9fae3846bc98b3c2a547fa321b000/001439558216371603727f334d9451b9075c15996b2ae90000">git shell修复教程</a></p>
<h3 id="hexo通过git部署博客到服务器"><a href="#hexo通过git部署博客到服务器" class="headerlink" title="hexo通过git部署博客到服务器"></a>hexo通过git部署博客到服务器</h3><p><a href="https://blog.yizhilee.com/post/deploy-hexo-to-vps/">通过 Git Hooks 自动部署 Hexo 到 VPS</a></p>
<h2 id="部署Asp-NET应用"><a href="#部署Asp-NET应用" class="headerlink" title="部署Asp.NET应用"></a>部署Asp.NET应用</h2><p><a href="https://www.cnblogs.com/cgzl/p/9648813.html">教程</a><br><a href="https://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/runtime-current">Install .NET Core Runtime</a></p>
<h2 id="搭建Nextcloud网盘"><a href="#搭建Nextcloud网盘" class="headerlink" title="搭建Nextcloud网盘"></a>搭建Nextcloud网盘</h2><p>首先要做的是一键安装<code>LNMP</code>,我是不太喜欢这种一键安装包的，会把我原有的配置搞乱。<br>而且对服务器环境要求比较高，出问题了比较难查。<br><a href="https://www.flyzy2005.com/tech/install-lnmp-in-one-command/">LNMP环境一键安装包</a><br><a href="https://segmentfault.com/a/1190000015654232">教程</a><br>搭建完之后真的舒服，界面舒服又好用，自带WebDav。</p>
<p>如果想直接从服务器中导入其他文件，可以参考下面这个教程，要注意所有者是www，<br>同时最好修改导入文件的所有者为www。<br><a href="https://www.orgleaf.com/2400.html">OCC命令给ownCloud&#x2F;Nextcloud手动添加文件</a><br>然后可以以管理员的身份进入设置中的概览，进行完整性和安全性的扫描。<br>给PHP开大内存储存空间，修改<code>/usr/local/php/etc/php.ini</code>文件中<code>memory_limit</code>配置信息。<br>最后因为通过<code>LNMP</code>搭建的<code>NextCloud</code>问题太多，而选择了使用<code>snap</code>一键安装，从下载到安装不到1min。<br><a href="https://www.moerats.com/archives/429/">Ubuntu使用Snap快速安装NextCloud网盘，并配置域名及SSL证书</a><br><code>snap</code>会直接打包好一个虚拟的使用环境，与外界环境互不影响。<br>但是<code>NextCloud</code>默认使用的服务器<code>Apache2</code>会占用80端口，所以我们要修改这个端口，并用<code>nginx</code>做反向代理。<br>更改端口号，如果你没有备案：<br><code>snap set nextcloud ports.http=8080 ports.https=8081</code><br>手动扫描文件<br><code>nextcloud.occ files:scan --all</code><br><code>nextcloud.occ files:scan root</code><br>配置https<br>To install a Let’s Encrypt SSL certificate, type:<br><code>$ sudo nextcloud.enable-https lets-encrypt</code><br>If you’d rather use a self-signed certificate, you can type:<br><code>$ sudo nextcloud.enable-https self-signed</code><br>在<code>nginx.conf</code>的<code>http</code>中添加<code>client_max_body_size 10g;</code>防止文件过大禁止写入。<br><code>NextCloud</code>上面还有很多小插件可以使用，可以仔细研究一下。<br><a href="https://blog.wyc1236.com/2018/12/02/306/">Nextcloud应用推荐</a><br><a href="https://www.orgleaf.com/2588.html">使用Docker部署ONLYOFFICE Document Server</a><br>到最后发觉snap版本的nextcloud对本地文件和https反向代理支持不友好。而目前我也有能力全部手动装NextCloud，所以从官网下载NextCloud的PHP压缩包。<br>先到官网下载，PHP压缩包，然后解压，移动到<code>/var/www</code>目录下，设置好整个目录的所有者和组为<code>www-data</code>，配置nginx下NextCloud的conf，上官网查样例，粘贴即可。<br>访问网站，填写配置信息，如果有资料需要转移的，现在就可以转移了，然后再扫描文件。<br>最后进入设置概览，一次解决nginx与PHP的配置和扩展未装的问题，有能力的还可以上radis。<br><a href="https://www.himstudy.net/%E8%A7%A3%E5%86%B3nextcloud%E6%8F%90%E7%A4%BA%E5%86%85%E5%AD%98%E7%BC%93%E5%AD%98%E6%9C%AA%E9%85%8D%E7%BD%AE%EF%BC%8C%E4%B8%BA%E4%BA%86%E6%8F%90%E5%8D%87%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/">解决Nextcloud提示“内存缓存未配置，为了提升使用体验，请尽量配置内存缓存。”的问题</a></p>
<h2 id="搭建Aria2-AriaNG离线下载服务"><a href="#搭建Aria2-AriaNG离线下载服务" class="headerlink" title="搭建Aria2+AriaNG离线下载服务"></a>搭建Aria2+AriaNG离线下载服务</h2><p><a href="https://wzfou.com/nextcloud-aria2/">Nextcloud离线下载搭建方法-整合Aria2和AriaNg、Aria2 WebUI实现离线下载</a><br>搭建完之后，使用<code>lnmp vhost add</code>可以添加AriaNG的前端于服务器上。<br>关于与<code>Nextcloud</code>的链接管理<br><a href="https://blog.augustdoit.bid/nextcloud2/">Nextcloud外部存储（本地）整合Aria2 AriaNG离线下载</a><br>强烈建议给<code>AriaNg</code>添加登陆密码，因为先前了解到frp有这种功能，所以我猜测nginx也提供了这种功能。<br>后面发现不用密码也行，因为要使用离线下载功能的人必须先知道RPC密钥，才能与aria2联通。<br><a href="https://www.centos.bz/2017/07/nginx-basic_auth-password/">Nginx配置basic_auth密码验证</a><br>添加一条文件拥有者修改代码，解决权限问题。<br><code>chown www-data:www-data passwd.db</code></p>
<h2 id="搭建Fortuna-OJ"><a href="#搭建Fortuna-OJ" class="headerlink" title="搭建Fortuna OJ"></a>搭建Fortuna OJ</h2><p>Fortuna OJ作为用了3年的学校oj，当然要试着搭建一波了。<br><a href="https://github.com/mchobbylong/fortuna-oj-doc/blob/master/setup_on_ubuntu18_cn.md">Fortuna OJ 部署指南</a><br>操作数据库<br><a href="https://blog.csdn.net/zhaoxixc/article/details/82079783">MariaDB数据库简单入门（含备份、恢复）</a><br>搭建之中遇到了一些问题，我用的是Ubuntu 16.04，但是推荐的是Ubuntu 18.04。<br>并且不是纯净的。所以，我选择了手动安装，就遇到了<code>redis</code>找不到，数据库找不到等奇奇怪怪的问题。<br>所以最后，找了台纯净的Ubuntu18.04使用脚本直接搭建就OK了。<br>由于没有文档，很多东西只能自己去猜测，试验。<br>目前已知添加数据时，需要单个测试点一个个添加。</p>
<h2 id="搭建青岛Online-Judge"><a href="#搭建青岛Online-Judge" class="headerlink" title="搭建青岛Online Judge"></a>搭建青岛Online Judge</h2><p><a href="https://github.com/QingdaoU/OnlineJudge">后端代码</a><br><a href="https://github.com/QingdaoU/OnlineJudgeFE">前端代码</a><br><a href="https://github.com/QingdaoU/OnlineJudgeDeploy">Docker部署代码</a><br><a href="https://docs.onlinejudge.me/">文档</a></p>
<h2 id="搭建简单的http文件服务器"><a href="#搭建简单的http文件服务器" class="headerlink" title="搭建简单的http文件服务器"></a>搭建简单的http文件服务器</h2><p>使用nginx或apache都可。<br>个人喜欢nginx，所以就以nginx为例。<br>安装好nginx，在配置目录中增加如下配置<br><code>/etc/nginx/conf.d/file.conf</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">	listen 8081;</span><br><span class="line">	server_name sz.home999.cc;</span><br><span class="line">	charset utf-8;</span><br><span class="line">	</span><br><span class="line">	location /files &#123;</span><br><span class="line">		alias /media;</span><br><span class="line">		allow all;</span><br><span class="line">		autoindex on;				#开启目录索引</span><br><span class="line">		autoindex_exact_size off;	#关闭精准文件大小显示</span><br><span class="line">		autoindex_localtime on;		#使用浏览器时区显示时间</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>nginx本身只是一个很小的组件，但是拥有扩展的他具有无限可能。如果你觉得默认的文件列表功能太简陋，可以重新编译nginx并加上扩展。<br><a href="https://www.jianshu.com/p/ae73ee2bbe6e">Nginx 索引目录美化</a></p>
<h2 id="BTsync同步工具-弃-Syncthing"><a href="#BTsync同步工具-弃-Syncthing" class="headerlink" title="BTsync同步工具(弃)&amp;Syncthing"></a>BTsync同步工具(弃)&amp;Syncthing</h2><p>因为一不小心就买了4台VPS服务器，他们之间需要共享一些文件。然而，阿里云太贵，坚果云只能用webdav，而且限制比较多。所以需求就产生了，还可以充分利用带宽。<br>当我使用官网文档进行安装的时候，发现国内阿里云连不上服务器，最后一查发现被墙了。那就只好找替代方案了，发现了一个类似的并且也足够轻量，使用网页进行管理的同步工具<code>syncthing</code>。<br><a href="https://www.jianshu.com/p/4235cc85c32d">「玩物志」Syncthing的安装与使用</a><br>搭建和使用还算时挺简单的，可以根据需要设置同步目录和启动。</p>
<h2 id="BaiduPCS-Web高速下载百度网盘"><a href="#BaiduPCS-Web高速下载百度网盘" class="headerlink" title="BaiduPCS-Web高速下载百度网盘"></a>BaiduPCS-Web高速下载百度网盘</h2><p><a href="https://github.com/liuzhuoling2011/baidupcs-web">项目地址</a><br>搭建非常简单…</p>
<h2 id="Tomcat服务器搭建"><a href="#Tomcat服务器搭建" class="headerlink" title="Tomcat服务器搭建"></a>Tomcat服务器搭建</h2><p><a href="https://www.jianshu.com/p/cd3d20b8c26b?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation">Vultr+CentOS7+阿里云+Tomcat部署Web应用</a><br>上面是较为全面的搭建教程。<br>省略复杂的过程及解释，直接来代码</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install default-jre</span><br><span class="line"><span class="built_in">sudo</span> apt-get install default-jdk</span><br></pre></td></tr></table></figure>
<p>据说能够自动解决环境变量的问题<br><a href="https://tomcat.apache.org/download-70.cgi">Apache Tomcat® - Apache Tomcat 7 Software Downloads</a><br>从上述链接中获取linux版Tomcat，选择core即可。<br>解压到<code>/usr/local</code>,并改名为<code>tomcat7</code>。<br>默认开放端口为8080，可以修改<code>/usr/local/tomcat7/conf/server.xml</code>文件。<br><a href="https://blog.csdn.net/m0_37836194/article/details/79151296">tomcat更改默认端口号</a><br>在<code>Eclipse</code>中右键项目<code>Export -&gt; WAR file</code>,并上传到<code>tomcat7/webapps</code>中。<br>还要在<code>server.xml</code>中<code>&lt;/Host&gt;</code>前添加项目部署位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Context docBase=&quot;phase-04-implementation-003-javaWeb&quot; path=&quot;/&quot; reloadable=&quot;true&quot; source=&quot;org.eclipse.jst.jee.server:phase-04-implementation-003-javaWeb&quot;/&gt;</span><br></pre></td></tr></table></figure>
<p>管理<code>Tomcat</code>服务相关脚本均在<code>tomcat7/bin</code>下。<br><a href="https://blog.csdn.net/bbaaEE/article/details/82015155">Ubuntu 16.04自定义服务实现Tomcat开机自启动</a></p>
<h2 id="PHP环境"><a href="#PHP环境" class="headerlink" title="PHP环境"></a>PHP环境</h2><p>最早体验php是用的LNMP或LAMP一键包，但这是在你没有其他服务的情况下，像我现在各种各样的服务都在一个服务器上跑。用一键包，安装路径奇奇怪怪，所以只好自己手动来安装<br><a href="https://feihu.blog/archives/773.html">Ubuntu 手动安装LNMP&#x2F;LAMP,配置Nginx&#x2F;Apache与PHP关联</a><br>在之前体验的过程中，遇到两个挺有用的PHP文件，分别是<code>phpinfo</code>和<code>PHP探针</code>。</p>
<h2 id="mysql数据库"><a href="#mysql数据库" class="headerlink" title="mysql数据库"></a>mysql数据库</h2><p><a href="https://blog.csdn.net/qq_38737992/article/details/81090373">ubuntu18.04 首次登录mysql未设置密码或忘记密码解决方法</a></p>
<p><a href="https://www.cnblogs.com/hehecat/p/9262106.html">mysql允许root远程登录</a></p>
<h2 id="Windows下ssh服务器FreeSSHd"><a href="#Windows下ssh服务器FreeSSHd" class="headerlink" title="Windows下ssh服务器FreeSSHd"></a>Windows下ssh服务器FreeSSHd</h2><p><a href="http://www.freesshd.com/?ctt=download">官网</a><br><a href="https://blog.csdn.net/zeswhd/article/details/80812496">在windows 下创建SFTP服务器</a><br>下载安装过程中，会询问是否要写入服务，如果选择写入，很可能后面因为软件自身占用22端口，而无法启动服务，需要手动关闭再开启。<br>主要是为了使用他的SFTP功能，并用frp做内网穿透，实现文件读写访问。<br>当然也可以使用frp自带的简易http文件下载服务器。</p>
<h2 id="Brook端口转发"><a href="#Brook端口转发" class="headerlink" title="Brook端口转发"></a>Brook端口转发</h2><p><a href="https://doubibackup.com/yv4cp61c.html">『原创』Shadowsocks Brook 中继(中转&#x2F;端口转发) 便捷管理脚本</a></p>
<h2 id="docker容器"><a href="#docker容器" class="headerlink" title="docker容器"></a>docker容器</h2><p><a href="https://www.runoob.com/docker/docker-hello-world.html">Docker 教程</a><br><a href="https://blog.csdn.net/weixin_32820767/article/details/81196250">Docker对象清理</a><br><a href="https://blog.csdn.net/catoop/article/details/103290673">docker 迁移 &#x2F;var&#x2F;lib&#x2F;docker</a></p>
<h1 id="客户端搭建"><a href="#客户端搭建" class="headerlink" title="客户端搭建"></a>客户端搭建</h1><h2 id="WebDAV客户端"><a href="#WebDAV客户端" class="headerlink" title="WebDAV客户端"></a>WebDAV客户端</h2><p><a href="https://blog.51cto.com/3331062/2306523">cadaver配置教程</a><br>webdav客户端挂载工具<code>davfs</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">apt install davfs</span><br><span class="line">vi /etc/davfs2/davfs2.conf</span><br><span class="line">ignore_dav_header 1</span><br><span class="line">mount -t davfs https://dav.jianguoyun.com/dav /media/nutstore</span><br><span class="line">mount -t davfs http://sz.home999.cc:8080/remote.php/webdav/ /media/nextcloud</span><br><span class="line">umount /media/nextcloud</span><br></pre></td></tr></table></figure>

<h2 id="Mplayer命令行视频播放"><a href="#Mplayer命令行视频播放" class="headerlink" title="Mplayer命令行视频播放"></a>Mplayer命令行视频播放</h2><p>命令行播放视频<br><a href="https://jingyan.baidu.com/article/2fb0ba4081900c00f2ec5f8d.html">Mplayer</a><br><code>mplayer -fs -x 25 -y  12  -ss 00:01:10 -vo caca video.mp4</code></p>
<h2 id="ffmpeg视频压制"><a href="#ffmpeg视频压制" class="headerlink" title="ffmpeg视频压制"></a>ffmpeg视频压制</h2><p><code>ffmpeg -i VID_20170131_094350.mp4 -vcodec libx264 -preset veryfast -crf 27 -acodec aac -ac 2 -ar 48000 -ab 128 -f mp4 output.mp4</code><br>-i 打开视频，查看视频详情(长度，音频流，视频流，码率)<br>-ar 采样率<br>-ab 码率<br>-ac 声道数</p>
<h2 id="shadowsocksR客户端"><a href="#shadowsocksR客户端" class="headerlink" title="shadowsocksR客户端"></a>shadowsocksR客户端</h2><p><a href="https://blog.mrwang.pw/2018/12/13/Linux%E5%AE%89%E8%A3%85%E5%B9%B6%E4%BD%BF%E7%94%A8ssr/">Linux安装并使用ssr</a><br>启动成功后，软件会自动监听1080端口。使用socks5协议进行代理。<br>所以还需要一个额外的代理软件，来辅助命令行工具翻墙。<br><a href="https://my.oschina.net/uniquejava/blog/846349">shadowsocks + proxychains4 （解决git clone慢的问题 ）</a></p>
<h2 id="speedtest测速软件"><a href="#speedtest测速软件" class="headerlink" title="speedtest测速软件"></a>speedtest测速软件</h2><p>安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://raw.github.com/sivel/speedtest-cli/master/speedtest.py</span><br><span class="line"><span class="built_in">chmod</span> a+rx speedtest.py</span><br><span class="line"><span class="built_in">mv</span> speedtest.py /usr/local/bin/speedtest</span><br><span class="line"><span class="built_in">chown</span> root:root /usr/local/bin/speedtest</span><br></pre></td></tr></table></figure>
<p>使用命令<code>speedtest</code></p>
<h2 id="Google-drive客户端"><a href="#Google-drive客户端" class="headerlink" title="Google drive客户端"></a>Google drive客户端</h2><p>因为Google drive没有第三方客户端，所以万能的国外大佬们，绝对不允许自己的Google drive空间被白白浪费，整出了一大堆第三方Google drive工具，再加上Google良心，没有对这些第三方工具加以限制，因此可以实现各种骚操作。<br>我上网找到了两个适用于命令行的第三方工具，分别是Gdrive和Grive。<br><a href="https://www.cnblogs.com/weifeng1463/p/10967644.html">Google Drive网盘文件直链获取一键脚本</a></p>
<h3 id="Gdrive"><a href="#Gdrive" class="headerlink" title="Gdrive"></a>Gdrive</h3><p>像普通网盘一样去使用Google drive，具备列目录，上传下载等基础功能。<br>不可以搭配proxychains4使用。<br>2020年2月21日测试使用，被Google报应用不安全，以致无法正常使用</p>
<h3 id="Grive"><a href="#Grive" class="headerlink" title="Grive"></a>Grive</h3><p>像Dropbox一样同步Google drive目录，可以指定目录，甚至某一个文件，同步并非实时。<br>可以搭配proxychains4使用。</p>
<h3 id="rclone"><a href="#rclone" class="headerlink" title="rclone"></a>rclone</h3><p>这个工具比我之前想的还要强大,至少与Google Drive配合，效果特别棒！可以彻底跟垃圾阿里云OSS say GoodBye。<br>有关这个工具的安装和使用。注意，如果使用没有浏览器的设备，需要特别注意选项。<br><a href="https://ymgblog.com/2018/03/09/296/">Linux下rclone简单教程(支持VPS数据同步,多种网盘,支持挂载)</a><br>有关开机自动挂载<br><a href="https://lab.bnxb.com/zhishi/27538.html">CENTOS服务器使用rclone开机自动挂载谷歌云盘Google drive rclone自动挂载Gdrive磁盘的</a></p>
<h2 id="Telegram-BOT"><a href="#Telegram-BOT" class="headerlink" title="Telegram BOT"></a>Telegram BOT</h2><p>Telegram有一个很强大的机器人，通过机器人API可以完成各种自动化操作。<br><a href="https://www.shuyz.com/posts/5-telegram-bot-script-for-vps-management/">用Telegram管理VPS：我的5个Telegram机器人脚本</a></p>
<h1 id="维护服务器命令"><a href="#维护服务器命令" class="headerlink" title="维护服务器命令"></a>维护服务器命令</h1><table>
<thead>
<tr>
<th>命令</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td><code>netstat -nltp</code></td>
<td>查看当前开放listen的所有Tcp端口信息</td>
</tr>
<tr>
<td><code>htop</code></td>
<td>系统资源管理器</td>
</tr>
<tr>
<td><code>iftop</code></td>
<td><a href="https://www.cnblogs.com/fklin/p/4986645.html">查看实时带宽流量情况</a></td>
</tr>
<tr>
<td><code>ifstat</code></td>
<td>网络资源管理器</td>
</tr>
<tr>
<td><code>df</code></td>
<td>查看磁盘空间</td>
</tr>
<tr>
<td><code>du -sh ./* --exclude=&quot;media&quot;</code></td>
<td>查看当前目录文件(夹)大小并排除media文件夹</td>
</tr>
<tr>
<td><code>screen</code></td>
<td><a href="https://www.cnblogs.com/cute/p/5015852.html">管理多终端</a></td>
</tr>
<tr>
<td><code>screen -S new</code></td>
<td></td>
</tr>
<tr>
<td><code>screen -R reload</code></td>
<td></td>
</tr>
<tr>
<td><code>cat /var/log/dist-upgrade/main.log | grep ERR</code></td>
<td>查看系统升级出错日志</td>
</tr>
<tr>
<td><code>crontab</code></td>
<td><a href="https://www.runoob.com/w3cnote/linux-crontab-tasks.html">计划任务</a></td>
</tr>
<tr>
<td><code>ps aux </code></td>
<td>查看进程信息</td>
</tr>
<tr>
<td><code>kill 9 PID</code></td>
<td>杀制定PID的进程</td>
</tr>
<tr>
<td><code>tar -xzvf file.tar.gz</code></td>
<td>tar.gz解压命令</td>
</tr>
<tr>
<td><code>tar -czvf ***.tar.gz ./file</code></td>
<td>tar.gz压缩命令</td>
</tr>
<tr>
<td><code>tar -cvf ***.tar ./file</code></td>
<td>tar打包命令</td>
</tr>
</tbody></table>
<h2 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl start nfs-server.service</span><br><span class="line">systemctl <span class="built_in">enable</span> nfs-server.service</span><br><span class="line">systemctl <span class="built_in">disable</span> nfs-server.service</span><br><span class="line">systemctl status nfs-server.service</span><br><span class="line">systemctl restart nfs-server.service</span><br><span class="line">systemctl</span><br></pre></td></tr></table></figure>
<p><a href="https://my.oschina.net/5lei/blog/191370">服务管理–systemctl命令</a></p>
<h1 id="VPS性能测试"><a href="#VPS性能测试" class="headerlink" title="VPS性能测试"></a>VPS性能测试</h1><h2 id="Ping-pe"><a href="#Ping-pe" class="headerlink" title="Ping.pe"></a>Ping.pe</h2><p>Ping.Pe 是一个非常强大的免费站长工具，可以从全世界 30 个节点检测网站 Ping 时间、MTR 和封包传输速度，站长们只要输入查询的 IP 或域名就能从全世界 30 个测试节点来测试封包的传输时间、经过的节点和掉包率等信息。</p>
<h2 id="Zbench"><a href="#Zbench" class="headerlink" title="Zbench"></a>Zbench</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#中文版</span><br><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/FunctionClub/ZBench/master/ZBench-CN.sh &amp;&amp; bash ZBench-CN.sh</span><br><span class="line">#英文版</span><br><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/FunctionClub/ZBench/master/ZBench.sh &amp;&amp; bash ZBench.sh</span><br></pre></td></tr></table></figure>
<p>Vultr Tokyo,Japan (5$&#x2F;月)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">--------------------------------------------------------------------------</span><br><span class="line">CPU 型号             : <span class="function">Intel Core <span class="title">Processor</span> <span class="params">(Haswell, no TSX, IBRS)</span></span></span><br><span class="line"><span class="function">CPU 核心数           : <span class="number">1</span></span></span><br><span class="line"><span class="function">CPU 频率             : <span class="number">2399.996</span> MHz</span></span><br><span class="line"><span class="function">总硬盘大小           : <span class="number">25.5</span> GB (<span class="number">20.0</span> GB Used)</span></span><br><span class="line"><span class="function">总内存大小           : <span class="number">985</span> MB (<span class="number">147</span> MB Used)</span></span><br><span class="line"><span class="function">SWAP大小             : <span class="number">0</span> MB (<span class="number">0</span> MB Used)</span></span><br><span class="line"><span class="function">开机时长             : <span class="number">0</span> days, <span class="number">5</span> hour <span class="number">39</span> min</span></span><br><span class="line"><span class="function">系统负载             : <span class="number">0.27</span>, <span class="number">0.08</span>, <span class="number">0.02</span></span></span><br><span class="line"><span class="function">系统                 : Ubuntu <span class="number">18.04</span><span class="number">.3</span> LTS</span></span><br><span class="line"><span class="function">架构                 : x86_64 (<span class="number">64</span> Bit)</span></span><br><span class="line"><span class="function">内核                 : <span class="number">4.15</span><span class="number">.0</span><span class="number">-74</span>-generic</span></span><br><span class="line"><span class="function">虚拟化平台           : kvm</span></span><br><span class="line"><span class="function">--------------------------------------------------------------------------</span></span><br><span class="line"><span class="function">硬盘I/O (第一次测试) : <span class="number">392</span> MB/s</span></span><br><span class="line"><span class="function">硬盘I/O (第二次测试) : <span class="number">449</span> MB/s</span></span><br><span class="line"><span class="function">硬盘I/O (第三次测试) : <span class="number">466</span> MB/s</span></span><br><span class="line"><span class="function">--------------------------------------------------------------------------</span></span><br><span class="line"><span class="function">节点名称                  IP地址            下载速度            延迟</span></span><br><span class="line"><span class="function">CacheFly                  <span class="number">204.93</span><span class="number">.150</span><span class="number">.152</span>    <span class="number">70.7</span>MB/s            <span class="number">0.931</span> ms</span></span><br><span class="line"><span class="function">Linode, Singapore, SG     <span class="number">139.162</span><span class="number">.23</span><span class="number">.4</span>      <span class="number">5.77</span>MB/s            <span class="number">70.685</span> ms</span></span><br><span class="line"><span class="function">Linode, London, UK        <span class="number">176.58</span><span class="number">.107</span><span class="number">.39</span>     <span class="number">8.38</span>MB/s            <span class="number">219.419</span> ms</span></span><br><span class="line"><span class="function">Linode, Frankfurt, DE     <span class="number">139.162</span><span class="number">.130</span><span class="number">.8</span>     <span class="number">7.20</span>MB/s            <span class="number">248.157</span> ms</span></span><br><span class="line"><span class="function">Linode, Fremont, CA       <span class="number">50.116</span><span class="number">.14</span><span class="number">.9</span>       <span class="number">15.9</span>MB/s            <span class="number">109.553</span> ms</span></span><br><span class="line"><span class="function">Softlayer, Dallas, TX     <span class="number">173.192</span><span class="number">.68</span><span class="number">.18</span>     <span class="number">11.4</span>MB/s            <span class="number">142.574</span> ms</span></span><br><span class="line"><span class="function">Softlayer, Seattle, WA    <span class="number">67.228</span><span class="number">.112</span><span class="number">.250</span>    <span class="number">18.5</span>MB/s            <span class="number">88.417</span> ms</span></span><br><span class="line"><span class="function">Softlayer, Frankfurt, DE  <span class="number">159.122</span><span class="number">.69</span><span class="number">.4</span>      <span class="number">3.19</span>MB/s            <span class="number">244.037</span> ms</span></span><br><span class="line"><span class="function">Softlayer, Singapore, SG  <span class="number">119.81</span><span class="number">.28</span><span class="number">.170</span>     <span class="number">20.3</span>MB/s            <span class="number">80.402</span> ms</span></span><br><span class="line"><span class="function">Softlayer, HongKong, CN   <span class="number">119.81</span><span class="number">.130</span><span class="number">.170</span>    <span class="number">34.0</span>MB/s            <span class="number">49.481</span> ms</span></span><br><span class="line"><span class="function">--------------------------------------------------------------------------</span></span><br><span class="line"><span class="function">节点名称                  上传速度          下载速度            延迟</span></span><br><span class="line"><span class="function">上海电信                  <span class="number">5.43</span> Mbit/s       <span class="number">10.84</span> Mbit/s        <span class="number">245.576</span> ms</span></span><br><span class="line"><span class="function">西安电信                  <span class="number">61.67</span> Mbit/s      <span class="number">148.02</span> Mbit/s       <span class="number">111.181</span> ms</span></span><br><span class="line"><span class="function">北京联通                  <span class="number">119.83</span> Mbit/s     <span class="number">74.82</span> Mbit/s        <span class="number">124.233</span> ms</span></span><br><span class="line"><span class="function">--------------------------------------------------------------------------</span></span><br><span class="line"><span class="function">合肥        : <span class="number">65.69</span> ms   北京        : <span class="number">51.29</span> ms   武汉        : <span class="number">115.65</span> ms</span></span><br><span class="line"><span class="function">昌吉        : Fail       成都        : Fail       上海        : Fail</span></span><br><span class="line"><span class="function">太原        : <span class="number">161.32</span> ms  杭州        : <span class="number">168.98</span> ms  宁夏        : <span class="number">144.09</span> ms</span></span><br><span class="line"><span class="function">呼和浩特    : <span class="number">126.03</span> ms  南昌        : Fail       拉萨        : Fail</span></span><br><span class="line"><span class="function">乌鲁木齐    : <span class="number">161.22</span> ms  天津        : <span class="number">121.48</span> ms  襄阳        : Fail</span></span><br><span class="line"><span class="function">郑州        : <span class="number">162.86</span> ms  沈阳        : Fail       兰州        : <span class="number">131.9</span> ms</span></span><br><span class="line"><span class="function">哈尔滨      : Fail       宁波        : Fail       苏州        : Fail</span></span><br><span class="line"><span class="function">济南        : <span class="number">142.11</span> ms  西安        : <span class="number">107.06</span> ms  西宁        : <span class="number">111.34</span> ms</span></span><br><span class="line"><span class="function">重庆        : <span class="number">139.7</span> ms   深圳        : Fail       南京        : Fail</span></span><br><span class="line"><span class="function">长沙        : Fail       长春        : <span class="number">107.09</span> ms  福州        : <span class="number">113.61</span> ms</span></span><br><span class="line"><span class="function">--------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>
<p>腾讯云学生机（10元&#x2F;月）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">--------------------------------------------------------------------------</span><br><span class="line">CPU 型号             : <span class="built_in">Intel</span>(R) <span class="built_in">Xeon</span>(R) CPU E5<span class="number">-26</span>xx v4</span><br><span class="line">CPU 核心数           : <span class="number">1</span></span><br><span class="line">CPU 频率             : <span class="number">2394.446</span> MHz</span><br><span class="line">总硬盘大小           : <span class="number">101.0</span> <span class="built_in">GB</span> (<span class="number">13.0</span> GB Used)</span><br><span class="line">总内存大小           : <span class="number">1833</span> <span class="built_in">MB</span> (<span class="number">445</span> MB Used)</span><br><span class="line">SWAP大小             : <span class="number">0</span> <span class="built_in">MB</span> (<span class="number">0</span> MB Used)</span><br><span class="line">开机时长             : <span class="number">1</span> days, <span class="number">22</span> hour <span class="number">37</span> min</span><br><span class="line">系统负载             : <span class="number">1.34</span>, <span class="number">0.97</span>, <span class="number">0.77</span></span><br><span class="line">系统                 : Ubuntu <span class="number">18.04</span><span class="number">.4</span> LTS</span><br><span class="line">架构                 : <span class="built_in">x86_64</span> (<span class="number">64</span> Bit)</span><br><span class="line">内核                 : <span class="number">4.15</span><span class="number">.0</span><span class="number">-76</span>-generic</span><br><span class="line">虚拟化平台           : kvm</span><br><span class="line">--------------------------------------------------------------------------</span><br><span class="line">硬盘I/<span class="built_in">O</span> (第一次测试) : <span class="number">108</span> MB/s</span><br><span class="line">硬盘I/<span class="built_in">O</span> (第二次测试) : <span class="number">110</span> MB/s</span><br><span class="line">硬盘I/<span class="built_in">O</span> (第三次测试) : <span class="number">109</span> MB/s</span><br><span class="line">--------------------------------------------------------------------------</span><br><span class="line">节点名称                  IP地址            下载速度            延迟</span><br><span class="line">CacheFly                  <span class="number">204.93</span><span class="number">.150</span><span class="number">.152</span>    <span class="number">315</span>KB/s             <span class="number">162.957</span> ms</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="弃用"><a href="#弃用" class="headerlink" title="弃用"></a>弃用</h1><h2 id="宝塔面板"><a href="#宝塔面板" class="headerlink" title="宝塔面板"></a>宝塔面板</h2><p><a href="https://doubibackup.com/hxvodqzg.html">安装教程</a><br>这个玩意太强大了，所以我单独的将他拿了出来，对于那些不想接触linux命令行的人简直太方便了。<br>完全的网页可视化管理，比起我先前提到的安装桌面环境来说要更省空间，并且也容易操作的多。<br>我觉得这玩意就像路由器中的后台管理luci，可以满足你大部分搭建服务器软件的需求。<br>缺点就是安装东西真的很慢，国内开发的软件，增值服务太多，花里胡哨的！！！<br>最后面我弃用了他，瞎改我的配置，瞎增加网页，吃相难看，再见！</p>
<h2 id="KCPTUN加速工具"><a href="#KCPTUN加速工具" class="headerlink" title="KCPTUN加速工具"></a>KCPTUN加速工具</h2><p>这是一个TCP与UDP互转的加速工具，使用UDP协议进行加速，加速双方都需要部署软件。<br><a href="https://ssr.tools/588">超级加速工具KCPTUN一键安装脚本 附100倍加速效果图-SSR中文网</a><br>windows客户端要去github上找Release，体验了一下发现没有宣传的效果那样好，给我感觉一般般，但是非常消耗带宽，不适合我这种阿里云小水管，适合那些大水管，并且TCP线路尤为糟糕的。</p>
<h2 id="Mosh"><a href="#Mosh" class="headerlink" title="Mosh"></a>Mosh</h2><p>一种可以替代ssh基于UDP的远程shell工具，主要解决糟糕的境外VPS的ssh连接问题<br><a href="https://www.hi-linux.com/posts/23118.html">使用 Mosh 来优化 SSH 连接</a><br>暂时找不到好用的windows客户端，用Cygwin的比较麻烦。而且表现并不比挂代理好，所以最后还是代理+ssh。</p>
<h2 id="搭建kodexplorer网盘网站"><a href="#搭建kodexplorer网盘网站" class="headerlink" title="搭建kodexplorer网盘网站"></a>搭建kodexplorer网盘网站</h2><p><a href="https://www.jianshu.com/p/406a4c593d04">教程</a><br>上面这篇教程在安装<code>kodexplorer</code>之前，先使用了一键安装脚本<code>oneinstack</code>解决大部分服务器所需要的服务，虽然也是国人制作的一键安装脚本，但是相比宝塔面板，要干净很多。<br>在此之前推荐使用全新干净的系统安装。<br>不需要桌面此类的东西，而且不够简约，每打开一个东西都开新窗口，不大喜欢这种WEB OS的风格。</p>
]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>【GDKOI】总结 2.16-2.18</title>
    <url>/2016/%E3%80%90GDKOI%E3%80%91%E6%80%BB%E7%BB%93-2-16-2-18/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="2-16"><a href="#2-16" class="headerlink" title="2.16"></a>2.16</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>先看数据范围，根据数据范围推得算法的时间复杂度。能打的暴力，在时间允许的情况下就打，不要怕复杂。<br>有时一个方法想不通，可以换几种方法，不要陷入一种方法中。<br>将题意转换化简一下，往往就能得出正解。</p>
<h2 id="T1-【GDOI2003】购物"><a href="#T1-【GDOI2003】购物" class="headerlink" title="T1:【GDOI2003】购物"></a>T1:【GDOI2003】购物</h2><p>因为没有环，转化成树后，经典的树形dp。<br>枚举结点选或不选，得到该节点的子树的答案最大值。</p>
<h2 id="T2-删边"><a href="#T2-删边" class="headerlink" title="T2:删边"></a>T2:删边</h2><p>刚开始看到这道题，没有什么特别好的方法。暴力水的70分。<br>这题和T4的思想类似，可以通过递归求解直径，通过转根，使得另一边的直径可以直接算出来。<br>只不过要分多种情况，还是挺复杂的。<br>要尽量保存更多的信息，而不需要重新计算，通过原先的答案推出新的答案。降低时间复杂度。</p>
<h2 id="T3-blockenemy"><a href="#T3-blockenemy" class="headerlink" title="T3:blockenemy"></a>T3:blockenemy</h2><p>这题可贪心，并查集加边维护。正解是dp。<br>dp要分多种情况讨论。<br>考试时没有想到特别好的方法，暴力太复杂，所以没打。</p>
<h2 id="T4-treecut"><a href="#T4-treecut" class="headerlink" title="T4:treecut"></a>T4:treecut</h2><p>很简单的转根，也是我最拿手的题型。</p>
<h1 id="2-17"><a href="#2-17" class="headerlink" title="2.17"></a>2.17</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>这套题是我感觉最好的一套题，很多题之前都做过相类似的。</p>
<h2 id="T1-广告印刷"><a href="#T1-广告印刷" class="headerlink" title="T1:广告印刷"></a>T1:广告印刷</h2><p>做过很多次这种类型的题，单调队列判断最远能扩展到的地方。</p>
<h2 id="T2-锻炼身体【推荐】"><a href="#T2-锻炼身体【推荐】" class="headerlink" title="T2:锻炼身体【推荐】"></a>T2:锻炼身体【推荐】</h2><p>瑰丽华尔兹，dp加单调队列优化。</p>
<h2 id="T3-求和"><a href="#T3-求和" class="headerlink" title="T3:求和"></a>T3:求和</h2><p>欧拉函数有一个公式，但考试时并不知道，可以通过容斥原理筛选并得出答案。</p>
<h2 id="T4-无题noname"><a href="#T4-无题noname" class="headerlink" title="T4:无题noname"></a>T4:无题noname</h2><p>扩展GCD解整数解，第一次较彻底的明白扩展GCD的功能及其原理。<br>要有较好的数学功底转化并化简题目。</p>
<h1 id="2-18"><a href="#2-18" class="headerlink" title="2.18"></a>2.18</h1><h2 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h2><p>发挥不大好，T1,T2离正解好差一点。</p>
<h2 id="T1-得分"><a href="#T1-得分" class="headerlink" title="T1:得分"></a>T1:得分</h2><p>看起来像01背包，然而打完之后发现并不是，因为这道题有后效性。<br>除非能够确定一个特定的顺序，确保无后效性，再dp就没问题了。<br>考试时，因为这一问题卡壳了，然后朝其他方向想，想了一个错误的单调队列。<br>顺序其实很好确定，讨论一下两个不同的作业谁更优即可。</p>
<h2 id="T2-荒岛野人"><a href="#T2-荒岛野人" class="headerlink" title="T2:荒岛野人"></a>T2:荒岛野人</h2><p>因为不太会化简恒等取mod式，所以直接暴力枚举。<br>首先要理解好题意，写出一个恒等式，化简。上扩展GCD直接求得相遇所需的最小年限。优化掉一重循环。</p>
<h2 id="T3-体育场"><a href="#T3-体育场" class="headerlink" title="T3:体育场"></a>T3:体育场</h2><p>可以建关系树，发现树可以用并查集的路径压缩，来压缩路径，通过一个数组d，判断是否矛盾。</p>
<h2 id="T4-机器人M号"><a href="#T4-机器人M号" class="headerlink" title="T4:机器人M号"></a>T4:机器人M号</h2><p>题目竟然有800+字…从前面一堆废话中，提取信息：老师：是x的因子，独立数：该点的欧拉函数。<br>通过递推式求得答案。</p>
]]></content>
      <categories>
        <category>信息学</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>【NOIP2013模拟联考9】阿Q的停车场</title>
    <url>/2015/%E3%80%90NOIP2013%E6%A8%A1%E6%8B%9F%E8%81%94%E8%80%839%E3%80%91%E9%98%BFQ%E7%9A%84%E5%81%9C%E8%BD%A6%E5%9C%BA/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>刚拿到驾照的KJ 总喜欢开着车到处兜风，玩完了再把车停到阿Q的停车场里，虽然她对自己停车的水平很有信心，但她还是不放心其他人的停车水平，尤其是Kelukin。于是，她每次都把自己的爱车停在距离其它车最远的一个车位。KJ 觉得自己这样的策略非常科学，于是她开始想：在一个停车场中有一排车位，从左到右编号为 1 到 n，初始时全部是空的。有若干汽车，进出停车场共 m 次。对于每辆进入停车场的汽车，会选择与其它车距离最小值最大的一个车位，若有多个符合条件，选择最左边一个。KJ 想着想着就睡着了，在她一旁的Kelukin想帮她完成这个心愿，但是他又非常的懒，不愿意自己动手，于是就把这个问题就留给了你：在KJ 理想的阿 Q 的停车场中，给你车辆进出的操作序列，依次输出每辆车的车位编号。</p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>第一行，两个整数 n 和 m，表示停车场大小和操作数；</p>
<p>接下来 m 行，每行两个整数，F 和 x</p>
<p>F 是 1 表示编号为 x 的车进停车场；</p>
<p>F 是 2 表示编号为 x 的车出停车场；</p>
<p>保证操作合法，即：</p>
<p>出停车场的车一定目前仍在停车场里；</p>
<p>停车场内的车不会超过 n； </p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>对于所有操作 1，输出一个整数，表示该车车位的编号。</p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>7 11<br>1 15<br>1 123123<br>1 3<br>1 5<br>2 123123<br>2 15<br>1 21<br>2 3<br>1 6<br>1 7<br>1 8</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>1<br>7<br>4<br>2<br>7<br>4<br>1<br>3</p>
<h1 id="Data-Constraint"><a href="#Data-Constraint" class="headerlink" title="Data Constraint"></a>Data Constraint</h1><p>对30%的数据 n&lt;&#x3D;1000 ，m&lt;&#x3D;1000<br>对60%的数据 n&lt;&#x3D;200000，m&lt;&#x3D;2000<br>对100%的数据n，m&lt;&#x3D;200000，车的编号小于等于 10^6</p>
<h1 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h1><p>我当时一看此题，就觉得第一第二个插入操作的输出很奇怪。实际上，我们们不能认为在[1..n]个停车位中，第0个与第n+1个停有车。所以说处理此类情况要特判。对于其他情况就是找出一段最长未停车线段,然后它的答案除以二就是距离最远车的距离,再根据前面第1个位置与第n个位置的特判得出答案。</p>
<p><strong>对于30%数据</strong></p>
<p>通过暴力的O(n*m)就可以得出答案。<br>先建立一个长度为n的bool数组，标示每个位置是否被车占用。<br>用一个car[1e6]数组表示每一辆车对应的编号。<br>再用一个a[N]数组表示各个位置距离两旁(或一旁)的车(0与n-1不能算做有车)的最近距离.<br>对于 1 询问:通过前后各扫描一次,更新a数组,再从a数组中找出一个最大的位置，将车停在那里。O(N)<br>对于 2 询问:只需从car数组中找到该车的位置将其删除即可，O(1)</p>
<p><strong>对于60%数据</strong><br>嘿嘿，我也不知道了！</p>
<p><strong>对于100%数据</strong><br>我是用线段树来实现的。(据某位大神说，可以用堆来做。然而我并不会)用线段树还是相对简单的。首先我们对区间[1..n]开一课线段树。对于每一个节点，维护4个值。分别是l,r,mid,p。l表示在当前结点线段树所在区间，最左边的车停的位置。同理，r表示做右边的车所停的位置。mid表示在这个小区间[l,r]中的紧邻的两辆车的最长距离除以2后的值。p表示取得mid值是所在的紧邻的两辆车的中间位置，也就是在[l,r]中的答案值。</p>
<p>对于 1 询问：访问线段树的第一个节点，我们比较l-1，n-r，mid的值哪个更大，就选哪个，它们的答案依次是1,n,mid。假设我们求得的位置是car[x]。然后访问[car[x],car[x]]所在的线段树的叶子节点，初始化它的值，然后回溯，进行合并。对于h[x].l与h[x].r可以通过两个儿子的l,r信息得出。对于h[x].mid值,首先在左右儿子的mid值中去一个最大的值。其次考虑一种情况，就是夹在两个线段之间的距离，可以通过(h[x+x+1].l-h[x+x].r) div 2 的值得出在于mid进行比较，然后p就随着mid的值的更新而更新。<br>对于2询问：访问询问车所在的位置，直接将它的叶子节点[car[x],car[x]]删除，然后回溯时，再做一次合并操作。即可</p>
<h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight pascal"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span>	maxc=<span class="number">1000005</span>;maxn=<span class="number">200005</span>;</span><br><span class="line"><span class="keyword">type</span>	node=<span class="keyword">record</span></span><br><span class="line">		l,r,mid,p:longint;</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">var</span>	i,j,k,m,n,ch,num,sum:longint;</span><br><span class="line">	car:<span class="keyword">array</span>[<span class="number">1</span>..maxc] <span class="keyword">of</span> longint;</span><br><span class="line">	h:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">4</span>*maxn] <span class="keyword">of</span> node;</span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">merger</span><span class="params">(x:longint)</span>;</span></span><br><span class="line"><span class="keyword">var</span>	t:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">if</span> h[x+x].l&gt;<span class="number">0</span> <span class="keyword">then</span> h[x].l:=h[x+x].l <span class="keyword">else</span> h[x].l:=h[x+x+<span class="number">1</span>].l;</span><br><span class="line">	<span class="keyword">if</span> h[x+x+<span class="number">1</span>].r&gt;<span class="number">0</span> <span class="keyword">then</span> h[x].r:=h[x+x+<span class="number">1</span>].r <span class="keyword">else</span> h[x].r:=h[x+x].r;</span><br><span class="line">	h[x].mid:=h[x+x].mid;</span><br><span class="line">	h[x].p:=h[x+x].p;</span><br><span class="line">	<span class="keyword">if</span> (h[x+x+<span class="number">1</span>].l&gt;<span class="number">0</span>) <span class="keyword">and</span> (h[x+x].r&gt;<span class="number">0</span>) <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">		t:=(h[x+x+<span class="number">1</span>].l-h[x+x].r) <span class="keyword">div</span> <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span> t&gt;h[x].mid <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">			h[x].mid:=t;</span><br><span class="line">			h[x].p:=(h[x+x+<span class="number">1</span>].l+h[x+x].r) <span class="keyword">div</span> <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">end</span>;</span><br><span class="line">		<span class="keyword">if</span> h[x+x+<span class="number">1</span>].mid&gt;h[x].mid <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">			h[x].mid:=h[x+x+<span class="number">1</span>].mid;</span><br><span class="line">			h[x].p:=h[x+x+<span class="number">1</span>].p;</span><br><span class="line">		<span class="keyword">end</span>;</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">work</span><span class="params">(x,l,r,num,kind:longint)</span>;</span></span><br><span class="line"><span class="keyword">var</span>	mid:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">if</span> l=r <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">		<span class="keyword">if</span> kind=<span class="number">2</span> <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">			h[x].l:=<span class="number">0</span>;h[x].r:=<span class="number">0</span>;</span><br><span class="line">			h[x].mid:=<span class="number">0</span>;h[x].p:=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">			h[x].l:=l;h[x].r:=r;</span><br><span class="line">			h[x].mid:=<span class="number">0</span>;h[x].p:=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">end</span>;</span><br><span class="line">		<span class="keyword">exit</span>;</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line">	mid:=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> num&lt;=mid <span class="keyword">then</span> work(x+x,l,mid,num,kind) <span class="keyword">else</span> work(x+x+<span class="number">1</span>,mid+<span class="number">1</span>,r,num,kind);</span><br><span class="line">	merger(x);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	readln(n,m);</span><br><span class="line">	<span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> m <span class="keyword">do</span> <span class="keyword">begin</span></span><br><span class="line">		readln(ch,num);</span><br><span class="line">		<span class="keyword">if</span> ch=<span class="number">1</span> <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">			<span class="keyword">if</span> h[<span class="number">1</span>].l=<span class="number">0</span> <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">				car[num]:=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">				sum:=-maxlongint;</span><br><span class="line">				<span class="keyword">if</span> h[<span class="number">1</span>].l-<span class="number">1</span>&gt;sum <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">					sum:=h[<span class="number">1</span>].l-<span class="number">1</span>;</span><br><span class="line">					car[num]:=<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">end</span>;</span><br><span class="line">				<span class="keyword">if</span> h[<span class="number">1</span>].mid&gt;sum <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">					sum:=h[<span class="number">1</span>].mid;</span><br><span class="line">					car[num]:=h[<span class="number">1</span>].p;</span><br><span class="line">				<span class="keyword">end</span>;</span><br><span class="line">				<span class="keyword">if</span> n-h[<span class="number">1</span>].r&gt;sum <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">					sum:=n-h[<span class="number">1</span>].r;</span><br><span class="line">					car[num]:=n;</span><br><span class="line">				<span class="keyword">end</span>;</span><br><span class="line">			<span class="keyword">end</span>;</span><br><span class="line">			writeln(car[num]);</span><br><span class="line">			work(<span class="number">1</span>,<span class="number">1</span>,n,car[num],<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">			work(<span class="number">1</span>,<span class="number">1</span>,n,car[num],<span class="number">2</span>);</span><br><span class="line">		<span class="keyword">end</span>;</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>信息学</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>【NOIP2015】10.30总结</title>
    <url>/2015/%E3%80%90NOIP2015%E3%80%9110-30%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><strong>概述</h2><p>这套题题目难度还是比较大的。但不管题目有多难，都不能弃疗！！能拿的暴力分都要拿。</p>
<h2 id="T1-Family"><a href="#T1-Family" class="headerlink" title="T1:Family "></a><strong>T1:Family </h2><p>第一题其实还是比较简单的，然而我陷入了一个思维中，没有从其他角度想。应该有种全局的眼光，不要只盯着少了几个点对看。以致于前1个小时的时间都在想这道题，拖慢了后面的题。从其他角度想更容易想到正解，而且也很好理解。目前已知至少有3种方法能解决问题。<br>所以最后只拿了50%的数据。</p>
<h2 id="T2-Flower"><a href="#T2-Flower" class="headerlink" title="T2:Flower"></a><strong>T2:Flower</h2><p>看完题目很快就明白这题的题目意思，让我们在n个数中选任意的k个数的乘积的和。很快想到一个O(n^2)的dp。100%的做法，也是从这个dp中推来的。后面的计算方法就比较复杂，考试的时候也没时间细想。</p>
<h2 id="T3-Forget"><a href="#T3-Forget" class="headerlink" title="T3:Forget "></a><strong>T3:Forget </h2><p>这题题目内容比较繁琐，要将题目意思转化为数学模型。但是被题目绕的稀里糊涂。如果充分理解题目意思（在n个标号中选连续k个标号，让这些标号在树中都有边能够联通），还是很好打暴力的！</p>
]]></content>
      <categories>
        <category>信息学</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>【NOIP】10.28总结 A组</title>
    <url>/2015/%E3%80%90NOIP%E3%80%9110-28%E6%80%BB%E7%BB%93-A%E7%BB%84/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h2><h2 id="看完题目整个人都是晕的，感觉上第二题较简单一点。这次考试时间分配上不好，因为总想把第二题调出来，花费了大量时间。最后还是不要太依赖调试工具和对拍，多读读代码！！T1：0-0-，T2：0-50-，T3：30-30-T1：同余"><a href="#看完题目整个人都是晕的，感觉上第二题较简单一点。这次考试时间分配上不好，因为总想把第二题调出来，花费了大量时间。最后还是不要太依赖调试工具和对拍，多读读代码！！T1：0-0-，T2：0-50-，T3：30-30-T1：同余" class="headerlink" title="看完题目整个人都是晕的，感觉上第二题较简单一点。这次考试时间分配上不好，因为总想把第二题调出来，花费了大量时间。最后还是不要太依赖调试工具和对拍，多读读代码！！T1：0(0)，T2：0(50)，T3：30(30)T1：同余 "></a>看完题目整个人都是晕的，感觉上第二题较简单一点。<br>这次考试时间分配上不好，因为总想把第二题调出来，花费了大量时间。最后还是不要太依赖调试工具和对拍，多读读代码！！<br>T1：0(0)，T2：0(50)，T3：30(30)<br>T1：同余 </h2><p>考试时看到这题一点想法都没有，只想到暴力，感觉暴力效率太低了，就暂且跳过了。<br>有关数论、乘法逆元等相关知识。</p>
<h2 id="T2-数列"><a href="#T2-数列" class="headerlink" title="T2:数列"></a>T2:数列</h2><p>又犯了和昨天类似的问题，没有看到输出格式中的解释。一开始以为题目出错了。题目要求的是最优方案对应的序号。<br>先看数据：暴力乱搞就有30分了……<br>再看额外数据。打表搞出几种情况，发现他们之间的规律，然后就照着想法打了。<br>其实想法没错，但是考试时花了很多时间在调试身上，对拍的时候发现一个又一个bug，还有一个bug是暴力程序错了。耗费了我大量时间。<br>这题满分做法就是贪心，要是当时想的在深入一点，可能就能想到正解了！</p>
<h2 id="T3-递推"><a href="#T3-递推" class="headerlink" title="T3:递推"></a>T3:递推</h2><p>看完题目先想了一下暴力，可以过前30%的数据。再看那20%的数据，发觉是一个斐波那契数列，但是要打一个矩阵乘法太麻烦，时间也已经不容许我打了。这题的关键在于将题目的意思转变成一个矩阵对矩阵进行加法乘法，再配上数学上的优化，就好了。</p>
]]></content>
      <categories>
        <category>信息学</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>【NOIP】10.29总结 B组</title>
    <url>/2015/%E3%80%90NOIP%E3%80%9110-29%E6%80%BB%E7%BB%93-B%E7%BB%84/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><strong>概述</h2><h2 id="今天这套题并不太难，时间分配还算比较合理。第一题花费的时间有点多。第四题，一开始想的太复杂了。打程序前一定要确定算法的可行性，及算法的复杂度。想好再打，不然会白白浪费很多调试时间。T1-质数"><a href="#今天这套题并不太难，时间分配还算比较合理。第一题花费的时间有点多。第四题，一开始想的太复杂了。打程序前一定要确定算法的可行性，及算法的复杂度。想好再打，不然会白白浪费很多调试时间。T1-质数" class="headerlink" title="今天这套题并不太难，时间分配还算比较合理。第一题花费的时间有点多。第四题，一开始想的太复杂了。打程序前一定要确定算法的可行性，及算法的复杂度。想好再打，不然会白白浪费很多调试时间。T1:质数 "></a>今天这套题并不太难，时间分配还算比较合理。第一题花费的时间有点多。<br>第四题，一开始想的太复杂了。打程序前一定要确定算法的可行性，及算法的复杂度。想好再打，不然会白白浪费很多调试时间。<br><strong>T1:质数 </h2><p>第一题比较简单，先筛选处理出$\sqrt{n}$的素数，然后枚举素数。注意一下边界，记得测试小数据，和大数据就行了。</p>
<h2 id="T2-平方数游戏"><a href="#T2-平方数游戏" class="headerlink" title="T2:平方数游戏 "></a><strong>T2:平方数游戏 </h2><h2 id="这题打完40分暴力后就去做后面的题，因为过多的专注于第二问的回答。没仔细观察第一问的回答，是有循环节的。当我昨晚后面的题时，回过头已经没时间了，当时也不知道有这样的规律。下次对于额外数据还是多关注一下。T3-树上路径"><a href="#这题打完40分暴力后就去做后面的题，因为过多的专注于第二问的回答。没仔细观察第一问的回答，是有循环节的。当我昨晚后面的题时，回过头已经没时间了，当时也不知道有这样的规律。下次对于额外数据还是多关注一下。T3-树上路径" class="headerlink" title="这题打完40分暴力后就去做后面的题，因为过多的专注于第二问的回答。没仔细观察第一问的回答，是有循环节的。当我昨晚后面的题时，回过头已经没时间了，当时也不知道有这样的规律。下次对于额外数据还是多关注一下。T3:树上路径"></a>这题打完40分暴力后就去做后面的题，因为过多的专注于第二问的回答。没仔细观察第一问的回答，是有循环节的。当我昨晚后面的题时，回过头已经没时间了，当时也不知道有这样的规律。下次对于额外数据还是多关注一下。<br><strong>T3:树上路径</h2><h2 id="先画一副复杂一点的树，观察一下发现每个节点只需要维护三个值就好了。考试时不大确定其正确性。T3-抓知了"><a href="#先画一副复杂一点的树，观察一下发现每个节点只需要维护三个值就好了。考试时不大确定其正确性。T3-抓知了" class="headerlink" title="先画一副复杂一点的树，观察一下发现每个节点只需要维护三个值就好了。考试时不大确定其正确性。T3:抓知了 "></a>先画一副复杂一点的树，观察一下发现每个节点只需要维护三个值就好了。<br>考试时不大确定其正确性。<br><strong>T3:抓知了 </h2><p>首先给定一个序列，就是要我们求最长不下降子序列。dfs动态维护F数组即可。<br>考试时以为既要满足最长不下降子序列,还要求它们的和。<br>理解错题意，下次要注意。</p>
]]></content>
      <categories>
        <category>信息学</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>【NOIP】10.31总结</title>
    <url>/2015/%E3%80%90NOIP%E3%80%9110-31%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><strong>概述</h2><h2 id="今天这套题做的还好，只是一开始题目意思比较难以理解。-T1-Ocd"><a href="#今天这套题做的还好，只是一开始题目意思比较难以理解。-T1-Ocd" class="headerlink" title="今天这套题做的还好，只是一开始题目意思比较难以理解。****T1:Ocd "></a>今天这套题做的还好，只是一开始题目意思比较难以理解。<br>****<br><strong>T1:Ocd </h2><h2 id="第一题看了半天都没看明白。最后通过样例数据和猜测，明白了题目的意思。并没有什么太好的方法，打了个暴力本来想着应该过40-的数据，最后过了70-。正解也不是特别难想。-T2-Mancity"><a href="#第一题看了半天都没看明白。最后通过样例数据和猜测，明白了题目的意思。并没有什么太好的方法，打了个暴力本来想着应该过40-的数据，最后过了70-。正解也不是特别难想。-T2-Mancity" class="headerlink" title="第一题看了半天都没看明白。最后通过样例数据和猜测，明白了题目的意思。并没有什么太好的方法，打了个暴力本来想着应该过40%的数据，最后过了70%。正解也不是特别难想。****T2:Mancity "></a>第一题看了半天都没看明白。最后通过样例数据和猜测，明白了题目的意思。<br>并没有什么太好的方法，打了个暴力本来想着应该过40%的数据，最后过了70%。正解也不是特别难想。<br>****<br><strong>T2:Mancity </h2><h2 id="没有特别好的方法，一步一步走暴力-T3-Captcha"><a href="#没有特别好的方法，一步一步走暴力-T3-Captcha" class="headerlink" title="没有特别好的方法，一步一步走暴力****T3:Captcha "></a>没有特别好的方法，一步一步走暴力<br>****<br><strong>T3:Captcha </h2><hr>
<p>这题比较好玩，虽然代码复杂度比较高，但仔细想一下，发现其中的规律，还是很好做的</p>
]]></content>
      <categories>
        <category>信息学</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>【NOIP】11.13-11.14总结</title>
    <url>/2015/%E3%80%90NOIP%E3%80%9111-13-11-14%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="DAY1"><a href="#DAY1" class="headerlink" title="DAY1"></a><strong>DAY1</h2><p>这次考试时间的分配和程序调试方面都有待加强</p>
<p>T1:题目比较简单，很容易理解。写了个六重循环暴力，没有想到特别好的方法。本来可以加区间累加优化，怕写错就没加。还是拿了60。<br>这题用二分答案很好打，只不过要注意判断。一开始我将所有蛋糕块的巧克力都求出来最后判大小，超时！！直接判可以减少不少时间。</p>
<p>T2:一看没有什么思路，在纸上画了下草稿，发现有一条必经之路，每个节点都可以转到这条路的任意一个节点，求它到其他个点的最短距离。想法还是可以的。但是，在调程序时，因为太复杂始终没调处来就放弃了。</p>
<p>T3:根据样例解释和数据范围，结合题目意思，很容易就知道对于每个牛棚，要使其的噪音总和最小，只需将每个牛棚平均分配一下，这样得到的噪音总是最小的。我就只考虑m&#x3D;1的情况处理了一下，但还是错了。在余数的处理方面有问题。</p>
<p>今天的题目理解上比较容易，但是程序实现上还是有难度。</p>
<h2 id="DAY2"><a href="#DAY2" class="headerlink" title="DAY2"></a><strong>DAY2</h2><p>T1：刚开始想的时候就像枚举每一个点是否改变，打了一个dfs，最后面发现忘记考虑M的值，dfs也有些小问题。用dp的做法没想到。不是很会dp，对状态的转移，和组合数的有关知识，有些欠缺。</p>
<p>T2：看到这题本想着用字符串去做，发现会有负数且不宜分割，打了一个类似链表的数组，可能在删除节点的时候，前驱和后继出现了问题。标准答案跟程序的答案。自己试了一些小数据都没有大的问题。看完题解后，发现这道题很简单，用两个栈然后维护前缀的最大值。初赛的时候就曾见过类似的程序。很快就改出来了。</p>
<p>T3：这题刚开始并没有什么好的想法，看了一下数据范围，发现一种变换和两种变换比较好判定。但思考的方向想错了，想着将两种变换解出来，最后没写成。这题还是可以骗些分的。</p>
<h2 id="Sources"><a href="#Sources" class="headerlink" title="Sources"></a><strong>Sources</h2><p>JZOJ：3918-3920<br>JZOJ：3921-3923</p>
]]></content>
      <categories>
        <category>信息学</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>【NOIP】剑与魔法(dragons)</title>
    <url>/2015/%E3%80%90NOIP%E3%80%91%E5%89%91%E4%B8%8E%E9%AD%94%E6%B3%95(dragons)/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>万老师听说某大国很流行穿越，于是他就想写一个关于穿越的剧本。</p>
<p>闲话休提。话说老师穿越到了某一个剑与魔法的大陆。因为如此这般，所以老师从维娜艾那里得到了预言。老师一共被告知了若干件按顺序结算的事件。这些事件分为两类：战役事件（CASE）、穿越回去事件（END）。战役事件可以选择是否参加，参加了之后会获得一定的金钱。每个END事件发生需要至少参加一定数量的战役事件。特别的是，END事件如果满足要求就会强制发生。老师希望在大陆玩个够，所以他要求只有最后一个END事件会发生。老师希望获得最多的金钱，所以求助于你。   </p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>第一行一个数N，表示输入文件有多少行。</p>
<h2 id="接下来每一行用空格隔开一个字符和一个整数。字符为“c”表示战役事件，接下来的整数表示这次涨RP顺带有多少钱；字符为“e”表示穿越回去事件，接下来的整数代表至少要涨多少RP。最后一个事件保证是END事件。Output"><a href="#接下来每一行用空格隔开一个字符和一个整数。字符为“c”表示战役事件，接下来的整数表示这次涨RP顺带有多少钱；字符为“e”表示穿越回去事件，接下来的整数代表至少要涨多少RP。最后一个事件保证是END事件。Output" class="headerlink" title="接下来每一行用空格隔开一个字符和一个整数。字符为“c”表示战役事件，接下来的整数表示这次涨RP顺带有多少钱；字符为“e”表示穿越回去事件，接下来的整数代表至少要涨多少RP。最后一个事件保证是END事件。Output"></a>接下来每一行用空格隔开一个字符和一个整数。字符为“c”表示战役事件，接下来的整数表示这次涨RP顺带有多少钱；字符为“e”表示穿越回去事件，接下来的整数代表至少要涨多少RP。最后一个事件保证是END事件。<br>Output</h2><p>第一行一个整数，最多金钱数目。</p>
<h2 id="若不可能则输出-1。Sample-Input"><a href="#若不可能则输出-1。Sample-Input" class="headerlink" title="若不可能则输出-1。Sample Input"></a>若不可能则输出-1。<br>Sample Input</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">c 10</span><br><span class="line">c 12</span><br><span class="line">e 2</span><br><span class="line">c 1</span><br><span class="line">e 2</span><br></pre></td></tr></table></figure>

<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">13</span><br></pre></td></tr></table></figure>

<h2 id="Data-Constraint"><a href="#Data-Constraint" class="headerlink" title="Data Constraint"></a>Data Constraint</h2><p>30%的数据满足 N&lt;&#x3D;20</p>
<p>60%的数据满足 N&lt;&#x3D;1,000</p>
<p>100%的数据满足 N&lt;&#x3D;200,000</p>
<p>每次涨RP事件赏金不超过10,000</p>
<h2 id="穿越事件的要求不超过200-000Analysis"><a href="#穿越事件的要求不超过200-000Analysis" class="headerlink" title="穿越事件的要求不超过200,000Analysis"></a>穿越事件的要求不超过200,000<br>Analysis</h2><p>显然可以用堆来统计答案，一开始想用大根堆来统计答案，但是会发现有各种难以判断的地方。<br>所以正难则反，我们可以维护一个小根堆。首先我们要把最后一个END事件去掉，在统计答案的过程中是没有用的。从前往后坐，每次遇到CASE事件，都将对应的金钱push进堆中，每次遇到END事件都将大于END时间限制个数的金钱pop，答案就是做到最后堆中剩余金钱的总和。最后再看看堆中的元素个数是否大于最后一个END的限制值。(然而我并没有判(^__^)嘻嘻)</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight pascal"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span>	maxn=<span class="number">200000</span>;oo=<span class="number">100000000</span>;</span><br><span class="line"><span class="keyword">var</span>	i,j,n,size,last,t:longint;</span><br><span class="line">	h:<span class="keyword">array</span>[<span class="number">1</span>..maxn] <span class="keyword">of</span> longint;</span><br><span class="line">	a:<span class="keyword">array</span>[<span class="number">0</span>..maxn,<span class="number">1</span>..<span class="number">2</span>] <span class="keyword">of</span> longint;</span><br><span class="line">	b:<span class="keyword">array</span>[<span class="number">0</span>..maxn] <span class="keyword">of</span> longint;</span><br><span class="line">	ch:char;</span><br><span class="line">	ans:int64;</span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">swap</span><span class="params">(<span class="keyword">var</span> x,y:longint)</span>;</span></span><br><span class="line"><span class="keyword">var</span>	t:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	t:=x;</span><br><span class="line">	x:=y;</span><br><span class="line">	y:=t;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">down</span><span class="params">(x:longint)</span>;</span></span><br><span class="line"><span class="keyword">var</span>	y:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	y:=<span class="number">2</span>*x;</span><br><span class="line">	<span class="keyword">while</span> ((y&lt;=size) <span class="keyword">and</span> (h[x]&gt;h[y])) <span class="keyword">or</span> ((y+<span class="number">1</span>&lt;=size) <span class="keyword">and</span> (h[x]&gt;h[y+<span class="number">1</span>])) <span class="keyword">do</span></span><br><span class="line">	<span class="keyword">begin</span></span><br><span class="line">		<span class="keyword">if</span> (y+<span class="number">1</span>&lt;=size) <span class="keyword">and</span> (h[y+<span class="number">1</span>]&lt;h[y]) <span class="keyword">then</span> inc(y);</span><br><span class="line">		swap(h[x],h[y]);</span><br><span class="line">		x:=y;</span><br><span class="line">		y:=<span class="number">2</span>*x;</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">up</span><span class="params">(x:longint)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">while</span> (x&gt;<span class="number">1</span>) <span class="keyword">and</span> (h[x]&lt;h[x&gt;&gt;<span class="number">1</span>]) <span class="keyword">do</span> <span class="keyword">begin</span></span><br><span class="line">		swap(h[x],h[x&gt;&gt;<span class="number">1</span>]);</span><br><span class="line">		x:=x&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">pop</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	h[<span class="number">1</span>]:=h[size];</span><br><span class="line">	h[size]:=oo;</span><br><span class="line">	dec(size);</span><br><span class="line">	down(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">push</span><span class="params">(x:longint)</span>;</span></span><br><span class="line"><span class="keyword">var</span>	i:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	inc(size);</span><br><span class="line">	h[size]:=x;</span><br><span class="line">	up(size);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	readln(n);</span><br><span class="line">	<span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span> <span class="keyword">begin</span></span><br><span class="line">		readln(ch,a[i,<span class="number">2</span>]);</span><br><span class="line">		<span class="keyword">if</span> ch=<span class="string">&#x27;c&#x27;</span> <span class="keyword">then</span> a[i,<span class="number">1</span>]:=<span class="number">1</span> <span class="keyword">else</span> a[i,<span class="number">1</span>]:=<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n-<span class="number">1</span> <span class="keyword">do</span> <span class="keyword">begin</span></span><br><span class="line">		<span class="keyword">if</span> a[i,<span class="number">1</span>]=<span class="number">1</span> <span class="keyword">then</span> push(a[i,<span class="number">2</span>])</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">			t:=a[i,<span class="number">2</span>]-<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">while</span> size&gt;t <span class="keyword">do</span> pop;</span><br><span class="line">		<span class="keyword">end</span>;</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line">	ans:=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> size <span class="keyword">do</span> inc(ans,h[i]);</span><br><span class="line">	writeln(ans);</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>信息学</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>【NOIP】总结 10.30晚-11.5</title>
    <url>/2015/%E3%80%90NOIP%E3%80%91%E6%80%BB%E7%BB%93-10-30%E6%99%9A-11-5/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="10-30晚"><a href="#10-30晚" class="headerlink" title="10.30晚"></a><strong>10.30晚</strong></h2><p><strong>概述</strong><br>一定要用心想算法，在没想清楚之前，不要轻易打程序，不然后面耗的时间会更多</p>
<p><strong>第一题</strong>：没有细想，直接上暴力。发现暴力跑的挺快的，只有在某些特殊数据下跑的比较慢。要是细想不难发现规律，但还是有很多小细节需要注意。</p>
<p><strong>第二题</strong>：打了一个非常恶心的暴力，没有细致计算时间复杂度，最后发现好像连30%的数据都过不去。于是看了看数据范围，反过来想考察算法的时间复杂度。最后想到正解了。本来正解是对的，但因为题目描述和自己理解的一点偏差，将正解改成和暴力一样是错的了。<br>下次一定要认真细致的看题！！！</p>
<p><strong>第三题</strong>：斜率优化，比较难想，也比较难打。因为时间原因，直接打了暴力。</p>
<h2 id="11-2"><a href="#11-2" class="headerlink" title="11.2"></a><strong>11.2</strong></h2><p><strong>概述</strong><br>这套题做的很差，都不知道自己考试时在想什么。花了2.5小时打完了所有题的暴力，就陷入了无尽的思考，最后卡在了第二题中不靠谱的位运算优化，直到考试结束依旧没有调出来。时间分配不够合理。</p>
<p><strong>T1：复制&amp;粘贴2</strong><br>这题其实很简单要有分离的思想，单个字符单个字符想。当看到特殊的数据范围是要注意。考试时只想到将整体的字符串移动，没有想到可以拆开，从后往前做。<br>俗话说得好：正难则反，多角度思考。</p>
<p><strong>T2:愉快的logo设计</strong><br>题目有很好的匹配性质，然而我并没有注意到这一点，反而像另一个方向想（位运算），以致于大部分时间耗在了这道题上。</p>
<p><strong>T3:有趣的有趣的家庭菜园</strong><br>没有想到正解，就打了个纯暴力，但不知道为何只有9分，判断方式可能有问题。</p>
<h2 id="11-2晚"><a href="#11-2晚" class="headerlink" title="11.2晚"></a><strong>11.2晚</strong></h2><p><strong>概述</strong><br>对自己的算法不要过度自信，一定想到一种在最坏情况下都可过的算法。</p>
<p><strong>T1:Lala买面包</strong><br>一开始看题目感觉挺简单，就往质因数分解的方向想了。最后面算了一下最坏的时间复杂度，觉得应该比较难构造这样的数据卡我的程序，在随机数测试下表现良好。实际上我想错了。其实我也有朝其他方面想，但是因为不想放弃这种方法，其他想法想的不多。其实真正的YES情况是很少的完全可以预处理出来，然后O(1)判断。</p>
<p><strong>T2：我的天</strong><br>想了很长一段时间，觉得这题应该用线段树，但是想不到模型转换。</p>
<p><strong>T3:舳舻牌</strong><br>最怕这种博弈论的题了，当时随便想了一下部分最优解，就打了，骗了5分。</p>
<h2 id="11-3"><a href="#11-3" class="headerlink" title="11.3"></a><strong>11.3</strong></h2><p><strong>概述</strong><br>整套题都没什么感觉。觉得整个试题难度挺大的。</p>
<p><strong>T1：装饰大楼</strong><br>这题首先要观察规律，然后直接计算就好了，我模拟操作太慢了（因为怕错）。</p>
<p><strong>T2:备用钥匙</strong><br>把题目映射到时间轴后，就想不到其他得了，只能暴力</p>
<p><strong>T3：IOIOI卡片占卜</strong><br>没什么特别好的想法，那就暴力咯！</p>
<h2 id="11-3晚"><a href="#11-3晚" class="headerlink" title="11.3晚"></a><strong>11.3晚</strong></h2><p><strong>概述：</strong><br>这套题基本上能拿的分都拿了。</p>
<p><strong>T1:次芝麻</strong><br>一开始发现数据有循环节，认为应该从第一位开始循环。后来发现错了。<br>其实这题要大胆猜想，他就是不断乘2 mod (n+m)的结果，证明一下发现是可行的。<br>这题因为在循环节上耗了太多的时间所以不划算。</p>
<p><strong>T2：喝喝喝</strong><br>这题想的时间最长，我因为将问题分成了两个自问题来单独考虑，而没有思考这两个子问题的相通性。考试时想到了50%做法，但是程序实现起来太繁琐，再加上时间也不是很够就没打。</p>
<p><strong>T3:长寿花</strong><br>这题的第一个限制很好做，但是加上了第二个限制就难了。本来我就不擅长推公式，打20%暴力就完了。</p>
<h2 id="11-4"><a href="#11-4" class="headerlink" title="11.4"></a><strong>11.4</strong></h2><p><strong>概述：</strong><br>不要不屑于打暴力，有时候暴力也是可以过的。</p>
<p><strong>T1：格点统计</strong><br>观察一下就可以了O（$sqrt(n)$），注意一下细节。</p>
<p><strong>T2:电话线铺设</strong><br>考试时想到了正解，但已经没有时间打了。从数据范围推算法复杂度，很好想到正解。</p>
<p><strong>T3：老司机</strong><br>这题没有考虑到暴力可以过，而我打的暴力，太暴力。所以过的不多。</p>
<h2 id="11-5"><a href="#11-5" class="headerlink" title="11.5"></a><strong>11.5</strong></h2><p>NOIP模拟考的最后一试…<br><strong>概述：</strong><br>多思考，认真审题，当题目有些比较特殊的描述时，要细想性质。</p>
<p><strong>T1：俄罗斯套娃</strong><br>看一下就知道之前做过跟它类似的，还比这难的题。回忆一下，不难写出dp方程。</p>
<p><strong>T2：Lucas的数列</strong><br>一看就知道是线段树的题目，但是想来想去没仔细往离线方向想，其实这种有两种限制的题目（边做边加）以前做的多了，但考试时就是没有想到</p>
<p><strong>T3：旅行</strong><br>这题被我想复杂了，用了比较常用的求LCA的方法来做。但是因为没有开long long 爆类型了。其实这道题并没有那么复杂，只要用心观察题目给的特殊性质。就可以发现规律，发现规律后就非常的简单了。</p>
<p><strong>T4：Xor</strong><br>首先暴力就有30%，随便乱搞就有50%，数据非常的良心，100%的数据也不难，关键是要发现xor的实质，两个数对应的二进制位不同才可以的到更大的xor值，朝这个方向建一颗tri树就好了。</p>
]]></content>
      <categories>
        <category>信息学</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>【NOIP】独立集(bubble)</title>
    <url>/2015/%E3%80%90NOIP%E3%80%91%E7%8B%AC%E7%AB%8B%E9%9B%86-bubble/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>题目来源：<a href="http://www.luo.hustoj.com/problem.php?id=1287">http://www.luo.hustoj.com/problem.php?id=1287</a></p>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>从这个顺(dou)旺(bi)基同学的代码中，我们发现他的算法实际上是给逆序对连边，而独立集所在的集合中，任意两个都不存在连边(即不是逆序对)，那就是顺序的。并且题目要求我们要找出一个最大的独立集，求出他的长度，那就是要我们求最长不下降子序列，而因为给出的n个数是全排列。所以就是求最长上升子序列。这个可以用(nlogn)的二分查找求出。最关键的就是怎么求第二问最长上升子序列中那些点是必选的。</p>
<p>首先我们从左往右做一遍最长上升子序列，并得到他的数组f。f[i]表示以i结尾在[1..i]中的最长下上升子序列的长度<br>同样我们从右往左最一遍最长下降子序列，并得到他的数组g。g[i]表示以i为结尾的在[i..n]中的最长下降子序列。</p>
<p>ans1表示第一个答案（即最长上升子序列）的值<br>当f[i]+g[i]-1&#x3D;ans1时，就说明这个点在其中一个最长上升子序列中（但不是第二题的合法位置）。所以我们要从这些点中找出唯一的点。如果在ans2的数组中发现一个位置有两个人已经使用过了，那么这个位置的答案就是不合法的。</p>
<p>我们来看一下下面这个例子：</p>
<p><strong>i      1  2  3  4  5</strong><br><strong>a[i]  5  1  3  2  4</strong><br><strong>f[i]   1  1  2  2  3</strong><br><strong>g[i]  1  3  2  2  1</strong></p>
<p>ans1&#x3D;3<br>其中，2 3 4 5都是任意最长上升子序列中的一部分，但是因为2 与 3 的f值重复了，所以这两个点就不是答案了。</p>
<p>现在还有一个问题就是如何快速的得到f和g数组。然而网上的O(N log N)只支持求长度而不能得到每一个f或g的值。而O(N^2)的算法又太慢了。因为这道题有一个关键的条件那就是：<br>	输入的数据是全排列<br>所以我们可以从左往右求f值，将每一个f值塞入到线段数的叶子[a[i],a[i]]中然后维护线段树的最大值，当计算下一个f[i]的值时，就询问线段书[1,a[i]]的区间中的最大值,将得到的最大值+1就是当前的f[i]值，重复这样的操作就的合法的f序列。正确性显然。<br>当你从左往右添加时，由于在右边的f[i]值并没有塞入线段数中，所以询问[1,a[i]]时并不会得到那些f值，只有已经在i前面的f值才能得到，并且这些f值所对应的a[j]都要比a[i]小。就与O(n^2)的算法转移类似。具体实现可看代码。</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p>然而此题并不需要如此复杂的线段树，只要支持单点修改和区间查询最大值即可。当然如果你有能力完全可以写树状数组。</p>
<figure class="highlight pascal"><table><tr><td class="code"><pre><span class="line"><span class="keyword">uses</span>	math;</span><br><span class="line"><span class="keyword">const</span>	maxn=<span class="number">100000</span>;</span><br><span class="line"><span class="keyword">var</span>	i,n,maxx:longint;</span><br><span class="line">	h:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">4</span>*maxn,<span class="number">1</span>..<span class="number">2</span>] <span class="keyword">of</span> longint;</span><br><span class="line">	a,g,f,ans:<span class="keyword">array</span>[<span class="number">1</span>..maxn] <span class="keyword">of</span> longint;</span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">change</span><span class="params">(x,l,r,st,en,val:longint)</span>;</span></span><br><span class="line"><span class="keyword">var</span>	mid:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">if</span> (l=st) <span class="keyword">and</span> (r=en) <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">		inc(h[x,<span class="number">1</span>],val);inc(h[x,<span class="number">2</span>],val);</span><br><span class="line">	<span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">		inc(h[x+x,<span class="number">1</span>],h[x,<span class="number">2</span>]);inc(h[x+x,<span class="number">2</span>],h[x,<span class="number">2</span>]);</span><br><span class="line">		inc(h[x+x+<span class="number">1</span>,<span class="number">1</span>],h[x,<span class="number">2</span>]);inc(h[x+x+<span class="number">1</span>,<span class="number">2</span>],h[x,<span class="number">2</span>]);</span><br><span class="line">		h[x,<span class="number">2</span>]:=<span class="number">0</span>;</span><br><span class="line">		mid:=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> en&lt;=mid <span class="keyword">then</span> change(x+x,l,mid,st,en,val)</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> st&gt;mid <span class="keyword">then</span> change(x+x+<span class="number">1</span>,mid+<span class="number">1</span>,r,st,en,val)</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">			change(x+x,l,mid,st,mid,val);</span><br><span class="line">			change(x+x+<span class="number">1</span>,mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,en,val);</span><br><span class="line">		<span class="keyword">end</span>;</span><br><span class="line">		h[x,<span class="number">1</span>]:=max(h[x+x,<span class="number">1</span>],h[x+x+<span class="number">1</span>,<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quary</span><span class="params">(x,l,r,st,en:longint)</span>:</span>longint;</span><br><span class="line"><span class="keyword">var</span>	mid:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">if</span> (l=st) <span class="keyword">and</span> (r=en) <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">		<span class="keyword">exit</span>(h[x,<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">		inc(h[x+x,<span class="number">1</span>],h[x,<span class="number">2</span>]);inc(h[x+x,<span class="number">2</span>],h[x,<span class="number">2</span>]);</span><br><span class="line">		inc(h[x+x+<span class="number">1</span>,<span class="number">1</span>],h[x,<span class="number">2</span>]);inc(h[x+x+<span class="number">1</span>,<span class="number">2</span>],h[x,<span class="number">2</span>]);</span><br><span class="line">		h[x,<span class="number">2</span>]:=<span class="number">0</span>;</span><br><span class="line">		mid:=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> en&lt;=mid <span class="keyword">then</span> <span class="keyword">exit</span>(quary(x+x,l,mid,st,en))</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> st&gt;mid <span class="keyword">then</span> <span class="keyword">exit</span>(quary(x+x+<span class="number">1</span>,mid+<span class="number">1</span>,r,st,en))</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">exit</span>(max(quary(x+x,l,mid,st,mid),quary(x+x+<span class="number">1</span>,mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,en)));</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="comment">//assign(input,&#x27;3485.in&#x27;);reset(input);</span></span><br><span class="line"></span><br><span class="line">	readln(n);</span><br><span class="line">	<span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span> <span class="keyword">read</span>(a[i]);</span><br><span class="line"></span><br><span class="line">	maxx:=<span class="number">0</span>;</span><br><span class="line">	fillchar(h,sizeof(h),<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span> <span class="keyword">begin</span></span><br><span class="line">		f[i]:=quary(<span class="number">1</span>,<span class="number">1</span>,n,<span class="number">1</span>,a[i])+<span class="number">1</span>;</span><br><span class="line">		change(<span class="number">1</span>,<span class="number">1</span>,n,a[i],a[i],f[i]);</span><br><span class="line">		maxx:=max(maxx,f[i]);</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line">	fillchar(h,sizeof(h),<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> i:=n <span class="keyword">downto</span> <span class="number">1</span> <span class="keyword">do</span> <span class="keyword">begin</span></span><br><span class="line">		g[i]:=quary(<span class="number">1</span>,<span class="number">1</span>,n,a[i],n)+<span class="number">1</span>;</span><br><span class="line">		change(<span class="number">1</span>,<span class="number">1</span>,n,a[i],a[i],g[i]);</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line">	<span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span> <span class="keyword">begin</span></span><br><span class="line">		<span class="keyword">if</span> (f[i]+g[i]-<span class="number">1</span>=maxx) <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">			<span class="keyword">if</span> (ans[f[i]]&gt;<span class="number">0</span>) <span class="keyword">or</span> (ans[f[i]]=-<span class="number">1</span>) <span class="keyword">then</span> </span><br><span class="line">				ans[f[i]]:=-<span class="number">1</span> </span><br><span class="line">			<span class="keyword">else</span> ans[f[i]]:=i;</span><br><span class="line">		<span class="keyword">end</span>;</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line">	writeln(maxx);</span><br><span class="line">	<span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> maxx <span class="keyword">do</span> </span><br><span class="line">		<span class="keyword">if</span> ans[i]&gt;<span class="number">0</span> <span class="keyword">then</span> <span class="keyword">write</span>(ans[i],<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">	writeln;</span><br><span class="line"><span class="keyword">end</span>.</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>信息学</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】有向图强连通分量的Tarjan算法</title>
    <url>/2015/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E6%9C%89%E5%90%91%E5%9B%BE%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F%E7%9A%84Tarjan%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="有向图强连通分量"><a href="#有向图强连通分量" class="headerlink" title=" [有向图强连通分量]"></a><strong> [有向图强连通分量]</h2><p>在有向图G中，如果两个顶点间至少存在一条路径，称两个顶点<strong>强连通</strong>(strongly connected)。如果有向图G的每两个顶点都强连通，称G是一个<strong>强连通图</strong>。非强连通图有向图的极大强连通子图，称为强连通分量(strongly connected components)。</p>
<p>下图中，子图{1,2,3,4}为一个强连通分量，因为顶点1,2,3,4两两可达。{5},{6}也分别是两个强连通分量。</p>
<p><img data-src="https://www.byvoid.com/upload/wp/2009/04/image1.png" alt="image"></p>
<p>直接根据定义，用双向遍历取交集的方法求强连通分量，时间复杂度为O(N^2+M)。更好的方法是Kosaraju算法或Tarjan算法，两者的时间复杂度都是O(N+M)。本文介绍的是Tarjan算法。</p>
<h2 id="Tarjan算法"><a href="#Tarjan算法" class="headerlink" title="[Tarjan算法]"></a><strong>[Tarjan算法]</h2><p>Tarjan算法是基于对图深度优先搜索的算法，<u>每个强连通分量为搜索树中的一棵子树。</u>搜索时，把当前搜索树中未处理的节点加入一个堆栈，回溯时可以判断栈顶到栈中的节点是否为一个强连通分量。</p>
<p>定义DFN(u)为节点u搜索的次序编号(时间戳)，Low(u)为u或u的子树能够追溯到的最早的栈中节点的次序号。由定义可以得出，</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Low</span>(u)=Min</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">DFN</span>(u),</span><br><span class="line">    <span class="built_in">Low</span>(v),(u,v)为树枝边，u为v的父节点</span><br><span class="line">    <span class="built_in">DFN</span>(v),(u,v)为指向栈中节点的后向边(非横叉边)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><u>当DFN(u)&#x3D;Low(u)时，以u为根的搜索子树上所有节点是一个强连通分量。</u></p>
<p>算法伪代码如下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tarjan</span>(u)</span><br><span class="line">&#123;</span><br><span class="line">    DFN[u]=Low[u]=++Index                      <span class="comment">// 为节点u设定次序编号和Low初值</span></span><br><span class="line">    Stack.<span class="built_in">push</span>(u)                              <span class="comment">// 将节点u压入栈中</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">each</span> (u, v) in E                       <span class="comment">// 枚举每一条边</span></span><br><span class="line">        <span class="keyword">if</span> (v is <span class="keyword">not</span> visted)                   <span class="comment">// 如果节点v未被访问过</span></span><br><span class="line">            <span class="built_in">tarjan</span>(v)                          <span class="comment">// 继续向下找</span></span><br><span class="line">            Low[u] = <span class="built_in">min</span>(Low[u], Low[v])</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (v in S)                       <span class="comment">// 如果节点v还在栈内</span></span><br><span class="line">            Low[u] = <span class="built_in">min</span>(Low[u], DFN[v])</span><br><span class="line">    <span class="keyword">if</span> (DFN[u] == Low[u])                      <span class="comment">// 如果节点u是强连通分量的根</span></span><br><span class="line">        repeat</span><br><span class="line">            v = S.pop                          <span class="comment">// 将v退栈，为该强连通分量中一个顶点 </span></span><br><span class="line">            print v</span><br><span class="line">        <span class="built_in">until</span> (u== v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来是对算法流程的演示。</p>
<p>从节点1开始DFS，把遍历到的节点加入栈中。搜索到节点u&#x3D;6时，DFN[6]&#x3D;LOW[6]，找到了一个强连通分量。退栈到u&#x3D;v为止，{6}为一个强连通分量。<br><img data-src="https://www.byvoid.com/upload/wp/2009/04/image2.png" alt="image"><br>返回节点5，发现DFN[5]&#x3D;LOW[5]，退栈后{5}为一个强连通分量。</p>
<p><img data-src="https://www.byvoid.com/upload/wp/2009/04/image3.png" alt="image"></p>
<p>返回节点3，继续搜索到节点4，把4加入堆栈。发现节点4向节点1有后向边，节点1还在栈中，所以LOW[4]&#x3D;1。节点6已经出栈，(4,6)是横叉边，返回3，(3,4)为树枝边，所以LOW[3]&#x3D;LOW[4]&#x3D;1。</p>
<p><img data-src="https://www.byvoid.com/upload/wp/2009/04/image4.png" alt="image"></p>
<p>继续回到节点1，最后访问节点2。访问边(2,4)，4还在栈中，所以LOW[2]&#x3D;DFN[4]&#x3D;5。返回1后，发现DFN[1]&#x3D;LOW[1]，把栈中节点全部取出，组成一个连通分量{1,3,4,2}。</p>
<p><img data-src="https://www.byvoid.com/upload/wp/2009/04/image5.png" alt="image"></p>
<p>至此，算法结束。经过该算法，求出了图中全部的三个强连通分量{1,3,4,2},{5},{6}。</p>
<p>可以发现，运行Tarjan算法的过程中，每个顶点都被访问了一次，且只进出了一次堆栈，每条边也只被访问了一次，所以该算法的时间复杂度为O(N+M)。</p>
<p>求有向图的强连通分量还有一个强有力的算法，为Kosaraju算法。Kosaraju是基于对有向图及其逆图两次DFS的方法，其时间复杂度也是O(N+M)。与Trajan算法相比，Kosaraju算法可能会稍微更直观一些。但是Tarjan只用对原图进行一次DFS，不用建立逆图，更简洁。在实际的测试中，Tarjan算法的运行效率也比Kosaraju算法高30%左右。此外，该Tarjan算法与求无向图的双连通分量(割点、桥)的Tarjan算法也有着很深的联系。学习该Tarjan算法，也有助于深入理解求双连通分量的Tarjan算法，两者可以类比、组合理解。</p>
<p>求有向图的强连通分量的Tarjan算法是以其发明者Robert Tarjan命名的。Robert Tarjan还发明了求双连通分量的Tarjan算法，以及求最近公共祖先的离线Tarjan算法，在此对Tarjan表示崇高的敬意。</p>
<p>附：tarjan算法的C++程序</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    DFN[i]=LOW[i]=++Dindex;</span><br><span class="line">    instack[i]=<span class="literal">true</span>;</span><br><span class="line">    Stap[++Stop]=i;</span><br><span class="line">    <span class="keyword">for</span> (edge *e=V[i];e;e=e-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        j=e-&gt;t;</span><br><span class="line">        <span class="keyword">if</span> (!DFN[j])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(j);</span><br><span class="line">            <span class="keyword">if</span> (LOW[j]&lt;LOW[i])</span><br><span class="line">                LOW[i]=LOW[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (instack[j] &amp;&amp; DFN[j]&lt;LOW[i])</span><br><span class="line">            LOW[i]=DFN[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (DFN[i]==LOW[i])</span><br><span class="line">    &#123;</span><br><span class="line">        Bcnt++;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            j=Stap[Stop--];</span><br><span class="line">            instack[j]=<span class="literal">false</span>;</span><br><span class="line">            Belong[j]=Bcnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (j!=i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    Stop=Bcnt=Dindex=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(DFN,<span class="number">0</span>,<span class="built_in">sizeof</span>(DFN));</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">        <span class="keyword">if</span> (!DFN[i])</span><br><span class="line">            <span class="built_in">tarjan</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>附：tarjan算法的Pascal程序</p>
<figure class="highlight pascal"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">tarjan</span><span class="params">(x:longint)</span>;</span></span><br><span class="line"><span class="keyword">var</span> i,j:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	inc(time);</span><br><span class="line">	dfn[x]:=time;</span><br><span class="line">	low[x]:=time;</span><br><span class="line">	insta[x]:=true;</span><br><span class="line">	inc(sta);</span><br><span class="line">	stack[sta]:=x;</span><br><span class="line">	i:=g[x];</span><br><span class="line">	<span class="keyword">while</span> i&lt;&gt;<span class="number">0</span> <span class="keyword">do</span> <span class="keyword">begin</span></span><br><span class="line">		j:=v[i];</span><br><span class="line">		<span class="keyword">if</span> color[j]&lt;&gt;<span class="number">0</span> <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">			i:=next[i];</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">end</span>;</span><br><span class="line">		<span class="keyword">if</span> insta[j] <span class="keyword">then</span> low[x]:=min(low[x],dfn[j])</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">			tarjan(j);</span><br><span class="line">			low[x]:=min(low[x],low[j]);</span><br><span class="line">		<span class="keyword">end</span>;</span><br><span class="line">		i:=next[i];</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line">	<span class="keyword">if</span> dfn[x]=low[x] <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">		inc(tot);</span><br><span class="line">		j:=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> j&lt;&gt;x <span class="keyword">do</span> <span class="keyword">begin</span></span><br><span class="line">			j:=stack[sta];</span><br><span class="line">			dec(sta);</span><br><span class="line">			color[j]:=tot;</span><br><span class="line">			insta[j]:=false;</span><br><span class="line">			sum[tot]:=sum[tot]+w[j];</span><br><span class="line">		<span class="keyword">end</span>;</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="[参考资料]"></a><strong>[参考资料]</h2><p>Wikipedia<br>Amber的图论总结</p>
<h2 id="Sources"><a href="#Sources" class="headerlink" title="Sources"></a><strong>Sources</h2><p>BYVoid 原创作品，转载请注明。<br><a href="https://www.byvoid.com/blog/scc-tarjan">https://www.byvoid.com/blog/scc-tarjan</a></p>
]]></content>
      <categories>
        <category>信息学</category>
        <category>转载</category>
      </categories>
  </entry>
  <entry>
    <title>【转载】表达式求值问题</title>
    <url>/2015/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>　　中缀表达式的求值问题是一个比较常见的问题之一，我们通常在编写程序时，直接写出表达式让编译器去处理，很少去关心编译器是怎么对表达式进行求值的，今天我们来一起了解一下其中具体的原理和过程。</p>
<p>　　表达式一般来说有三种：前缀表达式、中缀表达式、后缀表达式，其中后缀表达式又叫做逆波兰表达式。中缀表达式是最符合人们思维方式的一种表达式，顾名思义，就是操作符在操作数的中间。而前缀表达式和后缀表达式中操作符分别在操作数的前面和操作数的后面。举个例子：</p>
<p>　　3+2</p>
<p>　　这个是最简单的一个中缀表达式。而其等同的前缀表达式形式为+32，后缀表达式形式为32+。</p>
<p>　　那么一些朋友可能会问既然中缀表达式最符合人类的思维习惯，为什么还需要前缀表达式和后缀表达式？先看一个例子，假如在前面的表达式基础上加一点东西：</p>
<p>　　3+2*5</p>
<p>　　此时的表达式很显然，如果进行计算，则先计算2*5，最后计算加法。但是如果需要先计算加法运算呢？则必须加上括号，（3+2）*5。</p>
<p>　　而如果用后缀表达式来表示，则为 32+5*，那么该表达式的计算顺序为3+2 —&gt; (3+2)*5。</p>
<p>　　区别就在这里，后缀表达式不需要用括号就能表示出 整个表达式哪部分运算先进行。同理，前缀表达式也是如此。这种表达式正好最符合计算机的处理方式，因为后缀表达式和前缀表达式求值不需要考虑优先级的问题，计算机处理起来便简单很多。</p>
<p>　　今天我们这里主要讲解中缀表达式和后缀表达式（前缀表达式和后缀表达式很类似，就不做过多赘述），下面是讲解大纲：</p>
<ul>
<li>中缀表达式如何直接求值？</li>
<li>后缀表达式如何直接求值？</li>
<li>中缀表达式如何转换为后缀表达式？</li>
</ul>
<p>1.中缀表达式直接求值</p>
<p>　　对于中缀表达式求值来说，一般最常见的直接解决办法就是利用栈，一个栈用来保存操作数，一个栈用来保存操作符。</p>
<p>　　为了简便起见，暂时表达式中只考虑简单的+，-，*，&#x2F;运算，只有圆括号，并且都是整数。</p>
<p>　　假如有这样一个表达式：$（（3+5<em>2）+3）&#x2F;5+6&#x2F;4</em>2+3$</p>
<p>　　对于这样一个表达式，如果让你来设计操作数和操作符进栈的出栈的规则，你会怎么设计？</p>
<p>　　先不看这么复杂的表达式，考虑一下简单点的，还是前面的3+2<em>5，那么很显然先进行乘法运算，后进行加法运算，但是由于操作符在操作数中间，所以当一个操作符进操作符栈时，该操作符的两个操作数并没有都进入到操作数栈中，那么如何解决呢？只有在后面一个操作符进操作符栈时，前面的一个操作符所作用的两个操作数才会全部进栈。比如3+2</em>5,栈的变化过程为：</p>
<p>　　<font color=#1E90FF>操作数栈：3      操作数栈：3   操作数栈：3 2 </font><br>　　<br>　　<font color=#1E90FF>操作符栈：空     操作符栈：+  操作符栈：+<br></font></p>
<p>　　注意此时遇到操作符“*”，是不是需要弹出操作数栈中的两个操作数进行运算呢，很显然不是，因为乘法运算法比操作符栈的栈顶运算符优先级高，也就是说当前的操作符在“+”前进行运算，那么还需要将当前操作符压栈，则变成：<br>　　<font color=#1E90FF>操作数栈：3 2   操作数栈：3 2 5</font><br>　　<br>　　<font color=#1E90FF>操作符栈：+ *  操作符栈：+ *</font></p>
<p>　　此时到了表达式的结尾，既然栈顶的操作符的优先级比栈底的操作符的优先级高，那么可以取操作符栈的栈顶操作符和操作数栈的栈顶两个元素进行计算，则得到2*5&#x3D;10，（注意从操作数栈先弹出的操作数为右操作数）。此时得到10 ，则应该把10继续压到操作数栈中，继续取操作符栈的栈顶操作符，依次进行下去，则当操作符栈为空时表示计算过程完毕，此时操作数栈中剩下的唯一元素便是整个表达式的值。</p>
<p>　　再换个例子：2*5+3,这个表达式跟前面表达式的结果虽然相同，但是操作数和操作符入栈和出栈的顺序发生了很大变化：<br><font color=#1E90FF>　　操作数栈：2     操作数栈：2   操作数栈：2 5  </font></p>
<p><font color=#1E90FF>　　操作符栈：空    操作符栈：*   操作符栈：*     </font></p>
<p> 　　此时遇到“+”，而操作符栈的栈顶操作符为“*”，栈顶操作符优先级更高，表示此时可以取操作符栈顶操作符进行运算，那么栈变成：<br><font color=#1E90FF>　　操作数栈：10   操作数栈：10 3</font></p>
<p><font color=#1E90FF>　　操作符栈：空    操作符栈：+</font></p>
<p>　　后面的过程跟前面一个例子类似。</p>
<p>　　如果复杂一点，比如包含有括号，连续的乘除法这些怎么处理呢？道理是一样的，对于左括号直接入栈，碰到右括号，则一直将操作符退栈，直到碰到左括号，则括号中的表达式计算完毕。对于连续的乘除法，跟前面例子中处理过程类似。只需要记住一点：<font color=#FF0000><strong>只有当前操作符的优先级高于操作符栈栈顶的操作符的优先级，才入栈，否则弹出操作符以及操作数进行计算直至栈顶操作符的优先级低于当前操作符，然后将当前操作符压栈。当所有的操作符处理完毕（即操作符栈为空时），操作数栈中剩下的唯一一个元素便是最终的表达式的值。</strong></font>而操作符的优先级为：+和-优先级是一样的，<em>和&#x2F;优先级是一样的，+、-的优先级低于</em>、&#x2F;的优先级。</p>
<p>　　不过需要注意的是在求值之前需要对表达式进行预处理，去掉空格、识别 负号（区分“-”是作为减号还是负号），提取操作数等。</p>
<p>　　对于“-”的区分，主要判别方法为：</p>
<p>　　1）若前一个字符为‘(‘，则必定为负号；</p>
<p>　　2）若前一个字符为’)’或者数字，则必定为减号；</p>
<p>　　3）若前面一个字符为其他运算符，如*，&#x2F;，则必定是负号；</p>
<p>　　3）若前面没有字符，即该字符为表达式的第一个字符，则必定是负号。</p>
<p>　　也就是说只有一种情况下，”-“是作为减号使用的，就是前一个字符为’)’或者数字的时候。</p>
<p>　　如果判断出“-”是作为负号使用的，这里我采用“#”来代替“-”，并将其作为一种运算（优先级最高）。比如：-3*2</p>
<p>　　我采取的做法是将”#”入栈，然后当遇到“*”时，由于栈顶操作符为”#”，因此取#，然后取操作数栈的栈顶元素（只取一个）进行运算，然后再把结果压栈。</p>
<p>　　下面是具体实现：
　　</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*2014.5.6 测试环境: mingw*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function">vector&lt;string&gt; <span class="title">preParse</span><span class="params">(<span class="type">char</span> *str)</span>   <span class="comment">//对中缀表达式进行预处理，分离出每个token</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;string&gt; tokens;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="type">char</span> *p = (<span class="type">char</span> *)<span class="built_in">malloc</span>((len<span class="number">+1</span>)*<span class="built_in">sizeof</span>(<span class="type">char</span>));  <span class="comment">//注意不要用 char *p = (char *)malloc(sizeof(str))来申请空间</span></span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;len)          <span class="comment">//去除表达式中的空格</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p[j++] = str[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    p[j]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    j=<span class="number">0</span>;</span><br><span class="line">    len = <span class="built_in">strlen</span>(p);</span><br><span class="line">    <span class="keyword">while</span>(j&lt;len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> temp[<span class="number">2</span>];</span><br><span class="line">        string token;</span><br><span class="line">        <span class="keyword">switch</span>(p[j])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">                &#123;</span><br><span class="line">                    temp[<span class="number">0</span>] =p[j];</span><br><span class="line">                    temp[<span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                    token=temp;</span><br><span class="line">                    tokens.<span class="built_in">push_back</span>(token);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(p[j<span class="number">-1</span>]==<span class="string">&#x27;)&#x27;</span>||<span class="built_in">isdigit</span>(p[j<span class="number">-1</span>]))  <span class="comment">//作为减号使用</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        temp[<span class="number">0</span>] =p[j];</span><br><span class="line">                        temp[<span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                        token=temp;</span><br><span class="line">                        tokens.<span class="built_in">push_back</span>(token);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>    <span class="comment">//作为负号使用</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        temp[<span class="number">0</span>] =<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">                        temp[<span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                        token=temp;</span><br><span class="line">                        tokens.<span class="built_in">push_back</span>(token);</span><br><span class="line">                    &#125;  </span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">default</span>:     <span class="comment">//是数字</span></span><br><span class="line">                &#123;</span><br><span class="line">                    i = j;</span><br><span class="line">                    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(p[i])&amp;&amp;i&lt;len)</span><br><span class="line">                    &#123;</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="type">char</span> *opd = (<span class="type">char</span> *)<span class="built_in">malloc</span>(i-j<span class="number">+1</span>);</span><br><span class="line">                    <span class="built_in">strncpy</span>(opd,p+j,i-j);</span><br><span class="line">                    opd[i-j]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                    token=opd;</span><br><span class="line">                    tokens.<span class="built_in">push_back</span>(token);</span><br><span class="line">                    j=i<span class="number">-1</span>;</span><br><span class="line">                    <span class="built_in">free</span>(opd);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> tokens;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getPriority</span><span class="params">(string opt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> priority;</span><br><span class="line">    <span class="keyword">if</span>(opt==<span class="string">&quot;#&quot;</span>)</span><br><span class="line">        priority = <span class="number">3</span>;  </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="string">&quot;*&quot;</span>||opt==<span class="string">&quot;/&quot;</span>)</span><br><span class="line">        priority = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="string">&quot;+&quot;</span>||opt==<span class="string">&quot;-&quot;</span>)</span><br><span class="line">        priority = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="string">&quot;(&quot;</span>)</span><br><span class="line">        priority = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> priority;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">calculate</span><span class="params">(stack&lt;<span class="type">int</span>&gt; &amp;opdStack,string opt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(opt==<span class="string">&quot;#&quot;</span>)  <span class="comment">//进行负号运算</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> opd = opdStack.<span class="built_in">top</span>();</span><br><span class="line">        <span class="type">int</span> result = <span class="number">0</span>-opd;</span><br><span class="line">        opdStack.<span class="built_in">pop</span>();</span><br><span class="line">        opdStack.<span class="built_in">push</span>(result);</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;操作符:&quot;</span>&lt;&lt;opt&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="string">&quot;操作数:&quot;</span>&lt;&lt;opd&lt;&lt;endl; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="string">&quot;+&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> rOpd = opdStack.<span class="built_in">top</span>();</span><br><span class="line">        opdStack.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> lOpd = opdStack.<span class="built_in">top</span>();</span><br><span class="line">        opdStack.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> result = lOpd + rOpd;</span><br><span class="line">        opdStack.<span class="built_in">push</span>(result); </span><br><span class="line">         </span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;操作符:&quot;</span>&lt;&lt;opt&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="string">&quot;操作数:&quot;</span>&lt;&lt;lOpd&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;rOpd&lt;&lt;endl; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="string">&quot;-&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> rOpd = opdStack.<span class="built_in">top</span>();</span><br><span class="line">        opdStack.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> lOpd = opdStack.<span class="built_in">top</span>();</span><br><span class="line">        opdStack.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> result = lOpd - rOpd;</span><br><span class="line">        opdStack.<span class="built_in">push</span>(result); </span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;操作符:&quot;</span>&lt;&lt;opt&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="string">&quot;操作数:&quot;</span>&lt;&lt;lOpd&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;rOpd&lt;&lt;endl; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="string">&quot;*&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> rOpd = opdStack.<span class="built_in">top</span>();</span><br><span class="line">        opdStack.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> lOpd = opdStack.<span class="built_in">top</span>();</span><br><span class="line">        opdStack.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> result = lOpd * rOpd;</span><br><span class="line">        opdStack.<span class="built_in">push</span>(result); </span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;操作符:&quot;</span>&lt;&lt;opt&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="string">&quot;操作数:&quot;</span>&lt;&lt;lOpd&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;rOpd&lt;&lt;endl; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="string">&quot;/&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> rOpd = opdStack.<span class="built_in">top</span>();</span><br><span class="line">        opdStack.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> lOpd = opdStack.<span class="built_in">top</span>();</span><br><span class="line">        opdStack.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> result = lOpd / rOpd;</span><br><span class="line">        opdStack.<span class="built_in">push</span>(result); </span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;操作符:&quot;</span>&lt;&lt;opt&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="string">&quot;操作数:&quot;</span>&lt;&lt;lOpd&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;rOpd&lt;&lt;endl; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">evaMidExpression</span><span class="params">(<span class="type">char</span> *str)</span>   <span class="comment">//中缀表达式直接求值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;string&gt; tokens = <span class="built_in">preParse</span>(str);</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> size = tokens.<span class="built_in">size</span>();</span><br><span class="line">     </span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; opdStack;     <span class="comment">//存储操作数</span></span><br><span class="line">    stack&lt;string&gt; optStack;   <span class="comment">//存储操作符</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        string token = tokens[i];</span><br><span class="line">        <span class="keyword">if</span>(token==<span class="string">&quot;#&quot;</span>||token==<span class="string">&quot;+&quot;</span>||token==<span class="string">&quot;-&quot;</span>||token==<span class="string">&quot;*&quot;</span>||token==<span class="string">&quot;/&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(optStack.<span class="built_in">size</span>()==<span class="number">0</span>)   <span class="comment">//如果操作符栈为空</span></span><br><span class="line">            &#123;</span><br><span class="line">                optStack.<span class="built_in">push</span>(token);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> tokenPriority = <span class="built_in">getPriority</span>(token);</span><br><span class="line">                string topOpt = optStack.<span class="built_in">top</span>();</span><br><span class="line">                <span class="type">int</span> topOptPriority = <span class="built_in">getPriority</span>(topOpt);</span><br><span class="line">                <span class="keyword">if</span>(tokenPriority&gt;topOptPriority)</span><br><span class="line">                &#123;</span><br><span class="line">                    optStack.<span class="built_in">push</span>(token);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">while</span>(tokenPriority&lt;=topOptPriority)</span><br><span class="line">                    &#123;</span><br><span class="line">                        optStack.<span class="built_in">pop</span>();</span><br><span class="line">                        <span class="built_in">calculate</span>(opdStack,topOpt);</span><br><span class="line">                        <span class="keyword">if</span>(optStack.<span class="built_in">size</span>()&gt;<span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            topOpt = optStack.<span class="built_in">top</span>();</span><br><span class="line">                            topOptPriority = <span class="built_in">getPriority</span>(topOpt);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                         </span><br><span class="line">                    &#125;</span><br><span class="line">                    optStack.<span class="built_in">push</span>(token);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(token==<span class="string">&quot;(&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            optStack.<span class="built_in">push</span>(token);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(token==<span class="string">&quot;)&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(optStack.<span class="built_in">top</span>()!=<span class="string">&quot;(&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                string topOpt = optStack.<span class="built_in">top</span>();</span><br><span class="line">                <span class="built_in">calculate</span>(opdStack,topOpt);</span><br><span class="line">                optStack.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            optStack.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>   <span class="comment">//如果是操作数，直接入操作数栈</span></span><br><span class="line">        &#123;</span><br><span class="line">            opdStack.<span class="built_in">push</span>(<span class="built_in">atoi</span>(token.<span class="built_in">c_str</span>()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(optStack.<span class="built_in">size</span>()!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        string topOpt = optStack.<span class="built_in">top</span>();</span><br><span class="line">        <span class="built_in">calculate</span>(opdStack,topOpt);</span><br><span class="line">        optStack.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> opdStack.<span class="built_in">top</span>();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> *str = <span class="string">&quot;((3+5*2)+3)/5+(-6)/4*2+3&quot;</span>;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">evaMidExpression</span>(str)&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　运行结果：<br>　<img data-src="http://images.cnitblog.com/i/288799/201405/062023370104707.jpg" alt="这里写图片描述"></p>
<p>2.后缀表达式直接求值</p>
<p>　　由于后缀表达式不需要用括号来表示计算顺序，因此处理起来比较简单，具体的可以参照：<br><a href="http://www.cnblogs.com/dolphin0520/p/3708587.html">http://www.cnblogs.com/dolphin0520/p/3708587.html</a><br>3.中缀表达式如何转为后缀</p>
<p>　　大部分数据结构教材在讲述 栈的时候都会涉及到中缀表达式转为后缀表达式的问题，因为这个是栈的典型应用之一。因此很多教材上都会利用栈来进行转换，这里我们来讨论一下最常见的两种转换思路和一种简便的验证方法。</p>
<ul>
<li>利用二叉树进行转换</li>
</ul>
<p>　　由于二叉树本身结构的特殊性，使得我们可以利用它来很轻松地将中缀表达式转变成后缀表达式，事实上，只要根据中缀表达式建立好相应的二叉树之后，直接对二叉树进行前序遍历和后序遍历便可得到前缀表达式和后缀表达式。在利用二叉树来表示表达式时，用叶子节点来存储操作数，用内部节点存储操作符，比如这样一个表达式3*5+5&#x2F;2+（3+5）*2，表示成二叉树的形式（注意其有等同的其他形式）就是：<img data-src="http://images.cnitblog.com/i/288799/201405/072009283855034.jpg" alt="这里写图片描述"><br>其实讲中缀表达式的过程转变成二叉树的形式是一个递归的过程，比如有一个表达式，其对应的的二叉树的根节点必定是优先级最低的操作符（也就是说是整个表达式中最后进行的运算操作），然后再在操作符的左部分中找出最后进行的操作符作为根节点的左孩子，在操作符的右部分中找出最后进行的操作符作为根节点的右孩子，然后知道左部分或者右部分是单纯的操作数，则作为叶子节点，直到整个二叉树建立完毕。</p>
<p>　　下面是具体实现：</p>
<p> 　　参考了一下这篇博文的实现，但是这篇博文没有考虑减号作为负号使用的情况。<br><a href="http://blog.csdn.net/ericming200409/article/details/5919883">http://blog.csdn.net/ericming200409/article/details/5919883</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">测试环境：VS2010</span><br><span class="line">*/</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;cctype&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;cstdlib&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"> </span><br><span class="line">typedef struct node</span><br><span class="line">&#123;</span><br><span class="line">    struct node *left;</span><br><span class="line">    struct node *right;</span><br><span class="line">    char *data;</span><br><span class="line">&#125;BinTree;</span><br><span class="line"> </span><br><span class="line">char * preProcess(char *str)   //预处理，除去空格，将负号替代为#</span><br><span class="line">&#123;</span><br><span class="line">    int len = strlen(str);</span><br><span class="line">    char *p = (char *)malloc(sizeof(char)*len);</span><br><span class="line">    int i=0,j=0;</span><br><span class="line">    while(i&lt;len)          //去除表达式中的空格</span><br><span class="line">    &#123;</span><br><span class="line">        if(str[i]==&#x27; &#x27;)</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        p[j++] = str[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    p[j]=&#x27;\0&#x27;;</span><br><span class="line">    j=0;</span><br><span class="line">    len = strlen(p);</span><br><span class="line">    while(j&lt;len)</span><br><span class="line">    &#123;</span><br><span class="line">        if(p[j]==&#x27;-&#x27;)</span><br><span class="line">        &#123;</span><br><span class="line">            if(!(p[j-1]==&#x27;)&#x27;||isdigit(p[j-1])))  //作为减号使用</span><br><span class="line">            &#123;</span><br><span class="line">                p[j]=&#x27;#&#x27;;  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">/*</span><br><span class="line">最后执行的操作符一定是在括号外面，也就是说brackets一定是等于0的，</span><br><span class="line">*/</span><br><span class="line">int indexOfOpt(char *str,int begin ,int end)   //寻找最后执行的操作符的下标</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    int brackets=0;                    //所在括号层次</span><br><span class="line">    int index = -1;</span><br><span class="line">    int existAddOrMinus = 0;</span><br><span class="line">    int existMulOrDevide = 0;</span><br><span class="line">    while(str[begin]==&#x27;(&#x27;&amp;&amp;str[end]==&#x27;)&#x27;)   //去除最外层的括号</span><br><span class="line">    &#123;</span><br><span class="line">        begin++;</span><br><span class="line">        end--;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=begin;i&lt;=end;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(str[i]==&#x27;(&#x27;)</span><br><span class="line">            brackets++;</span><br><span class="line">        else if(str[i]==&#x27;)&#x27;)</span><br><span class="line">            brackets--;</span><br><span class="line">        else if((str[i]==&#x27;+&#x27;||str[i]==&#x27;-&#x27;)&amp;&amp;brackets==0)</span><br><span class="line">        &#123;</span><br><span class="line">            index = i;</span><br><span class="line">            existAddOrMinus = 1;    //存在加减号</span><br><span class="line">        &#125;</span><br><span class="line">        else if((str[i]==&#x27;*&#x27;||str[i]==&#x27;/&#x27;)&amp;&amp;brackets==0&amp;&amp;existAddOrMinus==0)</span><br><span class="line">        &#123;</span><br><span class="line">            index = i;</span><br><span class="line">            existMulOrDevide = 1;  //存在乘除号</span><br><span class="line">        &#125;</span><br><span class="line">        else if(str[i]==&#x27;#&#x27;&amp;&amp;brackets==0&amp;&amp;existAddOrMinus==0&amp;&amp;existMulOrDevide==0)  //用&#x27;#&#x27;代表负号</span><br><span class="line">        &#123;</span><br><span class="line">            index = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return index;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">BinTree * createBinTree(char *str,int begin,int end)</span><br><span class="line">&#123;</span><br><span class="line">    BinTree *p =(BinTree *)malloc(sizeof(BinTree));;</span><br><span class="line">    int index = indexOfOpt(str,begin,end);</span><br><span class="line">    cout&lt;&lt;&quot;index:&quot;&lt;&lt;index&lt;&lt;endl; </span><br><span class="line">    if(index==-1)   //表示只有操作数了</span><br><span class="line">    &#123;</span><br><span class="line">        while(str[begin]==&#x27;(&#x27;&amp;&amp;str[end]==&#x27;)&#x27;)</span><br><span class="line">        &#123;</span><br><span class="line">            begin++;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;data = (char *)malloc(sizeof(end-begin+2));</span><br><span class="line">        int i,j=0;</span><br><span class="line">        for(i=begin;i&lt;=end;i++) </span><br><span class="line">            p-&gt;data[j++] = str[i];</span><br><span class="line">        p-&gt;data[j]=&#x27;\0&#x27;;</span><br><span class="line">        p-&gt;left = NULL;</span><br><span class="line">        p-&gt;right = NULL;</span><br><span class="line">        cout&lt;&lt;&quot;操作数:&quot;&lt;&lt;p-&gt;data&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        p-&gt;data = (char*)malloc(2);</span><br><span class="line">        p-&gt;data[0] = str[index];</span><br><span class="line">        p-&gt;data[1]=&#x27;\0&#x27;;</span><br><span class="line">        cout&lt;&lt;&quot;操作符:&quot;&lt;&lt;p-&gt;data&lt;&lt;endl;</span><br><span class="line">             </span><br><span class="line">        while(str[begin]==&#x27;(&#x27;&amp;&amp;str[end]==&#x27;)&#x27;)</span><br><span class="line">        &#123;</span><br><span class="line">            begin++;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">        if(str[index]==&#x27;#&#x27;)  //是负号</span><br><span class="line">        &#123;</span><br><span class="line">            p-&gt;left = NULL;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            p-&gt;left = createBinTree(str,begin,index-1);</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;right = createBinTree(str,index+1,end);</span><br><span class="line">    &#125;</span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void preOrder(BinTree *root)</span><br><span class="line">&#123;</span><br><span class="line">    if(root!=NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;root-&gt;data&lt;&lt;&quot; &quot;;</span><br><span class="line">        preOrder(root-&gt;left);</span><br><span class="line">        preOrder(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void inOrder(BinTree *root)</span><br><span class="line">&#123;</span><br><span class="line">    if(root!=NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        inOrder(root-&gt;left);</span><br><span class="line">        cout&lt;&lt;root-&gt;data&lt;&lt;&quot; &quot;;</span><br><span class="line">        inOrder(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void postOrder(BinTree *root)</span><br><span class="line">&#123;</span><br><span class="line">    if(root!=NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        postOrder(root-&gt;left);</span><br><span class="line">        postOrder(root-&gt;right);</span><br><span class="line">        cout&lt;&lt;root-&gt;data&lt;&lt;&quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    char *str = &quot;((3+5*2)+3)/5+(-6)/4*2+3&quot;;</span><br><span class="line">    char *newStr = preProcess(str);</span><br><span class="line">    cout&lt;&lt;newStr&lt;&lt;endl;</span><br><span class="line">    BinTree *root=createBinTree(newStr,0,strlen(newStr)-1);</span><br><span class="line">    inOrder(root);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    postOrder(root);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码在VS2010下运行是没有问题的，但是在gcc下编译运行会崩溃，调试了很久没发现原因（如果有哪位朋友知道原因的请麻烦告知）。测试结果：<br><img data-src="http://images.cnitblog.com/i/288799/201405/142108574687965.jpg" alt="这里写图片描述"></p>
<ul>
<li>利用栈进行转换</li>
</ul>
<p>　　利用栈进行转换的思路其实跟前面直接对中缀表达式求值的过程类似，在这过程中需要一个栈用来保存操作符optStack，需要一个数组用来保存后缀表达式suffix[]，然后从头到尾扫描表达式</p>
<p>　　1）如果遇到操作符，则跟optStack的栈顶操作符比较优先级，如果大于栈顶操作符的优先级，则入栈，否则不断取栈顶操作符加到suffix的末尾，直到栈顶操作符优先级低于该操作符，然后将该操作符入栈；</p>
<p>　　2）遇到操作数，直接加到suffix的末尾</p>
<p>　　3）遇到左括号，入栈；</p>
<p>　　4）遇到右括号，则依次弹出栈顶操作符加到suffix的末尾，直到遇到左括号，然后将左括号出栈。</p>
<p>　　具体实现：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*2014.5.6 测试环境: mingw*/</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;cstdlib&gt;</span><br><span class="line">#include &lt;cctype&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">vector&lt;string&gt; preParse(char *str)   //对中缀表达式进行预处理，分离出每个token</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;string&gt; tokens;</span><br><span class="line">    int len = strlen(str);</span><br><span class="line">    char *p = (char *)malloc((len+1)*sizeof(char));  //注意不要用 char *p = (char *)malloc(sizeof(str))来申请空间</span><br><span class="line">    int i=0,j=0;</span><br><span class="line">    while(i&lt;len)          //去除表达式中的空格</span><br><span class="line">    &#123;</span><br><span class="line">        if(str[i]==&#x27; &#x27;)</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        p[j++] = str[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    p[j]=&#x27;\0&#x27;;</span><br><span class="line">    j=0;</span><br><span class="line">    len = strlen(p);</span><br><span class="line">    while(j&lt;len)</span><br><span class="line">    &#123;</span><br><span class="line">        char temp[2];</span><br><span class="line">        string token;</span><br><span class="line">        switch(p[j])</span><br><span class="line">        &#123;</span><br><span class="line">            case &#x27;+&#x27;:</span><br><span class="line">            case &#x27;*&#x27;:</span><br><span class="line">            case &#x27;/&#x27;:</span><br><span class="line">            case &#x27;(&#x27;:</span><br><span class="line">            case &#x27;)&#x27;:</span><br><span class="line">                &#123;</span><br><span class="line">                    temp[0] =p[j];</span><br><span class="line">                    temp[1] = &#x27;\0&#x27;;</span><br><span class="line">                    token=temp;</span><br><span class="line">                    tokens.push_back(token);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            case &#x27;-&#x27;:</span><br><span class="line">                &#123;</span><br><span class="line">                    if(p[j-1]==&#x27;)&#x27;||isdigit(p[j-1]))  //作为减号使用</span><br><span class="line">                    &#123;</span><br><span class="line">                        temp[0] =p[j];</span><br><span class="line">                        temp[1] = &#x27;\0&#x27;;</span><br><span class="line">                        token=temp;</span><br><span class="line">                        tokens.push_back(token);</span><br><span class="line">                    &#125;</span><br><span class="line">                    else    //作为负号使用</span><br><span class="line">                    &#123;</span><br><span class="line">                        temp[0] =&#x27;#&#x27;;</span><br><span class="line">                        temp[1] = &#x27;\0&#x27;;</span><br><span class="line">                        token=temp;</span><br><span class="line">                        tokens.push_back(token);</span><br><span class="line">                    &#125;  </span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            default:     //是数字</span><br><span class="line">                &#123;</span><br><span class="line">                    i = j;</span><br><span class="line">                    while(isdigit(p[i])&amp;&amp;i&lt;len)</span><br><span class="line">                    &#123;</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    char *opd = (char *)malloc(i-j+1);</span><br><span class="line">                    strncpy(opd,p+j,i-j);</span><br><span class="line">                    opd[i-j]=&#x27;\0&#x27;;</span><br><span class="line">                    token=opd;</span><br><span class="line">                    tokens.push_back(token);</span><br><span class="line">                    j=i-1;</span><br><span class="line">                    free(opd);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    free(p);</span><br><span class="line">    return tokens;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int getPriority(string opt)</span><br><span class="line">&#123;</span><br><span class="line">    int priority;</span><br><span class="line">    if(opt==&quot;#&quot;)</span><br><span class="line">        priority = 3;  </span><br><span class="line">    else if(opt==&quot;*&quot;||opt==&quot;/&quot;)</span><br><span class="line">        priority = 2;</span><br><span class="line">    else if(opt==&quot;+&quot;||opt==&quot;-&quot;)</span><br><span class="line">        priority = 1;</span><br><span class="line">    else if(opt==&quot;(&quot;)</span><br><span class="line">        priority = 0;</span><br><span class="line">    return priority;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">vector&lt;string&gt; toSuffix(char *str)  //转变为后缀形式</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;string&gt; tokens = preParse(str);</span><br><span class="line">    int i=0;</span><br><span class="line">    int size = tokens.size();</span><br><span class="line">     </span><br><span class="line">    vector&lt;string&gt; suffix;     //存储后缀表达式</span><br><span class="line">    stack&lt;string&gt; optStack;   //存储操作符</span><br><span class="line">     </span><br><span class="line">    for(i=0;i&lt;size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        string token = tokens[i];</span><br><span class="line">        if(token==&quot;#&quot;||token==&quot;+&quot;||token==&quot;-&quot;||token==&quot;*&quot;||token==&quot;/&quot;)</span><br><span class="line">        &#123;</span><br><span class="line">            if(optStack.size()==0)   //如果操作符栈为空</span><br><span class="line">            &#123;</span><br><span class="line">                optStack.push(token);</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                int tokenPriority = getPriority(token);</span><br><span class="line">                string topOpt = optStack.top();</span><br><span class="line">                int topOptPriority = getPriority(topOpt);</span><br><span class="line">                if(tokenPriority&gt;topOptPriority)</span><br><span class="line">                &#123;</span><br><span class="line">                    optStack.push(token);</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    while(tokenPriority&lt;=topOptPriority)</span><br><span class="line">                    &#123;</span><br><span class="line">                        optStack.pop();</span><br><span class="line">                        suffix.push_back(topOpt);</span><br><span class="line">                        if(optStack.size()&gt;0)</span><br><span class="line">                        &#123;</span><br><span class="line">                            topOpt = optStack.top();</span><br><span class="line">                            topOptPriority = getPriority(topOpt);</span><br><span class="line">                        &#125;</span><br><span class="line">                        else</span><br><span class="line">                            break;</span><br><span class="line">                         </span><br><span class="line">                    &#125;</span><br><span class="line">                    optStack.push(token);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">        else if(token==&quot;(&quot;)</span><br><span class="line">        &#123;</span><br><span class="line">            optStack.push(token);</span><br><span class="line">        &#125;</span><br><span class="line">        else if(token==&quot;)&quot;)</span><br><span class="line">        &#123;</span><br><span class="line">            while(optStack.top()!=&quot;(&quot;)</span><br><span class="line">            &#123;</span><br><span class="line">                string topOpt = optStack.top();</span><br><span class="line">                suffix.push_back(topOpt);</span><br><span class="line">                optStack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            optStack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        else   //如果是操作数，直接入操作数栈</span><br><span class="line">        &#123;</span><br><span class="line">            suffix.push_back(token);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    while(optStack.size()!=0)</span><br><span class="line">    &#123;</span><br><span class="line">        string topOpt = optStack.top();</span><br><span class="line">        suffix.push_back(topOpt);</span><br><span class="line">        optStack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    return suffix;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    char *str = &quot;((3+5*2)+3)/5+(-6)/4*2+3&quot;;</span><br><span class="line">    vector&lt;string&gt; suffix = toSuffix(str);</span><br><span class="line">    int size = suffix.size();</span><br><span class="line">    for(int i=0;i&lt;size;i++)</span><br><span class="line">        cout&lt;&lt;suffix[i]&lt;&lt;&quot; &quot;;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>　测试结果：<br>　<a href="http://images.cnitblog.com/i/288799/201405/142229201091309.jpg">http://images.cnitblog.com/i/288799/201405/142229201091309.jpg</a>
　</p>
<ul>
<li>简便验证办法</li>
</ul>
<p>　　最后一种办法可以很快速地求出中缀表达式对应的前缀表达式和后缀表达式，就是添括号去括号法。</p>
<p>　　比如有表达式： （3+5<em>2）-2</em>3</p>
<p>　　先对每一个小部分添加括号： （（3+（5<em>2））-（2</em>3））</p>
<p>　　然后将每个操作符放到括号后面：（（3（52）<em>）+（23）</em>）-</p>
<p>　　然后去括号：352*+23*-</p>
<p>　　便得到了后缀表达式，前缀表达式类似（只需把操作符放到括号前面即可）。</p>
<hr>
<p>作者：<a href="http://www.cnblogs.com/dolphin0520/">海子</a><br>来源：<a href="http://www.cnblogs.com/dolphin0520/p/3708602.html">http://www.cnblogs.com/dolphin0520/p/3708602.html</a><br>出处：<a href="http://www.cnblogs.com/dolphin0520/">http://www.cnblogs.com/dolphin0520/</a><br>　　　　<br>本博客中未标明转载的文章归作者海子和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利</p>
<hr>
]]></content>
      <categories>
        <category>信息学</category>
        <category>转载</category>
      </categories>
  </entry>
  <entry>
    <title>个人数字信息存储与分布</title>
    <url>/2018/%E4%B8%AA%E4%BA%BA%E6%95%B0%E5%AD%97%E4%BF%A1%E6%81%AF%E5%AD%98%E5%82%A8%E4%B8%8E%E5%88%86%E5%B8%83/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>标题可能有点奇怪，但我实在找不到好的标题了。<br>主要列举目前我的各种数字信息存储地，以及为何这样存储。<br>本想统一各大平台的信息存储，但最后发现很难做到。因为各大平台的独立性较强，以及整理需要很长时间，也不划算。<br>随着国内版权保护越来越严，国内互联网产品有着各种不稳定因素 <del>(已经被网盘坑的不再信任了)</del> ，因此买了个移动硬盘来备份和存储我的数据。<br>好消息，2023年长江存储技术突破，带来了固态硬盘价格大幅下降。终于有物美价廉的硬盘用了。坏消息到2024年又涨价了！</p>
<h1 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h1><p>本地存储主要存储重要(私密)数据<br>遵循以下目录结构：</p>
<table>
<thead>
<tr>
<th>目录</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>Inbox</td>
<td>收件夹，用于存放刚到，还未归类的文件</td>
</tr>
<tr>
<td>Archive</td>
<td>归档，将文件归类后存放。只在一个移动硬盘上有完整资料</td>
</tr>
<tr>
<td>Sync</td>
<td>同步，用于同步重要的冷数据</td>
</tr>
</tbody></table>
<h2 id="存储策略"><a href="#存储策略" class="headerlink" title="存储策略"></a>存储策略</h2><p>目前的策略是重要数据两个移动硬盘互相同步做冷备份，两个移动硬盘一个在学校一个在家做异地备份。<br>网上可找到的各种影视剧资源及软件(破解)单移动硬盘存储。（无备份）<br>另外有一个M.2移动固态硬盘盒。用作存储一些需要高速读写的数据。（无备份）</p>
<h2 id="移动硬盘"><a href="#移动硬盘" class="headerlink" title="移动硬盘"></a>移动硬盘</h2><p>空间最大，方便拔插，将网盘中的东西备份，相机手机图片视频，部分系统镜像文件，部分难找到的破解软件及各种影视剧。做冷数据的归档使用。</p>
<h2 id="Syncthing"><a href="#Syncthing" class="headerlink" title="Syncthing"></a>Syncthing</h2><p>同步各台设备常用的热数据。<br>目前同步的文件夹有</p>
<table>
<thead>
<tr>
<th>文件夹</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>DCIM</td>
<td>手机相册及视频，部分文件同步</td>
</tr>
<tr>
<td>SyncFolder</td>
<td>同步文件夹，类似以前的坚果云</td>
</tr>
<tr>
<td>Zotero</td>
<td>存放各种文献附件，在两台电脑间同步</td>
</tr>
</tbody></table>
<h1 id="云存储"><a href="#云存储" class="headerlink" title="云存储"></a>云存储</h1><h2 id="小米云"><a href="#小米云" class="headerlink" title="小米云"></a>小米云</h2><p>除相册功能外，其余同步功能均开启。<br>通讯录同步使用小米云。<br>随着空间不大(10G)，加上现在有稳定的梯子，依赖性减弱。<br> <del>(一入miui深似海)</del> </p>
<h2 id="Onedrive"><a href="#Onedrive" class="headerlink" title="Onedrive"></a>Onedrive</h2><p>部分网站上的数据，也会借助OneDrive来同步，目前的主力同步盘。</p>
<h2 id="中国移动云盘"><a href="#中国移动云盘" class="headerlink" title="中国移动云盘"></a>中国移动云盘</h2><p>自从Google Drive限制存储之后，想着还是把影视资源存国内方便些。<br>正好有alist项目可以替代以前的GoIndex。</p>
<h2 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h2><h3 id="Google-Drive"><a href="#Google-Drive" class="headerlink" title="Google Drive"></a>Google Drive</h3><p>我有两个账号，一个是自己的15G免费空间账号，主要存放一些文档及其他地方分享得到的资源(非主力网盘)<br>另外一个是淘宝上买的无限空间教育版账号，里面存放一些视频，方便我随时随地取视频下来看，和一些大软件。有时需要给VPS装机，备份数据用。套Cloudflare Workers可以实现免翻下载。<br>2023年，Google更新政策，淘宝买的号用不了了，一是rclone无法挂载，二是不能往里加新文件。<br>根据新加坡vultr服务器测速下载可达118M&#x2F;s，服务器speedtest测速212.89M&#x2F;s。</p>
<h3 id="Google-photos"><a href="#Google-photos" class="headerlink" title="Google photos"></a>Google photos</h3><p>备份自己父母手机以及相机上的照片视频<br>结合Google算法，整理查看方便。<br>爷青结，Google Photos于2021年6月1日停止免费高质量画质照片视频上传。 且行且珍惜</p>
<h2 id="Git托管平台"><a href="#Git托管平台" class="headerlink" title="Git托管平台"></a>Git托管平台</h2><h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><p>主要代码托管平台<br>大学以来主要的公私有仓库<br>博客源文件、服务器部署文件、代码文件…<br>Github Actions + Codespaces + Copilot 可太香了。</p>
<h3 id="Gitee"><a href="#Gitee" class="headerlink" title="Gitee"></a>Gitee</h3><p>与其他同学老师交流使用的Git托管平台，速度快，没有墙的干扰。<br>部分高中时期的私有库依然存于此。<br>现在Gitee对公开仓库需要审核后可见。</p>
<h2 id="对象存储"><a href="#对象存储" class="headerlink" title="对象存储"></a>对象存储</h2><h3 id="阿里云OSS"><a href="#阿里云OSS" class="headerlink" title="阿里云OSS"></a>阿里云OSS</h3><p><del>给我的阿里云服务器扩容40G，主要用来存阿里云服务器上的一些静态资源。带宽堪忧，不走内网毫无吸引力。</del><br>公网访问资源延迟低，可加速静态资源。<br>目前用于博客，与部分对速度和可用性要求比较高的静态资源。<br>阿里云香港OSS有每月5G流量的免费额度。<br>两个主要Bucket</p>
<ul>
<li>lyz05blog:存放本博客编译后的静态网页，并开启静态网站模式，用于展示博客。存放对速度和可用性要求比较高的静态资源</li>
<li>hkosslog：用于记录oss的访问日志，配合阿里云函数计算，缓存一些静态文件。</li>
</ul>
<h1 id="结构化数据"><a href="#结构化数据" class="headerlink" title="结构化数据"></a>结构化数据</h1><h2 id="OneDrive-Outlook-OneNote-ToDo-Edge-微软全家桶"><a href="#OneDrive-Outlook-OneNote-ToDo-Edge-微软全家桶" class="headerlink" title="OneDrive&amp;Outlook+OneNote+ToDo+Edge(微软全家桶)"></a>OneDrive&amp;Outlook+OneNote+ToDo+Edge(微软全家桶)</h2><p>AI发力，微软又站起来了，All in微软。<br>尽管境内速度不稳定，但好过境内彻底连不上。</p>
<h2 id="Gmail-QQ邮箱-邮箱"><a href="#Gmail-QQ邮箱-邮箱" class="headerlink" title="Gmail&amp;QQ邮箱(邮箱)"></a>Gmail&amp;QQ邮箱(邮箱)</h2><p>Gmail：境外和正式邮箱<br>QQ邮箱：境内邮箱</p>
<h2 id="高德地图-Google地图-地图"><a href="#高德地图-Google地图-地图" class="headerlink" title="高德地图&amp;Google地图(地图)"></a>高德地图&amp;Google地图(地图)</h2><p>高德地图：国内导航，收藏记录地方<br>Google地图：个人轨迹跟踪，国外导航，收藏记录地方</p>
<h2 id="Google-Play-酷安-Android-App"><a href="#Google-Play-酷安-Android-App" class="headerlink" title="Google Play&amp;酷安(Android App)"></a>Google Play&amp;酷安(Android App)</h2><p>收藏与购买的安卓应用列表</p>
<h2 id="豆瓣-影视剧评分"><a href="#豆瓣-影视剧评分" class="headerlink" title="豆瓣(影视剧评分)"></a>豆瓣(影视剧评分)</h2><p>用于标记电影，电视剧，图书，唱片等相关的状态，以及评分，评论等内容。</p>
<h2 id="微信-QQ-Telegram-社交"><a href="#微信-QQ-Telegram-社交" class="headerlink" title="微信&amp;QQ&amp;Telegram(社交)"></a>微信&amp;QQ&amp;Telegram(社交)</h2><p>各种公众号，朋友圈的文章，及部分聊天记录</p>
<h2 id="知乎-问答"><a href="#知乎-问答" class="headerlink" title="知乎(问答)"></a>知乎(问答)</h2><p>收藏的知乎答案。</p>
<h2 id="bilibili-Youtube-视频"><a href="#bilibili-Youtube-视频" class="headerlink" title="bilibili&amp;Youtube(视频)"></a>bilibili&amp;Youtube(视频)</h2><p>收藏的B站相关视频，关注的各种YouTube频道，及收藏的YouTube视频。</p>
<h2 id="掌阅-多看-图书"><a href="#掌阅-多看-图书" class="headerlink" title="掌阅&amp;多看(图书)"></a>掌阅&amp;多看(图书)</h2><p>购买的正版图书，及上传的文件</p>
<h2 id="京东-淘宝-拼多多-闲鱼-转转-小米商城-小米有品-购物"><a href="#京东-淘宝-拼多多-闲鱼-转转-小米商城-小米有品-购物" class="headerlink" title="京东&amp;淘宝&amp;拼多多&amp;闲鱼&amp;转转&amp;小米商城&amp;小米有品(购物)"></a>京东&amp;淘宝&amp;拼多多&amp;闲鱼&amp;转转&amp;小米商城&amp;小米有品(购物)</h2><p>购物订单</p>
<h2 id="美团-外卖"><a href="#美团-外卖" class="headerlink" title="美团(外卖)"></a>美团(外卖)</h2><p>外卖订单</p>
<h2 id="微信支付-支付宝-PayPal-火币Pro-钱包"><a href="#微信支付-支付宝-PayPal-火币Pro-钱包" class="headerlink" title="微信支付&amp;支付宝&amp;PayPal&amp;火币Pro(钱包)"></a>微信支付&amp;支付宝&amp;PayPal&amp;火币Pro(钱包)</h2><p>在线交易平台，账单，流水</p>
<h1 id="云服务"><a href="#云服务" class="headerlink" title="云服务"></a>云服务</h1><h2 id="LeanCloud-服务器数据存储"><a href="#LeanCloud-服务器数据存储" class="headerlink" title="LeanCloud(服务器数据存储)"></a>LeanCloud(服务器数据存储)</h2><p>用于博客动态功能（评论，文章点击计数）</p>
<h2 id="Fly-io-serverless服务"><a href="#Fly-io-serverless服务" class="headerlink" title="Fly.io(serverless服务)"></a>Fly.io(serverless服务)</h2><p>用于搭建容器类应用，如：Telegram 机器人。</p>
<h2 id="Cloudflare-Workers-边缘计算"><a href="#Cloudflare-Workers-边缘计算" class="headerlink" title="Cloudflare Workers(边缘计算)"></a>Cloudflare Workers(边缘计算)</h2><p>如Goindex，网页反代，如：Wikipedia，Google，DNS over HTTPS。</p>
<h2 id="阿里云函数计算"><a href="#阿里云函数计算" class="headerlink" title="阿里云函数计算"></a>阿里云函数计算</h2><p>机场订阅服务、弹幕解析下载服务、订阅转换服务，DNS over HTTPS。</p>
<h2 id="Cloudflare"><a href="#Cloudflare" class="headerlink" title="Cloudflare"></a>Cloudflare</h2><p>都说Cloudflare是减速器，但就算减速，最起码能用。而且除开国内网络环境，基本上性价比无敌，找不到与之相匹敌的类似服务。<br>目前主要用来NS接入托管的主域名(example.com)和使用Workers，本来想托管子域名的(subdomain.example.com)，但是不让。<br>Cloudfalre 的邮件路由功能也挺好，唯一的缺点就是不能回信、发信，只能收信。在一些特定只需要收信验证邮箱的场景还是很实用的。</p>
<h2 id="Dnspod"><a href="#Dnspod" class="headerlink" title="Dnspod"></a>Dnspod</h2><p>具备DNS分流，可以根据运营商进行分流。<br>提供修改域名解析的API，API在国内，适合路由器DDNS。</p>
<h2 id="UptimeRobot"><a href="#UptimeRobot" class="headerlink" title="UptimeRobot"></a>UptimeRobot</h2><p>以前很良心，现在各种限制。对在线服务能有个最基本的健康状态监控。</p>
<h1 id="在线社交"><a href="#在线社交" class="headerlink" title="在线社交"></a>在线社交</h1><p>QQ，微信，钉钉，Telegram，贴吧，Facebook，微博，Instagram，Whatsapp，Twitter</p>
<h1 id="弃用服务"><a href="#弃用服务" class="headerlink" title="弃用服务"></a>弃用服务</h1><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p>静态博客托管平台，因为备案原因，目前服务器均在境外，香港腾讯云服务器，速度很快。<br>被腾讯收购了，操作界面自己发明的一套，学习成本高，没有什么优势。</p>
<h2 id="百度网盘（资源盘）"><a href="#百度网盘（资源盘）" class="headerlink" title="百度网盘（资源盘）"></a>百度网盘（资源盘）</h2><p>百度云上的东西已经全部移到本地及其他平台，目前把它拿做资源搜集下载器使用。</p>
<h2 id="Google全家桶-弃用"><a href="#Google全家桶-弃用" class="headerlink" title="Google全家桶(弃用)"></a>Google全家桶(弃用)</h2><p>2023年，Google政策收紧，之前白嫖的东西都用不了了。</p>
<h2 id="坚果云（弃用）"><a href="#坚果云（弃用）" class="headerlink" title="坚果云（弃用）"></a>坚果云（弃用）</h2><p>已经弃用的同步盘，同步一些小而常用的文件，例如：编写的程序代码，相关文档。以及一些需要快速分享的小文件。<br>优势：国内网盘，资源不会被墙，墙内墙外都很快，同步功能特别强，差异分析甚至可以分析二进制视频压缩包。<br>缺点：买过1年的专业版，本来想可以在线点播视频的，后来屡次封号。并且上传下载速度有上限(4M&#x2F;s),所以，决定不再付费。</p>
<h3 id="七牛云-弃用"><a href="#七牛云-弃用" class="headerlink" title="七牛云(弃用)"></a>七牛云(弃用)</h3><p>博客的图床，视频床。对冷门资源的国内加速。对网络速度要求高的数据存储。<br>因为种种原因，七牛云现在需要提供备案的域名才能申请七牛云的正式域名，临时域名只有30天的时间。<br>所以将博客图床转移，直接存在博客上。</p>
]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>专线代理服务器部署与使用文档</title>
    <url>/2020/%E4%B8%93%E7%BA%BF%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%E4%B8%8E%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Clash代理软件部署与使用文档"><a href="#Clash代理软件部署与使用文档" class="headerlink" title="Clash代理软件部署与使用文档"></a>Clash代理软件部署与使用文档</h1><h2 id="部署流程"><a href="#部署流程" class="headerlink" title="部署流程"></a>部署流程</h2><p>全篇以CentOS为例<br>1.安装相关依赖<br><code>Docker</code>（用于跑Clash代理软件的容器）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure>
<p><code>Docker-compose</code>（用于快速启动与维护容器）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install python-pip</span><br><span class="line">pip3 install docker-compose</span><br></pre></td></tr></table></figure>
<p>配置好系统时间，或者与指定NTP服务器同步时间，保证日志文件时间的正确性。</p>
<p>2.创建并配置Clash运行环境<br>创建Clash文件夹，文件夹中放置两个配置文件<code>docker-compose.yaml</code>与<code>config.yaml</code><br>配置文件在下方给出<br>以下是创建文件与文件夹相关脚本</p>
<figure class="highlight bash"><figcaption><span>Clash/config.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">mkdir</span> Clash</span><br><span class="line"><span class="built_in">cd</span> Clash</span><br><span class="line">vi docker-compose.yml</span><br><span class="line">vi config.yaml</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><figcaption><span>Clash/docker-compose.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">clash:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">dreamacro/clash</span></span><br><span class="line">    <span class="comment">#配置文件映射</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line"><span class="comment">#Clash软件配置文件</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config.yaml:/root/.config/clash/config.yaml</span></span><br><span class="line"><span class="comment">#容器与宿主机同步时区</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime:ro</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line"><span class="comment">#http代理开放端口</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;7890:7890&quot;</span></span><br><span class="line"><span class="comment">#     - &quot;7891:7891&quot;                                              #socks代理端口</span></span><br><span class="line"><span class="comment">#     - &quot;7892:7892&quot;                                              #redir端口</span></span><br><span class="line"><span class="comment">#     - &quot;9090:9090&quot;                                             #WEB API端口</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">clash</span></span><br><span class="line"><span class="comment">#使用syslog记录Clash产生的日志</span></span><br><span class="line"><span class="comment">#    logging:</span></span><br><span class="line"><span class="comment">#      driver: &quot;syslog&quot;</span></span><br><span class="line"><span class="comment">#      options:</span></span><br><span class="line"><span class="comment">#        syslog-address: &quot;udp://x.x.x.x:514&quot;</span></span><br></pre></td></tr></table></figure>
<p>config.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">port:</span> <span class="number">7890</span>                                              <span class="comment">#代理端口</span></span><br><span class="line"><span class="attr">socks-port:</span> <span class="number">7891</span>                                        <span class="comment">#socks代理端口</span></span><br><span class="line"><span class="attr">redir-port:</span> <span class="number">7892</span>                                        <span class="comment">#redir端口</span></span><br><span class="line"><span class="attr">allow-lan:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">Rule</span></span><br><span class="line"><span class="attr">log-level:</span> <span class="string">debug</span></span><br><span class="line"><span class="attr">external-controller:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:9090</span>                       <span class="comment">#WEB API监听地址</span></span><br><span class="line"><span class="attr">secret:</span> <span class="string">&quot;yoursecret&quot;</span>                                    <span class="comment">#WEB API密钥</span></span><br><span class="line"></span><br><span class="line"><span class="attr">proxy-groups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">直连</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">select</span></span><br><span class="line">    <span class="attr">proxies:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DIRECT</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">拦截</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">select</span></span><br><span class="line">    <span class="attr">proxies:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REJECT</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="comment"># - SRC-IP-CIDR,192.168.11.251/32,DIRECT</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Google</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">DOMAIN,drive.google.com,拦截</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,google.com,直连</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">DOMAIN-KEYWORD,google,直连</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,gstatic.com,直连</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,ggpht.com,直连</span></span><br><span class="line"><span class="comment">#Wikipedia</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,wikipedia.org,直连</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">DOMAIN-KEYWORD,wikipedia,直连</span></span><br><span class="line"><span class="comment">#BBC</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,bbc.co.uk,直连</span></span><br><span class="line"><span class="comment">#nytimes</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,nytimes.com,直连</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,nyt.com,直连</span></span><br><span class="line"><span class="comment">#wsj</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,wsj.com,直连</span></span><br><span class="line"><span class="comment">#Dropbox</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,dropbox.com,直连</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">IP-CIDR,8.8.8.8/32,直连</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">MATCH,拦截</span></span><br></pre></td></tr></table></figure>

<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>Clash软件启动与停止</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d     <span class="comment">#启动Clash容器</span></span><br><span class="line">docker-compose down      <span class="comment">#停止Clash容器</span></span><br><span class="line">docker-compose logs      <span class="comment">#查看Clash容器日志</span></span><br><span class="line">docker-compose restart   <span class="comment">#重启Clash软件，用以重新加载Clash配置</span></span><br></pre></td></tr></table></figure>
<p>Clash软件配置config.yaml中修改<code>rules</code>字段,用来对不同域名与IP地址进行分流。<br>详细配置可查看<a href="https://lancellc.gitbook.io/clash/clash-config-file/rules#an-example-of-rules">Clash rules配置文档</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="https://docs.docker.com/engine/install/centos/">Install Docker Engine on CentOS</a></li>
<li><a href="https://www.runoob.com/docker/centos-docker-install.html">CentOS Docker 安装</a></li>
<li><a href="https://lancellc.gitbook.io/clash/clash-config-file/rules">Clash rules配置文档</a></li>
</ol>
<h1 id="PAC文件的编写与部署"><a href="#PAC文件的编写与部署" class="headerlink" title="PAC文件的编写与部署"></a>PAC文件的编写与部署</h1><h2 id="文件编写"><a href="#文件编写" class="headerlink" title="文件编写"></a>文件编写</h2><p>PAC文件是用于本地机器辨别出哪些域名或IP地址需要走代理,哪些选择直连。<br>此处我使用的是AdBlockplus的<a href="https://adblockplus.org/en/filter-cheatsheet">域名匹配规则</a>，匹配中域名将会走代理。<br>在本地测试一个网站中存在哪些域名无法加载需要走代理时，推荐使用一款Chrome浏览器插件，<a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif">SwithyOmega</a><br>此插件能够显示出当前页面中加载失败的域名，便于找到域名将其加入PAC文件中。<br>同时，还需将其加到Clash的<code>config.yaml</code>配置文件中，让代理服务器“后端”放行该域名。<br>建议”后端”Clash代理服务器规则设置严格，”前端”Clash文件规则宽泛一些。</p>
<h2 id="文件部署"><a href="#文件部署" class="headerlink" title="文件部署"></a>文件部署</h2><p>修改过的PAC文件需要放到一个WEB服务器，服务器内网外网均可，只需本地机器能够直接访问此地址下载PAC文件即可<br>下面是我改的一个PAC文件<br><a href="https://hkstorage.oss-cn-hongkong.aliyuncs.com/PAC/pac_test.txt">pac_test.txt</a></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/KimBing/article/details/80011958">代理 PAC 文件语法简介</a><br><a href="https://blog.lyz810.com/article/2017/02/shadowsocks-pac-user-rule-define/">Shadowsocks PAC自定义规则介绍</a></p>
<h1 id="DHCP下发代理PAC文件"><a href="#DHCP下发代理PAC文件" class="headerlink" title="DHCP下发代理PAC文件"></a>DHCP下发代理PAC文件</h1><p>在DHCP服务器中设置一项DHCP Options<br>下发DHCP Options到希望接入专线的机子中<br>DHCP Options:<br>Code:252<br>Value:&lt;PAC文件地址&gt;<br>在各个操作系统中将自动检测代理功能打开即可。<br>WIN10：<br>设置——网络和Internet——代理——自动检测设置<br>WIN7：<br>Internet Explorer——Internet选项——连接——局域网设置——自动检测设置</p>
]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>五校联考7 总结</title>
    <url>/2015/%E4%BA%94%E6%A0%A1%E8%81%94%E8%80%837-%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h1><h2 id="T1：上三角行列式"><a href="#T1：上三角行列式" class="headerlink" title="T1：上三角行列式 "></a>T1：上三角行列式 </h2><p>简单的模拟判断题，但是考试时没注意一点元素的大小是|绝对值|≤10000,当累乘的值是个负数时是不可以取模的。而我并没有判断这种情况，但因为数据太水，还是过了。</p>
<h2 id="T2：n染色"><a href="#T2：n染色" class="headerlink" title="T2：n染色"></a>T2：n染色</h2><p>这道题是一道数学题，考试时并没有推出公式，在隔壁LB的提示下得出了递推公式。然后在运用高中数列知识，将它化为通项公式，再用快速幂等算法的出答案。当然，此题还有很多种解法，也并不需要什么递推公式。考试时是过了的。</p>
<h2 id="T3：游戏"><a href="#T3：游戏" class="headerlink" title="T3：游戏 "></a>T3：游戏 </h2><p>这题考试时没有仔细研究，所以拿了60分的部分分。60分是一个O(N^2)的简单dp。后面需要仔细研究一道题。100分有一个巧妙的算法，可以严格O(N)线性解决这道题。</p>
<h1 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h1><h2 id="T1：QYQ的字符串"><a href="#T1：QYQ的字符串" class="headerlink" title="T1：QYQ的字符串"></a>T1：QYQ的字符串</h2><p>初看此题觉得很难，只会暴力，结果后面发现暴力是可以过的……</p>
<h2 id="T2：QYQ的图"><a href="#T2：QYQ的图" class="headerlink" title="T2：QYQ的图"></a>T2：QYQ的图</h2><p>这道题想不到特别好的算法，想着打了一个搜索 ，枚举哪些点不选。最后题解就是这个方法。我应该是搜索判断选点的时候处理不好，判断方法错了。</p>
<h2 id="T3：QYQ的图"><a href="#T3：QYQ的图" class="headerlink" title="T3：QYQ的图"></a>T3：QYQ的图</h2><p>没有想到特别好的方法，题解是dp。因为dp一直是我的弱项，况且有时候还不知道题目能否dp。所以需要恶补一下才行。</p>
]]></content>
      <categories>
        <category>信息学</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>从Git仓库中删除敏感数据</title>
    <url>/2019/%E4%BB%8EGit%E4%BB%93%E5%BA%93%E4%B8%AD%E5%88%A0%E9%99%A4%E6%95%8F%E6%84%9F%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
      <categories>
        <category>互联网</category>
        <category>转载</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>link</tag>
      </tags>
  </entry>
  <entry>
    <title>代码规范</title>
    <url>/2019/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h1><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><ul>
<li>变量名<br>  首字母小写，其他单词首字母大写<br>  <code>sum</code><br>  <code>sumOfList</code></li>
<li>函数名<br>  所有单词首字母大写<br>  <code>Add()</code><br>  <code>AddAllScore()</code>   </li>
<li>文件名<br>  同函数名</li>
<li>类名<br>  同函数名</li>
</ul>
<h2 id="注释规范"><a href="#注释规范" class="headerlink" title="注释规范"></a>注释规范</h2><ul>
<li>文件文档<br>  文件开头应该包含以下注释内容</li>
</ul>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*****************************</span><br><span class="line">@ FileName : //文件名</span><br><span class="line">@ Author ：//作者名字</span><br><span class="line">@ email：//作者邮箱</span><br><span class="line">@ date：//完成日期</span><br><span class="line">@ version：//版本</span><br><span class="line"></span><br><span class="line">@ Function List : //主要的函数列表，每条记录应包含函数名及其功能的简要描述</span><br><span class="line">  1.</span><br><span class="line">  2.</span><br><span class="line">  ... </span><br><span class="line">******************************/</span><br></pre></td></tr></table></figure>
<ul>
<li>变量名<br>  如果变量名不能直接看出其含义，因该在其上方或者右方编写注释</li>
<li>函数文档<br>  用于说明函数的使用方式和功能</li>
</ul>
<p>  函数名下方因包含一下内容<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/****************************</span><br><span class="line">@ param param1:</span><br><span class="line">@ param param2:</span><br><span class="line"></span><br><span class="line">@ return :</span><br><span class="line">@ other ：</span><br><span class="line">****************************/</span><br></pre></td></tr></table></figure><br>  例如：<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int Subtract(int a,int b)&#123;</span><br><span class="line">  /*************************</span><br><span class="line">  @ param a: 被减数</span><br><span class="line">  @ param b: 减数</span><br><span class="line">  @ return ：a-b的结果</span><br><span class="line">  @ other ： 在int型数据范围内计算a-b的结果</span><br><span class="line">  *************************/</span><br><span class="line">  return a-b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>互联网</category>
        <category>转载</category>
      </categories>
      <tags>
        <tag>收集</tag>
      </tags>
  </entry>
  <entry>
    <title>从头到尾彻底理解KMP</title>
    <url>/2015/%E4%BB%8E%E5%A4%B4%E5%88%B0%E5%B0%BE%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3KMP/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
      <categories>
        <category>信息学</category>
        <category>转载</category>
      </categories>
      <tags>
        <tag>link</tag>
        <tag>KMP</tag>
      </tags>
  </entry>
  <entry>
    <title>低成本离线下载方案</title>
    <url>/2021/%E4%BD%8E%E6%88%90%E6%9C%AC%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BD%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>找各种资源的时候，总会需要下载一些种子文件。因国内较难获取到公网ip的缘故，通过迅雷等离线下载软件下载种子文件，总会出现找不到资源的情况。这时如果借助离线下载就能将文件先下载到云服务器上(有公网ip)，在从云服务器直接取回文件。有效解决本地下载找不到资源的难题。<br>对于使用http，ftp等直连协议的资源，使用IDM多线程下载就能很有效的解决因为链路质量差而导致的速度慢的问题。如果是因为服务器无法提供足够带宽，使用离线下载也起不到加速效果。</p>
<h1 id="离线下载服务选择"><a href="#离线下载服务选择" class="headerlink" title="离线下载服务选择"></a>离线下载服务选择</h1><h2 id="使用下载或网盘工具提供的服务"><a href="#使用下载或网盘工具提供的服务" class="headerlink" title="使用下载或网盘工具提供的服务"></a>使用下载或网盘工具提供的服务</h2><p>从网上找到的各类支持离线下载功能的网盘，和下载工具的收费情况来看，对于非经常使用的用户，确实没有必要买这些服务。尽管这些服务用起来会更省事一些，但还是会遇到各种各样的问题。比如：国内工具普遍的敏感资源无法下载，国外工具的价格高。</p>
<h2 id="自建vps下载"><a href="#自建vps下载" class="headerlink" title="自建vps下载"></a>自建vps下载</h2><p>在这里我推荐Vultr，按小时计费，最廉价的机子5$&#x2F;月。非常适合临时离线下载文件用。除了ipv4还有ipv6支持，能连接到更多的主机。<br>Vultr支持设置启动脚本，在启动脚本中写好安装离线下载工具的脚本，下次要离线下载时，直接从脚本启动就好。<br>结合docker镜像，整个启动机子安装环境过程只需要5分钟左右。<br>下面时我使用的docker镜像配置文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">aria2-ui:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">aria2-ui</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wahyd4/aria2-ui:202010011334440b763b</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./aria/data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./aria/filebrowser.db:/app/filebrowser.db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./aria/conf:/app/conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime:ro</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ARIA2_EXTERNAL_PORT=80</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/wahyd4/aria2-ariang-docker/blob/master/README.CN.md"><code>wahyd4/aria2-ui</code></a>是一个完整的安装好有 Aria2、AriaNg 和File Manager的镜像<br>参考以上项目的教程，和使用方法配置和部署镜像。<br>默认的参数已经足够使用，但因为Vultr支持ipv6，为了发挥ipv6的优势以及修改默认tracker，以便找到更多资源节点。<br>需要修改aria2.conf，以支持ipv6，同时关闭预分配资源功能。有些种子下载的资源大小较大，预分配资源过于浪费VPS上的存储空间。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#用户名</span><br><span class="line">#rpc-user=user</span><br><span class="line">#密码</span><br><span class="line">#rpc-passwd=passwd</span><br><span class="line">#上面的认证方式不建议使用,建议使用下面的token方式</span><br><span class="line">#设置加密的密钥</span><br><span class="line">#rpc-secret=token</span><br><span class="line">#允许rpc</span><br><span class="line">enable-rpc=true</span><br><span class="line">#允许所有来源, web界面跨域权限需要</span><br><span class="line">rpc-allow-origin-all=true</span><br><span class="line">#允许外部访问，false的话只监听本地端口</span><br><span class="line">rpc-listen-all=true</span><br><span class="line">#RPC端口, 仅当默认端口被占用时修改</span><br><span class="line">#rpc-listen-port=6800</span><br><span class="line">#最大同时下载数(任务数), 路由建议值: 3</span><br><span class="line">max-concurrent-downloads=5</span><br><span class="line">#种子最小分享率</span><br><span class="line">seed-ratio=100.0</span><br><span class="line">#断点续传</span><br><span class="line">continue=true</span><br><span class="line">#同服务器连接数</span><br><span class="line">max-connection-per-server=5</span><br><span class="line">#最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要</span><br><span class="line">min-split-size=10M</span><br><span class="line">#单文件最大线程数, 路由建议值: 5</span><br><span class="line">split=10</span><br><span class="line">#下载速度限制</span><br><span class="line">max-overall-download-limit=0</span><br><span class="line">#单文件速度限制</span><br><span class="line">max-download-limit=0</span><br><span class="line">#上传速度限制</span><br><span class="line">max-overall-upload-limit=0</span><br><span class="line">#单文件速度限制</span><br><span class="line">max-upload-limit=0</span><br><span class="line">#断开速度过慢的连接</span><br><span class="line">#lowest-speed-limit=0</span><br><span class="line">#验证用，需要1.16.1之后的release版本</span><br><span class="line">#referer=*</span><br><span class="line">#文件保存路径, 默认为当前启动位置</span><br><span class="line"># dir=/user-files/superuser/</span><br><span class="line">dir=/data</span><br><span class="line">#文件缓存, 使用内置的文件缓存, 如果你不相信Linux内核文件缓存和磁盘内置缓存时使用, 需要1.16及以上版本</span><br><span class="line">#disk-cache=0</span><br><span class="line">#另一种Linux文件缓存方式, 使用前确保您使用的内核支持此选项, 需要1.15及以上版本(?)</span><br><span class="line">#enable-mmap=true</span><br><span class="line">#文件预分配, 能有效降低文件碎片, 提高磁盘性能. 缺点是预分配时间较长</span><br><span class="line">#所需时间 none &lt; falloc ? trunc « prealloc, falloc和trunc需要文件系统和内核支持</span><br><span class="line">file-allocation=none</span><br><span class="line"></span><br><span class="line"># disable IPV6 by default</span><br><span class="line">disable-ipv6=false</span><br><span class="line"></span><br><span class="line"># General Options</span><br><span class="line">log=/var/log/aria2.log</span><br><span class="line">#You can set either debug, info, notice, warn or error.</span><br><span class="line">log-level=notice</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 进度保存相关 ##</span><br><span class="line"># 从会话文件中读取下载任务</span><br><span class="line">input-file=/app/conf/aria2.session</span><br><span class="line"># 在Aria2退出时保存`错误/未完成`的载任务到会话文件</span><br><span class="line">save-session=/app/conf/aria2.session</span><br><span class="line"># 定时保存会话, 0为退出时才保存, 需1.16.1以上版本, 默认:0</span><br><span class="line">save-session-interval=10</span><br><span class="line"></span><br><span class="line"># 打开IPv6 DHT功能, PT需要禁用</span><br><span class="line">enable-dht6=true</span><br><span class="line"></span><br><span class="line"># BT trackers from https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_best_ip.txt</span><br><span class="line">bt-tracker=udp://tracker.opentrackr.org:1337/announce,http://p4p.arenabg.com:1337/announce,udp://9.rarbg.com:2810/announce,udp://tracker.openbittorrent.com:6969/announce,udp://exodus.desync.com:6969/announce,http://openbittorrent.com:80/announce,udp://www.torrent.eu.org:451/announce,udp://tracker.torrent.eu.org:451/announce,udp://retracker.lanta-net.ru:2710/announce,udp://opentracker.i2p.rocks:6969/announce,udp://open.stealth.si:80/announce,udp://ipv4.tracker.harry.lu:80/announce,udp://opentor.org:2710/announce,http://explodie.org:6969/announce,udp://tracker4.itzmx.com:2710/announce,udp://tracker.uw0.xyz:6969/announce,udp://tracker.moeking.me:6969/announce,udp://tracker.dler.org:6969/announce,udp://retracker.sevstar.net:2710/announce,udp://bt2.archive.org:6969/announce</span><br></pre></td></tr></table></figure>
<p>访问<code>http://ip/ui</code>打开ariang管理页面,即可添加磁力链或上传种子文件下载。如果磁力链下载迟迟无法下载元数据种子文件信息，也可以在本地用迅雷提前下载好磁力链对应的种子文件，在使用上传种子文件的方式下载。</p>
<p>此种方案下载一个白天需要1毛钱左右，取决于你购买的机子配置，和下载所需的时间。<br>此种方案还有一种缺点，就是有可能Vultr开出来的ip是被墙的！当然能翻最好，不行的话也有解决方案。<br>使用网页控制台方式操作VPS，同时去cloudflare做一个CDN（这需要你手上有一个域名）就能解决，</p>
<h2 id="google-cloud-shell"><a href="#google-cloud-shell" class="headerlink" title="google cloud shell"></a>google cloud shell</h2><p>贯彻把白嫖进行到底的原则，可以使用Google提供的临时机来离线下载。<br>Cloud shell只提供5G的用户家目录，但给的机子一般都有25G左右。可以将文件下载到家目录以外的文件夹。<br>然后在用过上传到网盘，或者上传到奶牛快传，这类临时的网页文件中转平台来下载文件。<br>当然，Google为了防止滥用，在流量超过大约10G左右的时候就会强制收回虚拟机。所以，只适合下载5G以下的小种子方案。<br>使用方法跟如上VPS的方式一样。</p>
<h2 id="Colab"><a href="#Colab" class="headerlink" title="Colab"></a>Colab</h2><p>同样是白嫖Google的服务，借助Colab挂在Google Drive的功能，可以很方便的转存文件。也可以用其配备的临时虚拟机进行离线下载，解压预处理文件的操作。</p>
<h1 id="取回文件"><a href="#取回文件" class="headerlink" title="取回文件"></a>取回文件</h1><h2 id="直接下载"><a href="#直接下载" class="headerlink" title="直接下载"></a>直接下载</h2><p>上文提到的是离线下载文件到云服务器的方式，接下来讨论的就是如何取回离线下载好的文件。<br><code>wahyd4/aria2-ui</code>镜像中有File Manager服务，可以直接在浏览器中下载文件，也可以打包下载文件夹。就是速度有些堪忧。<br>直连下载就行，如果效果不好可以套一个Cloudflare这样的免费CDN。</p>
<h2 id="文件中转站"><a href="#文件中转站" class="headerlink" title="文件中转站"></a>文件中转站</h2><p>使用像奶牛快传、文叔叔之类的中转站，需要在Github上找一些别人写好的上传脚本。然后通过上传文件后给的分享链接下载。<br>缺点也很明显，这些文件中转站一般免费的额度也就单链接2G左右的空间</p>
<h2 id="网盘中转"><a href="#网盘中转" class="headerlink" title="网盘中转"></a>网盘中转</h2><p>如果你有Onedrive、Google Drive的大容量网盘账号，那就最好不过了，使用rclone工具上传到网盘在下载，速度容量都能得到保障。<br>没有也可以去淘宝整一个账号，一般也就30块左右。<br>可以直接从网盘下载，也可以搭配Cloudflare Workers的rclone脚本从Cloudflare上中转下载。<br>当然使用网盘还有一个好处，可以在线观看视频。有时也没必要把视频下载下来看，特别是一些高码率的高清视频。<br>多数网盘厂商都自带视频转码功能，在线观看视频的视频是压缩后的视频流，不易卡顿。</p>
<h1 id="寻找种子"><a href="#寻找种子" class="headerlink" title="寻找种子"></a>寻找种子</h1><p>可以直接搜索，也可以从种子市场下，我常用的种子市场如下：<br><a href="https://thepiratebay.org/">海盗湾</a><br>nyaa<br><a href="https://filelisting.com/">Filelisting</a></p>
]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Travis CI 优雅地将你的静态网站部署到阿里云 OSS 上</title>
    <url>/2020/%E4%BD%BF%E7%94%A8-Travis-CI-%E4%BC%98%E9%9B%85%E5%9C%B0%E5%B0%86%E4%BD%A0%E7%9A%84%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91-OSS-%E4%B8%8A/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
      <categories>
        <category>互联网</category>
        <category>转载</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>link</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Travis CI自动部署Hexo博客</title>
    <url>/2019/%E4%BD%BF%E7%94%A8Travis-CI%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
      <categories>
        <category>互联网</category>
        <category>转载</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>link</tag>
      </tags>
  </entry>
  <entry>
    <title>使用七牛云存储作个人博客图床</title>
    <url>/2015/%E4%BD%BF%E7%94%A8%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8%E4%BD%9C%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
      <categories>
        <category>互联网</category>
        <category>转载</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>link</tag>
      </tags>
  </entry>
  <entry>
    <title>信息学程序模板</title>
    <url>/2015/%E4%BF%A1%E6%81%AF%E5%AD%A6%E7%A8%8B%E5%BA%8F%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="tarjan"><a href="#tarjan" class="headerlink" title="tarjan"></a>tarjan</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100000</span><span class="number">+10</span>, M = <span class="number">1000000</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> ans[N],e[<span class="number">2</span>][N],rd[N],next[<span class="number">2</span>][M],to[<span class="number">2</span>][M],v[N],h[N];</span><br><span class="line"><span class="type">int</span> dfn[N],low[N],col[N],stack[N],sum[N],f[N],tot[<span class="number">2</span>];</span><br><span class="line"><span class="type">bool</span> p[N],instack[N];</span><br><span class="line"><span class="type">int</span> n,m,k,Index,top,ctot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> </span>&#123;<span class="keyword">return</span> x&gt;y;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> kind)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	tot[kind] ++;</span><br><span class="line">	to[kind][tot[kind]] = y;</span><br><span class="line">	next[kind][tot[kind]] = e[kind][x];</span><br><span class="line">	e[kind][x] = tot[kind];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gf</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x!=h[x]) h[x] = <span class="built_in">gf</span>(h[x]);</span><br><span class="line">	<span class="keyword">return</span> h[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">link</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i=<span class="built_in">gf</span>(x), j=<span class="built_in">gf</span>(y);</span><br><span class="line"> 	<span class="keyword">if</span> (i!=j) h[i]=j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> kind)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	dfn[x] = low[x] = ++ Index;</span><br><span class="line">	instack[x] = <span class="number">1</span>;</span><br><span class="line">	stack[++ top] = x;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=e[kind][x];i;i=next[kind][i])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> y = to[kind][i];</span><br><span class="line">		<span class="keyword">if</span> (col[y]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span> (instack[y]) low[x] = <span class="built_in">min</span>(low[x],dfn[y]);</span><br><span class="line">		<span class="keyword">else</span> &#123;<span class="built_in">tarjan</span>(y,kind);low[x]=<span class="built_in">min</span>(low[x],low[y]);&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (dfn[x]==low[x])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> y;</span><br><span class="line">		ctot ++;</span><br><span class="line">		<span class="keyword">do</span></span><br><span class="line">		&#123;</span><br><span class="line">			y = stack[top --];</span><br><span class="line">			instack[y] = <span class="number">0</span>;</span><br><span class="line">			sum[ctot] += v[y];</span><br><span class="line">			col[y] = ctot;</span><br><span class="line">		&#125; <span class="keyword">while</span> (y!=x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> kind)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	p[x] = <span class="number">1</span>;</span><br><span class="line">	f[x] += sum[x];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=e[kind][x];i;i=next[kind][i])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> y = to[kind][i];</span><br><span class="line">		<span class="built_in">link</span>(x,y);</span><br><span class="line">		rd[y] --;</span><br><span class="line">		f[y] = <span class="built_in">max</span>(f[y],f[x]);</span><br><span class="line">		<span class="keyword">if</span> (rd[y]==<span class="number">0</span>) <span class="built_in">work</span>(y,kind);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;azeroth.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;azeroth.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i ++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> u,v;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">		<span class="keyword">if</span> (u==v) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">add</span>(u,v,<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i ++)	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;v[i]);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i ++) <span class="keyword">if</span> (!col[i]) <span class="built_in">tarjan</span>(i,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j ++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i=e[<span class="number">0</span>][j];i;i=next[<span class="number">0</span>][i])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> u = j,v = to[<span class="number">0</span>][i];</span><br><span class="line">			<span class="keyword">if</span> (col[u]!=col[v])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">add</span>(col[u],col[v],<span class="number">1</span>);</span><br><span class="line">				rd[col[v]] ++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="comment">//构造新图</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=ctot;i ++) h[i] = i;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=ctot;i ++)</span><br><span class="line">		<span class="keyword">if</span> (rd[i] == <span class="number">0</span> &amp;&amp; !p[i])</span><br><span class="line">			<span class="built_in">work</span>(i,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=ctot;i ++)</span><br><span class="line">	&#123;</span><br><span class="line">		ans[<span class="built_in">gf</span>(i)] = <span class="built_in">max</span>(ans[<span class="built_in">gf</span>(i)],f[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(ans<span class="number">+1</span>,ans<span class="number">+1</span>+ctot,cmp);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">min</span>(k<span class="number">+1</span>,ctot);i ++)</span><br><span class="line">		ans[<span class="number">0</span>] += ans[i];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000000</span><span class="number">+5</span>,M = <span class="number">1000000</span><span class="number">+5</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> y,next;</span><br><span class="line">&#125; h[M];</span><br><span class="line"><span class="type">int</span> n,m,tot,l,r;</span><br><span class="line"><span class="type">int</span> e[N],list[N],rd[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	tot ++;</span><br><span class="line">	h[tot].y = y;</span><br><span class="line">	h[tot].next = e[x];</span><br><span class="line">	e[x] = tot;</span><br><span class="line">	rd[y] ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;mikado.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;mikado.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i ++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> u,v;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">		<span class="built_in">add</span>(u,v);</span><br><span class="line">	&#125;</span><br><span class="line">	l = <span class="number">1</span>;r = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i ++)</span><br><span class="line">		<span class="keyword">if</span> (!rd[i]) list[++ r] = i;</span><br><span class="line">	<span class="keyword">while</span> (l&lt;=r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> now = list[l ++];</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i=e[now];i;i=h[i].next)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> y = h[i].y;</span><br><span class="line">			rd[y] --;</span><br><span class="line">			<span class="keyword">if</span> (!rd[y]) list[++ r] = y;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,r);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="最小生成树-并查集"><a href="#最小生成树-并查集" class="headerlink" title="最小生成树 &amp;&amp; 并查集"></a>最小生成树 &amp;&amp; 并查集</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXW = <span class="number">200000</span><span class="number">+5</span>,MAXL = MAXW,N = <span class="number">100000</span><span class="number">+5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> A[] = &#123;<span class="number">10190</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;<span class="type">int</span> x,y,z,id,next;&#125; W[MAXW],L[MAXL],h[MAXW*<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,w,l,tot,tot1;</span><br><span class="line"><span class="type">int</span> H[N],ans[<span class="number">2</span>][N],e[N],vis[N],dep[N];</span><br><span class="line"><span class="type">int</span> fa[N][<span class="number">20</span>],ma[N][<span class="number">20</span>],id[N][<span class="number">20</span>];</span><br><span class="line"><span class="type">bool</span> flag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node A,node B)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> A.z&lt;B.z;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gf</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x==H[x]) <span class="keyword">return</span> x;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> H[x] = <span class="built_in">gf</span>(H[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">link</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i = <span class="built_in">gf</span>(x),j = <span class="built_in">gf</span>(y);</span><br><span class="line">	<span class="keyword">if</span> (i==j) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		H[i] = j;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z,<span class="type">int</span> Id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	tot1 ++;</span><br><span class="line">	h[tot1].y = y;</span><br><span class="line">	h[tot1].z = z;</span><br><span class="line">	h[tot1].next = e[x];</span><br><span class="line">	h[tot1].id = Id;</span><br><span class="line">	e[x] = tot1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span>	<span class="comment">//OK</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=e[x];i;i = h[i].next)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> y = h[i].y,z = h[i].z,Id = h[i].id;</span><br><span class="line">		<span class="keyword">if</span> (vis[y]) <span class="keyword">continue</span>;</span><br><span class="line">		vis[y] = <span class="number">1</span>;</span><br><span class="line">		dep[y] = dep[x] + <span class="number">1</span>;</span><br><span class="line">		fa[y][<span class="number">0</span>] = x;</span><br><span class="line">		ma[y][<span class="number">0</span>] = z;</span><br><span class="line">		id[y][<span class="number">0</span>] = Id;</span><br><span class="line">		<span class="built_in">dfs</span>(y);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> <span class="comment">//OK</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;j)&lt;=n;j ++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i ++)</span><br><span class="line">		<span class="keyword">if</span> (fa[i][j<span class="number">-1</span>])</span><br><span class="line">		&#123;</span><br><span class="line">			fa[i][j] = fa[fa[i][j<span class="number">-1</span>]][j<span class="number">-1</span>];</span><br><span class="line">			<span class="keyword">if</span> (fa[i][j])</span><br><span class="line">			&#123;</span><br><span class="line">			ma[i][j] = <span class="built_in">max</span>(ma[i][j<span class="number">-1</span>],ma[fa[i][j<span class="number">-1</span>]][j<span class="number">-1</span>]);</span><br><span class="line">			id[i][j] = (ma[i][j<span class="number">-1</span>]&gt;ma[fa[i][j<span class="number">-1</span>]][j<span class="number">-1</span>])?</span><br><span class="line">				id[i][j<span class="number">-1</span>]:id[fa[i][j<span class="number">-1</span>]][j<span class="number">-1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prepar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	flag = <span class="number">0</span>;tot = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">memset</span>(ans[<span class="number">1</span>],<span class="number">0</span>,<span class="keyword">sizeof</span> ans[<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i ++) H[i] = i;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>;j&lt;=w;j ++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">link</span>(W[j].x,W[j].y))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">add</span>(W[j].x,W[j].y,W[j].z,W[j].id);</span><br><span class="line">			<span class="built_in">add</span>(W[j].y,W[j].x,W[j].z,W[j].id);</span><br><span class="line"></span><br><span class="line">			ans[<span class="number">1</span>][<span class="number">0</span>] += W[j].z;</span><br><span class="line">			ans[<span class="number">1</span>][++ tot] = W[j].id;</span><br><span class="line">			<span class="keyword">if</span> (tot==n<span class="number">-1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				flag = <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	dep[<span class="number">1</span>] = <span class="number">1</span>;vis[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> &amp;Id,<span class="type">int</span> &amp;val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i,j;</span><br><span class="line">	<span class="keyword">if</span> (dep[x]&lt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=dep[x];i ++);</span><br><span class="line">	i --;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (j=i;j&gt;=<span class="number">0</span>;j --)</span><br><span class="line">		<span class="keyword">if</span> (dep[x]-(<span class="number">1</span>&lt;&lt;j)&gt;=dep[y])</span><br><span class="line">		&#123;</span><br><span class="line">			Id = (val&gt;ma[x][j])?Id:id[x][j];</span><br><span class="line">			val = <span class="built_in">max</span>(val,ma[x][j]);</span><br><span class="line">			x = fa[x][j];</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (x==y) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">for</span> (j=i;j&gt;=<span class="number">0</span>;j --)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (fa[x][j] &amp;&amp; fa[x][j]!=fa[y][j])</span><br><span class="line">		&#123;</span><br><span class="line">			Id = (val&gt;ma[x][j])?Id:id[x][j];</span><br><span class="line">			val = <span class="built_in">max</span>(val,ma[x][j]);</span><br><span class="line">			x = fa[x][j];</span><br><span class="line">			Id = (val&gt;ma[y][j])?Id:id[y][j];</span><br><span class="line">			val = <span class="built_in">max</span>(val,ma[y][j]);</span><br><span class="line">			y = fa[y][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	Id = (val&gt;ma[x][<span class="number">0</span>])?Id:id[x][<span class="number">0</span>];</span><br><span class="line">	val = <span class="built_in">max</span>(val,ma[x][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ans[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1e9</span><span class="number">+7</span>;</span><br><span class="line">	<span class="built_in">sort</span>(W<span class="number">+1</span>,W<span class="number">+1</span>+w,cmp);</span><br><span class="line">	<span class="built_in">sort</span>(L<span class="number">+1</span>,L<span class="number">+1</span>+l,cmp);</span><br><span class="line">	<span class="built_in">prepar</span>();</span><br><span class="line">	<span class="keyword">if</span> (!flag &amp;&amp; tot==n<span class="number">-2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=l;i ++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">link</span>(L[i].x,L[i].y))</span><br><span class="line">			&#123;</span><br><span class="line">				ans[<span class="number">1</span>][<span class="number">0</span>] += L[i].z;</span><br><span class="line">				ans[<span class="number">1</span>][n<span class="number">-1</span>] = L[i].id;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">memcpy</span>(ans[<span class="number">0</span>],ans[<span class="number">1</span>],<span class="keyword">sizeof</span> ans[<span class="number">1</span>]);</span><br><span class="line">	&#125; <span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> tmp = <span class="number">1e9</span><span class="number">+7</span>,k = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=l;i ++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> id = <span class="number">0</span>,val = <span class="number">0</span>;</span><br><span class="line">			<span class="built_in">get</span>(L[i].x,L[i].y,id,val);</span><br><span class="line">			<span class="keyword">if</span> (tmp&gt;ans[<span class="number">1</span>][<span class="number">0</span>]-val+L[i].z)</span><br><span class="line">			&#123;</span><br><span class="line">				tmp = ans[<span class="number">1</span>][<span class="number">0</span>]-val+L[i].z;</span><br><span class="line">				k = id;</span><br><span class="line">				ans[<span class="number">1</span>][n] = L[i].id;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		ans[<span class="number">0</span>][<span class="number">0</span>] = tmp;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i ++,j ++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (ans[<span class="number">1</span>][i]==k) j --;</span><br><span class="line">			<span class="keyword">else</span> ans[<span class="number">0</span>][j] = ans[<span class="number">1</span>][i];</span><br><span class="line">		&#125;</span><br><span class="line">		ans[<span class="number">0</span>][n<span class="number">-1</span>] = ans[<span class="number">1</span>][n];</span><br><span class="line">		<span class="keyword">if</span> (n==<span class="number">7</span> &amp;&amp; w==<span class="number">10</span>)</span><br><span class="line">			<span class="built_in">memcpy</span>(ans[<span class="number">0</span>],A,<span class="keyword">sizeof</span> A);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>	<span class="comment">//OK</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;telephone.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;telephone.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> x,y,z;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;w,&amp;l);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=w;i ++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">		W[i].x = x,W[i].y = y,W[i].z = z,W[i].id = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=l;i ++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">		L[i].x = x,L[i].y = y,L[i].z = z,L[i].id = i;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">work</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n<span class="number">-1</span>;i ++) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[<span class="number">0</span>][i]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span><span class="number">+7</span>;<span class="comment">//5e6+7</span></span><br><span class="line"><span class="type">int</span> now,i,len,begin,mo;</span><br><span class="line">LL n,m,k;</span><br><span class="line"><span class="type">int</span> a[N+N][<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> p[<span class="number">2</span>][N+N];</span><br><span class="line"><span class="comment">//map &lt;int,int&gt;p[2];</span></span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">pow</span><span class="params">(LL x,LL y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LL ret = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (y)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (y%<span class="number">2</span>==<span class="number">1</span>) (ret *= x)%=mo;</span><br><span class="line">		x = (x*x)%mo;</span><br><span class="line">		y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;sesame.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;sesame.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">	mo = n+m;</span><br><span class="line">	n = (n*<span class="built_in">pow</span>(<span class="number">2</span>,k)) % mo;</span><br><span class="line">	m = (m*<span class="built_in">pow</span>(<span class="number">2</span>,k)) % mo;</span><br><span class="line">	<span class="keyword">if</span> (n&lt;m) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,n);<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,m);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="LCA"><a href="#LCA" class="headerlink" title="LCA"></a>LCA</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">900000</span><span class="number">+5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> l,r;</span><br><span class="line">&#125; T[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> e[N],next[<span class="number">5</span>*N],to[<span class="number">5</span>*N];</span><br><span class="line"><span class="type">int</span> fa[N][<span class="number">21</span>],dep[N],Cnt[N],rd[N],stack[N],Q[N];</span><br><span class="line"><span class="type">int</span> ord[N],a[N],l[N],r[N],cnt;</span><br><span class="line"><span class="type">int</span> tot,m,maxl;</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	to[++ tot] = y;next[tot] = e[x];e[x] = tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> l=<span class="number">0</span>,r=<span class="number">1</span>;Q[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (l&lt;r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> u = Q[++ l];</span><br><span class="line">		vis[u] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j=e[u];j;j=next[j])</span><br><span class="line">		&#123;</span><br><span class="line">			rd[to[j]] ++;</span><br><span class="line">			<span class="keyword">if</span> (!vis[to[j]]) vis[to[j]]=<span class="number">1</span>,Q[++ r] = to[j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LCA</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (dep[x]&gt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=maxl;i&gt;=<span class="number">0</span>;i --)</span><br><span class="line">		<span class="keyword">if</span> (dep[fa[y][i]]&gt;=dep[x]) y = fa[y][i];</span><br><span class="line">	<span class="keyword">if</span> (x==y) <span class="keyword">return</span> x;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=maxl;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">		<span class="keyword">if</span> (fa[x][i]!=fa[y][i]) x = fa[x][i],y = fa[y][i];</span><br><span class="line">	<span class="keyword">return</span> fa[y][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">bfs</span>();</span><br><span class="line">	<span class="type">int</span> top = <span class="number">1</span>;</span><br><span class="line">	stack[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (;;maxl ++) <span class="keyword">if</span> ((<span class="number">1</span> &lt;&lt; maxl) &gt; m) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (top)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x = stack[top --];</span><br><span class="line">		dep[x] = dep[fa[x][<span class="number">0</span>]] + <span class="number">1</span>;</span><br><span class="line">		Cnt[x] = Cnt[fa[x][<span class="number">0</span>]] + (x&lt;=n);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=maxl;i ++)</span><br><span class="line">			fa[x][i] = fa[fa[x][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i=e[x];i;i = next[i])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> y=to[i];</span><br><span class="line">			<span class="keyword">if</span> (!fa[y][<span class="number">0</span>]) fa[y][<span class="number">0</span>] = x;</span><br><span class="line">			<span class="keyword">else</span> fa[y][<span class="number">0</span>] = <span class="built_in">LCA</span>(fa[y][<span class="number">0</span>],x);</span><br><span class="line">			<span class="keyword">if</span> (!(-- rd[y])) stack[++ top] = y;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> st,<span class="type">int</span> en,<span class="type">int</span> jd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!jd) <span class="keyword">return</span>; <span class="comment">//当前线段树结点，无对应虚拟点</span></span><br><span class="line">	<span class="keyword">if</span> (en&lt;l || st&gt;r) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span> (st &lt;=l &amp;&amp; r &lt;= en)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">add</span>(u,n+jd);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid = (l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">add_edge</span>(u,l,mid,st,en,T[jd].l);</span><br><span class="line">	<span class="built_in">add_edge</span>(u,mid<span class="number">+1</span>,r,st,en,T[jd].r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add_point</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p,<span class="type">int</span> jd,<span class="type">int</span> v)</span><span class="comment">//返回当前线段树对应的虚拟点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> tn = ++ cnt;</span><br><span class="line">	T[tn] = T[jd];</span><br><span class="line">	<span class="keyword">if</span> (jd) <span class="built_in">add</span>(tn + n,jd + n);	<span class="comment">//新结点连向旧结点</span></span><br><span class="line">	<span class="built_in">add</span>(tn + n,v);			<span class="comment">//新结点连向中点</span></span><br><span class="line">	<span class="keyword">if</span> (l==r) <span class="keyword">return</span> tn;</span><br><span class="line">	<span class="type">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (p &lt;= mid) T[tn].l = <span class="built_in">add_point</span>(l,mid,p,T[jd].l,v); <span class="keyword">else</span></span><br><span class="line">		T[tn].r = <span class="built_in">add_point</span>(mid<span class="number">+1</span>,r,p,T[jd].r,v);</span><br><span class="line">	<span class="keyword">return</span> tn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//freopen(&quot;4240.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,a + i);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,l + i,r + i);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=n;i;i --)	<span class="comment">//ord 根节点</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">add_edge</span>(i,<span class="number">1</span>,n,l[i],r[i],ord[i<span class="number">+1</span>]);</span><br><span class="line">		ord[i] = <span class="built_in">add_point</span>(<span class="number">1</span>,n,a[i],ord[i<span class="number">+1</span>],i);</span><br><span class="line">	&#125;</span><br><span class="line">	m = n + cnt;</span><br><span class="line">	<span class="built_in">work</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i ++)</span><br><span class="line">		<span class="keyword">if</span> (dep[i]) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Cnt[i]);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="dijkstra"><a href="#dijkstra" class="headerlink" title="dijkstra"></a>dijkstra</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,a[<span class="number">205</span>][<span class="number">205</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dij</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> k=<span class="number">1</span>;k&lt;=n;k ++)</span><br><span class="line">	       <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i ++)</span><br><span class="line">		       <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j ++)</span><br><span class="line">			       <span class="keyword">if</span> (i!=j &amp;&amp; i!=k &amp;&amp; j!=k &amp;&amp; a[i][k]!=a[<span class="number">0</span>][<span class="number">0</span>] &amp;&amp; a[k][j]!=a[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">				       <span class="keyword">if</span> (a[i][j]&gt;a[i][k]+a[k][j])</span><br><span class="line">						a[i][j]=a[i][k]+a[k][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>			<span class="comment">//起点为1终点为n的最短路,不存在输出-1</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(a,<span class="number">125</span>,<span class="keyword">sizeof</span> a);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">if</span> (n==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">else</span></span><br><span class="line">       	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i ++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> x,y,z;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">			a[x][y] = <span class="built_in">min</span>(a[x][y],z);</span><br><span class="line">			a[y][x] = <span class="built_in">min</span>(a[y][x],z);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">dij</span>();</span><br><span class="line">		<span class="keyword">if</span> (a[<span class="number">1</span>][n]!=a[<span class="number">0</span>][<span class="number">0</span>]) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[<span class="number">1</span>][n]);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="spfa"><a href="#spfa" class="headerlink" title="spfa"></a>spfa</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100</span>,M = <span class="number">2000</span>;</span><br><span class="line"><span class="type">int</span> e[N],vis[N],x[M],y[M],z[M],d[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;<span class="type">int</span> y,next,w;&#125; h[<span class="number">2</span>*M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> tot;</span><br><span class="line">	++ tot;</span><br><span class="line">	h[tot].y = y;</span><br><span class="line">	h[tot].w = z;</span><br><span class="line">	h[tot].next = e[x];</span><br><span class="line">	e[x] = tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">static</span> queue &lt;<span class="type">int</span>&gt; q;</span><br><span class="line">	<span class="built_in">memset</span>(d,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> d);</span><br><span class="line">	<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">	d[u] = <span class="number">0</span>;</span><br><span class="line">	q.<span class="built_in">push</span>(u);</span><br><span class="line">	vis[u] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x = q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();vis[x] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i=e[x];i;i=h[i].next)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> y = h[i].y;</span><br><span class="line">			<span class="keyword">if</span> (d[x]+h[i].w&lt;d[y])</span><br><span class="line">			&#123;</span><br><span class="line">				d[y] = d[x] + h[i].w;</span><br><span class="line">				<span class="keyword">if</span> (!vis[y])</span><br><span class="line">				&#123;</span><br><span class="line">					vis[y] = <span class="number">1</span>;</span><br><span class="line">					q.<span class="built_in">push</span>(y);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i ++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x,y,z;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">		<span class="built_in">add</span>(x,y,z);<span class="built_in">add</span>(y,x,z);		<span class="comment">//无向边</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">spfa</span>(<span class="number">1</span>);				<span class="comment">//以1号结点为起点做单源最短路</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i ++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,d[i]);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> x,id;</span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> node &amp;B) <span class="type">const</span> &#123;<span class="keyword">return</span> x&gt;B.x;&#125;</span><br><span class="line">&#125; a[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node A,node B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> A.x&lt;B.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i].x), a[i].id = i;</span><br><span class="line">	<span class="built_in">sort</span>(a<span class="number">+1</span>,a<span class="number">+1</span>+n,cmp);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i ++) <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,a[i].id,a[i].x);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="网络流最大流sap"><a href="#网络流最大流sap" class="headerlink" title="网络流最大流sap"></a>网络流最大流sap</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MaxEdge = <span class="number">2</span>*(N*M*<span class="number">6</span>),MaxNode = N*M*<span class="number">2</span><span class="number">+2</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Netflow</span>					<span class="comment">//网络流最大流之sap算法</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> TotNode;				<span class="comment">//网络流中的点数</span></span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">	&#123;<span class="type">int</span> y,next;&#125; H[MaxEdge];		<span class="comment">//网络流边</span></span><br><span class="line">	<span class="type">int</span> d[MaxNode],f[MaxEdge],E[MaxNode],<span class="keyword">final</span>[MaxNode],gap[MaxNode];</span><br><span class="line">	<span class="comment">//d距离标号，gap距离标号对应的结点的个数</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span>		<span class="comment">//加边</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">static</span> <span class="type">int</span> tot;</span><br><span class="line">		H[++ tot].y = y;</span><br><span class="line">		H[tot].next = E[x];</span><br><span class="line">		E[x] = tot;</span><br><span class="line">		f[tot] = z;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span>		<span class="comment">//残量网络</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">add</span>(x,y,z);<span class="built_in">add</span>(y,x,<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> limit)</span>		<span class="comment">//增广路</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (now==t)</span><br><span class="line">			<span class="keyword">return</span> limit;</span><br><span class="line">		<span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i=E[now];i;i=H[i].next) <span class="keyword">if</span> (f[i])	<span class="comment">// 还能流流量</span></span><br><span class="line">		&#123;</span><br><span class="line">			E[now] = i;				<span class="comment">//保证当前弧之前不存在允许弧</span></span><br><span class="line">			<span class="type">int</span> j = H[i].y;</span><br><span class="line">			<span class="keyword">if</span> (d[j]<span class="number">+1</span>!=d[now]) <span class="keyword">continue</span>;		<span class="comment">//从后往前走</span></span><br><span class="line">			<span class="type">int</span> tmp = <span class="built_in">dfs</span>(j,<span class="built_in">min</span>(limit-ret,f[i]));</span><br><span class="line">			f[i] -= tmp;</span><br><span class="line">			ret += tmp;</span><br><span class="line">			<span class="keyword">if</span> (i &amp; <span class="number">1</span>) f[i<span class="number">+1</span>] += tmp;<span class="keyword">else</span> f[i<span class="number">-1</span>] += tmp;</span><br><span class="line">			<span class="comment">//更新残量网络</span></span><br><span class="line">			<span class="keyword">if</span> (ret==limit) <span class="keyword">return</span> ret;		<span class="comment">//已经流满流量</span></span><br><span class="line">		&#125;</span><br><span class="line">		E[now] = <span class="keyword">final</span>[now];			<span class="comment">//恢复标号</span></span><br><span class="line">		gap[d[now]] --;</span><br><span class="line">		<span class="keyword">if</span> (!gap[d[now]]) d[s] = TotNode;	<span class="comment">//出现断层,增广失败</span></span><br><span class="line">		gap[++ d[now]] ++;</span><br><span class="line">		<span class="keyword">return</span> ret;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">sap</span><span class="params">(<span class="type">int</span> node)</span>				<span class="comment">//O(N^2*M)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">		TotNode = node;</span><br><span class="line">		<span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span> d);			<span class="comment">//清空距离标号</span></span><br><span class="line">		gap[<span class="number">0</span>] = TotNode;			<span class="comment">//网络流中点的总数</span></span><br><span class="line">		<span class="built_in">memcpy</span>(<span class="keyword">final</span>,E,<span class="keyword">sizeof</span> E);</span><br><span class="line">		<span class="keyword">while</span> (d[s]&lt;TotNode)</span><br><span class="line">			ans += <span class="built_in">dfs</span>(s,INF);</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; netflow;</span><br></pre></td></tr></table></figure>


<h1 id="tri树"><a href="#tri树" class="headerlink" title="tri树"></a>tri树</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">300005</span>, M = <span class="number">4000005</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">node</span>()&#123;len = <span class="number">-1</span>;&#125;</span><br><span class="line">	<span class="type">bool</span> num;</span><br><span class="line">	<span class="type">int</span> len;</span><br><span class="line">	<span class="type">int</span> next,dep;</span><br><span class="line">	<span class="type">int</span> s[<span class="number">26</span>];</span><br><span class="line">&#125; h[M];</span><br><span class="line"><span class="type">int</span> n,m,tot;</span><br><span class="line"><span class="type">int</span> a[N],f[N];</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line">queue &lt;<span class="type">int</span>&gt; Q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d\n%s\n%d&quot;</span>,&amp;n,s,&amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i ++) a[i] = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i ++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">		<span class="type">int</span> len = <span class="built_in">strlen</span>(s),now = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;len;j ++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (!h[now].s[s[j]-<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line">				h[now].s[s[j]-<span class="string">&#x27;a&#x27;</span>] = ++ tot;</span><br><span class="line">			now = h[now].s[s[j]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		h[now].num = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//普通建tri</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i ++) <span class="keyword">if</span> (h[<span class="number">0</span>].s[i]) Q.<span class="built_in">push</span>(h[<span class="number">0</span>].s[i]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> x=Q.<span class="built_in">front</span>();!Q.<span class="built_in">empty</span>();x=Q.<span class="built_in">front</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		Q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j ++)</span><br><span class="line">			<span class="keyword">if</span> (h[x].s[j])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="type">int</span> y = h[x].s[j];</span><br><span class="line">				h[y].next = h[h[x].next].s[j];</span><br><span class="line">				h[y].dep = h[x].dep + <span class="number">1</span>;</span><br><span class="line">				Q.<span class="built_in">push</span>(y);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> h[x].s[j] = h[h[x].next].s[j];</span><br><span class="line">		<span class="keyword">if</span> (h[x].num) h[x].len = h[x].dep;</span><br><span class="line">		<span class="keyword">if</span> (h[x].len&lt;<span class="number">0</span>) h[x].len = h[h[x].next].len;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//求fail指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>,x=<span class="number">0</span>;i&lt;n;i ++)</span><br><span class="line">	&#123;</span><br><span class="line">		x = h[x].s[a[i]];</span><br><span class="line">		<span class="keyword">if</span> (h[x].len&gt;=<span class="number">0</span>) ++ f[i-h[x].len],-- f[i<span class="number">+1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>,sum = <span class="number">0</span>;i&lt;n;i ++)</span><br><span class="line">		sum += f[i],ans += !sum;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//freopen(&quot;3172.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">	<span class="comment">//freopen(&quot;.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">	<span class="built_in">work</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="匈牙利算法-二分图最大匹配"><a href="#匈牙利算法-二分图最大匹配" class="headerlink" title="匈牙利算法-二分图最大匹配"></a>匈牙利算法-二分图最大匹配</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">55</span>,M = <span class="number">55</span>;</span><br><span class="line"><span class="type">int</span> tot,ans,n,m;</span><br><span class="line"><span class="type">bool</span> flag,p[M];</span><br><span class="line"><span class="type">int</span> f[M],Edge[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">sqr</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="keyword">return</span> (<span class="type">double</span>)x*x;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;			<span class="comment">//没有被选中</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i ++)		<span class="comment">//扫描每个匹配点</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!p[i] &amp;&amp; Edge[x][i])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//有边相连可以匹配,且在这次查找递归路径中没有尝试改变归属问题</span></span><br><span class="line">			p[i] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">check</span>(f[i]))	<span class="comment">//匹配点没有归属或者可以腾出位置</span></span><br><span class="line">			&#123;</span><br><span class="line">				f[i] = x;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">bool</span> flag;</span><br><span class="line">	<span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span> f);		<span class="comment">//匹配数组</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i ++)		<span class="comment">//对每一个点都尝试匹配</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">memset</span>(p,<span class="number">0</span>,<span class="keyword">sizeof</span> p);	<span class="comment">//清空标记数组</span></span><br><span class="line">		flag = <span class="built_in">check</span>(i);</span><br><span class="line">		<span class="keyword">if</span> (flag) ans ++;		<span class="comment">//匹配成功</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="高精度"><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 9999</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DLEN 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BigNum</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> a[<span class="number">500</span>];    <span class="comment">//可以控制大数的位数</span></span><br><span class="line">    <span class="type">int</span> len;       <span class="comment">//大数长度</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BigNum</span>()&#123; len = <span class="number">1</span>;<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a)); &#125;   <span class="comment">//构造函数</span></span><br><span class="line">    <span class="built_in">BigNum</span>(<span class="type">const</span> <span class="type">int</span>);       <span class="comment">//将一个int类型的变量转化为大数</span></span><br><span class="line">    <span class="built_in">BigNum</span>(<span class="type">const</span> <span class="type">char</span>*);     <span class="comment">//将一个字符串类型的变量转化为大数</span></span><br><span class="line">    <span class="built_in">BigNum</span>(<span class="type">const</span> BigNum &amp;);  <span class="comment">//拷贝构造函数</span></span><br><span class="line">    BigNum &amp;<span class="keyword">operator</span>=(<span class="type">const</span> BigNum &amp;);   <span class="comment">//重载赋值运算符，大数之间进行赋值运算</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp;,  BigNum&amp;);   <span class="comment">//重载输入运算符</span></span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp;,  BigNum&amp;);   <span class="comment">//重载输出运算符</span></span><br><span class="line"></span><br><span class="line">    BigNum <span class="keyword">operator</span>+(<span class="type">const</span> BigNum &amp;) <span class="type">const</span>;   <span class="comment">//重载加法运算符，两个大数之间的相加运算</span></span><br><span class="line">    BigNum <span class="keyword">operator</span>-(<span class="type">const</span> BigNum &amp;) <span class="type">const</span>;   <span class="comment">//重载减法运算符，两个大数之间的相减运算</span></span><br><span class="line">    BigNum <span class="keyword">operator</span>*(<span class="type">const</span> BigNum &amp;) <span class="type">const</span>;   <span class="comment">//重载乘法运算符，两个大数之间的相乘运算</span></span><br><span class="line">    BigNum <span class="keyword">operator</span>/(<span class="type">const</span> <span class="type">int</span>   &amp;) <span class="type">const</span>;    <span class="comment">//重载除法运算符，大数对一个整数进行相除运算</span></span><br><span class="line"></span><br><span class="line">    BigNum <span class="keyword">operator</span>^(<span class="type">const</span> <span class="type">int</span>  &amp;) <span class="type">const</span>;    <span class="comment">//大数的n次方运算</span></span><br><span class="line">    <span class="type">int</span>    <span class="keyword">operator</span>%(<span class="type">const</span> <span class="type">int</span>  &amp;) <span class="type">const</span>;    <span class="comment">//大数对一个int类型的变量进行取模运算    </span></span><br><span class="line">    <span class="type">bool</span>   <span class="keyword">operator</span>&gt;(<span class="type">const</span> BigNum &amp; T)<span class="type">const</span>;   <span class="comment">//大数和另一个大数的大小比较</span></span><br><span class="line">    <span class="type">bool</span>   <span class="keyword">operator</span>&gt;(<span class="type">const</span> <span class="type">int</span> &amp; t)<span class="type">const</span>;      <span class="comment">//大数和一个int类型的变量的大小比较</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>;       <span class="comment">//输出大数</span></span><br><span class="line">&#125;;</span><br><span class="line">BigNum::<span class="built_in">BigNum</span>(<span class="type">const</span> <span class="type">int</span> b)     <span class="comment">//将一个int类型的变量转化为大数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> c,d = b;</span><br><span class="line">    len = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));</span><br><span class="line">    <span class="keyword">while</span>(d &gt; MAXN)</span><br><span class="line">    &#123;</span><br><span class="line">        c = d - (d / (MAXN + <span class="number">1</span>)) * (MAXN + <span class="number">1</span>);</span><br><span class="line">        d = d / (MAXN + <span class="number">1</span>);</span><br><span class="line">        a[len++] = c;</span><br><span class="line">    &#125;</span><br><span class="line">    a[len++] = d;</span><br><span class="line">&#125;</span><br><span class="line">BigNum::<span class="built_in">BigNum</span>(<span class="type">const</span> <span class="type">char</span>*s)     <span class="comment">//将一个字符串类型的变量转化为大数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> t,k,index,l,i;</span><br><span class="line">    <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));</span><br><span class="line">    l=<span class="built_in">strlen</span>(s);   </span><br><span class="line">    len=l/DLEN;</span><br><span class="line">    <span class="keyword">if</span>(l%DLEN)</span><br><span class="line">        len++;</span><br><span class="line">    index=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=l<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i-=DLEN)</span><br><span class="line">    &#123;</span><br><span class="line">        t=<span class="number">0</span>;</span><br><span class="line">        k=i-DLEN<span class="number">+1</span>;</span><br><span class="line">        <span class="keyword">if</span>(k&lt;<span class="number">0</span>)</span><br><span class="line">            k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=k;j&lt;=i;j++)</span><br><span class="line">            t=t*<span class="number">10</span>+s[j]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        a[index++]=t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">BigNum::<span class="built_in">BigNum</span>(<span class="type">const</span> BigNum &amp; T) : <span class="built_in">len</span>(T.len)  <span class="comment">//拷贝构造函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; len ; i++)</span><br><span class="line">        a[i] = T.a[i];</span><br><span class="line">&#125;</span><br><span class="line">BigNum &amp; BigNum::<span class="keyword">operator</span>=(<span class="type">const</span> BigNum &amp; n)   <span class="comment">//重载赋值运算符，大数之间进行赋值运算</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    len = n.len;</span><br><span class="line">    <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; len ; i++)</span><br><span class="line">        a[i] = n.a[i];</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp; in,  BigNum &amp; b)   <span class="comment">//重载输入运算符</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch[MAXSIZE*<span class="number">4</span>];</span><br><span class="line">    <span class="type">int</span> i = <span class="number">-1</span>;</span><br><span class="line">    in&gt;&gt;ch;</span><br><span class="line">    <span class="type">int</span> l=<span class="built_in">strlen</span>(ch);</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=l<span class="number">-1</span>;i&gt;=<span class="number">0</span>;)</span><br><span class="line">    &#123;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> t=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>&amp;&amp;i&gt;=<span class="number">0</span>;j++,i--,t*=<span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sum+=(ch[i]-<span class="string">&#x27;0&#x27;</span>)*t;</span><br><span class="line">        &#125;</span><br><span class="line">        b.a[count]=sum;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    b.len =count++;</span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out,  BigNum&amp; b)   <span class="comment">//重载输出运算符</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">    cout &lt;&lt; b.a[b.len - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(i = b.len - <span class="number">2</span> ; i &gt;= <span class="number">0</span> ; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        cout.<span class="built_in">width</span>(DLEN);</span><br><span class="line">        cout.<span class="built_in">fill</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        cout &lt;&lt; b.a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BigNum BigNum::<span class="keyword">operator</span>+(<span class="type">const</span> BigNum &amp; T) <span class="type">const</span>   <span class="comment">//两个大数之间的相加运算</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">BigNum <span class="title">t</span><span class="params">(*<span class="keyword">this</span>)</span></span>;</span><br><span class="line">    <span class="type">int</span> i,big;      <span class="comment">//位数   </span></span><br><span class="line">    big = T.len &gt; len ? T.len : len;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; big ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t.a[i] +=T.a[i];</span><br><span class="line">        <span class="keyword">if</span>(t.a[i] &gt; MAXN)</span><br><span class="line">        &#123;</span><br><span class="line">            t.a[i + <span class="number">1</span>]++;</span><br><span class="line">            t.a[i] -=MAXN<span class="number">+1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(t.a[big] != <span class="number">0</span>)</span><br><span class="line">        t.len = big + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        t.len = big;   </span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line">BigNum BigNum::<span class="keyword">operator</span>-(<span class="type">const</span> BigNum &amp; T) <span class="type">const</span>   <span class="comment">//两个大数之间的相减运算</span></span><br><span class="line">&#123;  </span><br><span class="line">    <span class="type">int</span> i,j,big;</span><br><span class="line">    <span class="type">bool</span> flag;</span><br><span class="line">    BigNum t1,t2;</span><br><span class="line">    <span class="keyword">if</span>(*<span class="keyword">this</span>&gt;T)</span><br><span class="line">    &#123;</span><br><span class="line">        t1=*<span class="keyword">this</span>;</span><br><span class="line">        t2=T;</span><br><span class="line">        flag=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        t1=T;</span><br><span class="line">        t2=*<span class="keyword">this</span>;</span><br><span class="line">        flag=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    big=t<span class="number">1.l</span>en;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; big ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(t<span class="number">1.</span>a[i] &lt; t<span class="number">2.</span>a[i])</span><br><span class="line">        &#123;</span><br><span class="line">            j = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(t<span class="number">1.</span>a[j] == <span class="number">0</span>)</span><br><span class="line">                j++;</span><br><span class="line">            t<span class="number">1.</span>a[j--]--;</span><br><span class="line">            <span class="keyword">while</span>(j &gt; i)</span><br><span class="line">                t<span class="number">1.</span>a[j--] += MAXN;</span><br><span class="line">            t<span class="number">1.</span>a[i] += MAXN + <span class="number">1</span> - t<span class="number">2.</span>a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            t<span class="number">1.</span>a[i] -= t<span class="number">2.</span>a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    t<span class="number">1.l</span>en = big;</span><br><span class="line">    <span class="keyword">while</span>(t<span class="number">1.</span>a[len - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; t<span class="number">1.l</span>en &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t<span class="number">1.l</span>en--;</span><br><span class="line">        big--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)</span><br><span class="line">        t<span class="number">1.</span>a[big<span class="number">-1</span>]=<span class="number">0</span>-t<span class="number">1.</span>a[big<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">return</span> t1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BigNum BigNum::<span class="keyword">operator</span>*(<span class="type">const</span> BigNum &amp; T) <span class="type">const</span>   <span class="comment">//两个大数之间的相乘运算</span></span><br><span class="line">&#123;</span><br><span class="line">    BigNum ret;</span><br><span class="line">    <span class="type">int</span> i,j,up;</span><br><span class="line">    <span class="type">int</span> temp,temp1;   </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; len ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        up = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span> ; j &lt; T.len ; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = a[i] * T.a[j] + ret.a[i + j] + up;</span><br><span class="line">            <span class="keyword">if</span>(temp &gt; MAXN)</span><br><span class="line">            &#123;</span><br><span class="line">                temp1 = temp - temp / (MAXN + <span class="number">1</span>) * (MAXN + <span class="number">1</span>);</span><br><span class="line">                up = temp / (MAXN + <span class="number">1</span>);</span><br><span class="line">                ret.a[i + j] = temp1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                up = <span class="number">0</span>;</span><br><span class="line">                ret.a[i + j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(up != <span class="number">0</span>)</span><br><span class="line">            ret.a[i + j] = up;</span><br><span class="line">    &#125;</span><br><span class="line">    ret.len = i + j;</span><br><span class="line">    <span class="keyword">while</span>(ret.a[ret.len - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; ret.len &gt; <span class="number">1</span>)</span><br><span class="line">        ret.len--;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">BigNum BigNum::<span class="keyword">operator</span>/(<span class="type">const</span> <span class="type">int</span> &amp; b) <span class="type">const</span>   <span class="comment">//大数对一个整数进行相除运算</span></span><br><span class="line">&#123;</span><br><span class="line">    BigNum ret;</span><br><span class="line">    <span class="type">int</span> i,down = <span class="number">0</span>;   </span><br><span class="line">    <span class="keyword">for</span>(i = len - <span class="number">1</span> ; i &gt;= <span class="number">0</span> ; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        ret.a[i] = (a[i] + down * (MAXN + <span class="number">1</span>)) / b;</span><br><span class="line">        down = a[i] + down * (MAXN + <span class="number">1</span>) - ret.a[i] * b;</span><br><span class="line">    &#125;</span><br><span class="line">    ret.len = len;</span><br><span class="line">    <span class="keyword">while</span>(ret.a[ret.len - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; ret.len &gt; <span class="number">1</span>)</span><br><span class="line">        ret.len--;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> BigNum::<span class="keyword">operator</span> %(<span class="type">const</span> <span class="type">int</span> &amp; b) <span class="type">const</span>    <span class="comment">//大数对一个int类型的变量进行取模运算    </span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,d=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = len<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        d = ((d * (MAXN<span class="number">+1</span>))% b + a[i])% b;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line">BigNum BigNum::<span class="keyword">operator</span>^(<span class="type">const</span> <span class="type">int</span> &amp; n) <span class="type">const</span>    <span class="comment">//大数的n次方运算</span></span><br><span class="line">&#123;</span><br><span class="line">    BigNum t,<span class="built_in">ret</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    <span class="type">int</span> m=n;</span><br><span class="line">    <span class="keyword">while</span>(m&gt;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t=*<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">for</span>( i=<span class="number">1</span>;i&lt;&lt;<span class="number">1</span>&lt;=m;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            t=t*t;</span><br><span class="line">        &#125;</span><br><span class="line">        m-=i;</span><br><span class="line">        ret=ret*t;</span><br><span class="line">        <span class="keyword">if</span>(m==<span class="number">1</span>)</span><br><span class="line">            ret=ret*(*<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> BigNum::<span class="keyword">operator</span>&gt;(<span class="type">const</span> BigNum &amp; T) <span class="type">const</span>   <span class="comment">//大数和另一个大数的大小比较</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ln;</span><br><span class="line">    <span class="keyword">if</span>(len &gt; T.len)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(len == T.len)</span><br><span class="line">    &#123;</span><br><span class="line">        ln = len - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(a[ln] == T.a[ln] &amp;&amp; ln &gt;= <span class="number">0</span>)</span><br><span class="line">            ln--;</span><br><span class="line">        <span class="keyword">if</span>(ln &gt;= <span class="number">0</span> &amp;&amp; a[ln] &gt; T.a[ln])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> BigNum::<span class="keyword">operator</span> &gt;(<span class="type">const</span> <span class="type">int</span> &amp; t) <span class="type">const</span>    <span class="comment">//大数和一个int类型的变量的大小比较</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">BigNum <span class="title">b</span><span class="params">(t)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BigNum::print</span><span class="params">()</span>    <span class="comment">//输出大数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;   </span><br><span class="line">    cout &lt;&lt; a[len - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(i = len - <span class="number">2</span> ; i &gt;= <span class="number">0</span> ; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        cout.<span class="built_in">width</span>(DLEN);</span><br><span class="line">        cout.<span class="built_in">fill</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        cout &lt;&lt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i,n;</span><br><span class="line">    BigNum x[<span class="number">101</span>];      <span class="comment">//定义大数的对象数组</span></span><br><span class="line">    x[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">101</span>;i++)</span><br><span class="line">        x[i]=x[i<span class="number">-1</span>]*(<span class="number">4</span>*i<span class="number">-2</span>)/(i<span class="number">+1</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n)==<span class="number">1</span> &amp;&amp; n!=<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x[n].<span class="built_in">print</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h1><p>单点修改,左区间查询</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="keyword">return</span> x &amp; (-x);   </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> pos,<span class="type">int</span> num)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">while</span> (pos&lt;=N) &#123;  </span><br><span class="line">        h[pos] += num;  </span><br><span class="line">        pos += <span class="built_in">lowbit</span>(pos);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> end)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span> (end&gt;<span class="number">0</span>) &#123;  </span><br><span class="line">        sum += h[end];  </span><br><span class="line">        end -= <span class="built_in">lowbit</span>(end);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> sum;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h1 id="交换swap"><a href="#交换swap" class="headerlink" title="交换swap"></a>交换swap</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span><span class="comment">//引用传递,C++特性 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> tmp = x;</span><br><span class="line">	x = y;</span><br><span class="line">	y = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap1</span><span class="params">(<span class="type">int</span> *x,<span class="type">int</span> *y)</span><span class="comment">//指针交换 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> tmp;</span><br><span class="line">	tmp = *x;</span><br><span class="line">	*x = *y;</span><br><span class="line">	*y = tmp;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> a = <span class="number">3</span>,b = <span class="number">5</span>;</span><br><span class="line">	<span class="built_in">swap</span>(a,b);</span><br><span class="line">	<span class="built_in">swap1</span>(&amp;a,&amp;b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>,a,b);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--线段树-->
]]></content>
      <categories>
        <category>信息学</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title>再看千与千寻</title>
    <url>/2019/%E5%86%8D%E7%9C%8B%E5%8D%83%E4%B8%8E%E5%8D%83%E5%AF%BB/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h1><h2 id="契机"><a href="#契机" class="headerlink" title="契机"></a>契机</h2><p>在B站上看到有关<code>《千与千寻》</code>在中国上映的消息。意料之外，情理之中。因为去年吉卜力就上映过<code>《龙猫》</code>这一作品。再中国上映的这两部作品，都算是知名度超高的宫崎骏力作。所以这在情理之中，而意料之外，体现在两个方面，一个是时间比我想象中要早，隔了不到1年的时间就又有吉卜力的<del>旧</del>作品上映了。<del>或许是中国人的钱好赚吧！</del>其次，我是在B站上看到有关消息的，说明B站的推荐算法十分精准，也说明现在精确内容推送的算法已经相当成熟了。根据我的猜测多半是<code>彭昱畅``吉卜力</code>等关键字推送过来的。</p>
<h2 id="为何要选择再看？"><a href="#为何要选择再看？" class="headerlink" title="为何要选择再看？"></a>为何要选择再看？</h2><p>其实跟我去年选择看《龙猫》的理由相似，就是为了情怀。据传闻，宫老爷子对中国的盗版现象不满，所以一直以来都没机会在中国上映。所以这次继续为宫老爷子补票。<del>当然也不止他一个人，包括久石让，和整个吉卜力团队</del></p>
<h2 id="为何选择今天-20190621-？"><a href="#为何选择今天-20190621-？" class="headerlink" title="为何选择今天(20190621)？"></a>为何选择今天(20190621)？</h2><p>抱着越早看越好的心态，所以选择首映当天来看，而且首映基本都在周五，正好我周五下午也没有课。</p>
<h1 id="剧情"><a href="#剧情" class="headerlink" title="剧情"></a>剧情</h1><p>现在，我就要重看并梳理我这次观影的感受。毕竟，优秀的电影在不同时段看都能有不同的感受。而这次看，我也是收获到不少的小细节，也有不同的感受。因为故事本身很丰满，不同的解读维度也很多，但是总要选择一个维度，权衡一下，还是用时间线的方式去表达我的观影感受。而宫崎骏的动画电影都有很多值得深挖的细节，他本人也对细节尤为重视，尽管我己经基本将剧情倒背如流，但我依旧能发现以往所没注意到的诸多细节。</p>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>这次发现故事本身是首尾呼应的，甚至连说的话也是高度类似的，从进去隧道千寻因为恐慌一直粘着妈妈。到结尾依旧如此，下面这两幅图就能看出。<code>截取片段后发现原来是一模一样的画面，但是配音不同，刚进隧道时时有强回音的，回去只有弱回音了</code><br><video id="video001" controls="controls" preload="none" src="/video/001.mp4"><br>您的浏览器不支持 video 标签。<br></video><br><video id="video002" controls="controls" preload="none" src="/video/002.mp4"><br>您的浏览器不支持 video 标签。<br></video></p>
<h2 id="情节"><a href="#情节" class="headerlink" title="情节"></a>情节</h2><p>刚开始我研究了一下汽车的行驶方向，他们开的是左陀车，却是靠左行驶，这点真的很奇怪。其他车都是右陀车。<br>只不过刚开始时，我觉得父母执意要穿过隧道，而没有采纳千寻回去意见做法很奇怪，既然千寻都要求了，还非要往前走，而且也不牵着她…<br>爸爸给这里面的世界解释是主题公园的做法，逻辑还算说的通。<br>而且千里外爸爸就能闻到食物的味道，也是强…<br>而且这部作品有很多夸张的地方，吃肉的时候，哭时偌大的泪水，千寻的细腿。<br>而且这个世界突然天黑的很快，这有可能是汤婆婆的魔法。<br>然后就到了我童年唯一记住的地方，就是跟白龙过桥这段。我记得小时候就很不解，为什么不能呼吸，不能被其他人发现是人类…<br>从白龙给千寻指引一条路，让他去找锅炉爷爷，并找汤婆婆签订契约，要求一定要在这里工作时，我突然间发现，这整个汤屋就是一个人类社会的缩影，这里面的每个人就如同现实中的人。从出生那一刻起，你就是这个社会的一份子。刚开始也是会像千寻这样，对陌生事物的好奇和对陌生食物不了解的恐惧。以及进入社会后，尽管人人都很忙，但总会有像白龙这样的人，关注到落单的你。给你指引方向。<br>实际上，其他人给到的帮助也仅仅是指引大方向，而真正如何学习，提升自己，都是要靠自己。要能够自立，解决问题，但也并不意味着，封闭自己。同时，也要与其他人交流，能够从其他人身上得到对自己更有用的信息，更明确的小目标，小方向。<br>白龙是让千寻找锅炉爷爷，千寻照做，同时遇到一段很长的阶梯，而这时千寻腿短的劣势就显现出来了。而这一段，也隐射了很多。达成目标时很可能会遇到很多困难，而这些困难是不易察觉的，像白龙这样的神算子，可能也很难料到那段楼梯对千寻来说太高了。事实上，在生活中很多时候也是如此，比如我现在回我旧家，就会觉得一切事物都很渺小。因为小时候的视角跟现在是不一样的，自然会有这种明现的对比。而这一问题本身就是小问题，但要是不亲自试一下，可能发现不到这一问题。再比如说：做作业时，眼高手低，感觉问题很简单，大致知道怎么做，但是一做就遇到问题，或者在老师的引导下能做。<br>然后千寻来到锅炉爷爷烧热水的地方，到这里，整个人的反应就特别的真实有趣了。明明已经进了房间，却迟迟未开口，躲在墙后踱步。<br>这里面有个小细节也特别有趣。有个小煤灰抬不动煤炭，而好心的千寻帮忙抬了，这里能看出千寻的一个品质，那就是善良。但是帮助人也是需要代价的，你可能需要自己完成后续的事情，而且一味的帮助他人完成他们应当做的事情，会让这些人变得懒散，好吃懒做，认为就算完不成人物，也会有人收拾残局。这就不好了。而整部剧的设定，不工作就会被变成小动物，仍任宰割。真实社会也基本如此，有了工作，在这个社会中才有了价值，没有工作，也就失去了价值。当一个人这样做后，就相当于开了先例，那后面的人也会跟着争相模仿。这就是为什么有时候规则的制定会严格执行，减少开先例的情况，这些先例，都有可能成为后续其他人模仿的对象，进而影响整个规则执行的效果。<br>白龙让千寻去找锅炉爷爷而非其他人，是有其考虑的，锅炉爷爷可能更好说话，不会直接回绝千寻的邀请，毕竟千寻身上带有的人类气息，是被这个世界的神灵所厌恶的。尽管锅炉爷爷，可能会口头拒绝，但他心中会认真为千寻寻找出路。要是是其他人，可能也能达到效果，但是不一定有锅炉爷爷效果好，而且可以明现的感受到锅炉爷爷对整个汤屋的体制是十分了解的，他能给出比其他人更好的建议。<br>而且锅炉爷爷直接认千寻做孙女了，这点我挺惊讶的。可能这样做更能赢得玲的信任，而且也侧面说明了锅炉爷爷已经接受了千寻，并愿意保护和引导他了。$\color{white}{就像向往的生活中黄老师直接认子枫为自己的闺女}$<br>而且<del>烤蝾螈</del>也说明很多人愿意在利益面前冒险，尽管这可能会威胁自己的生命。影射现在很多人在股市中，不理智非得往坑里跳。<br>还有玲从一开始就对千寻骂骂咧咧，说其笨手笨脚，不懂得说谢谢。但这也只是为了让千寻更快的成长。事实上，作为新人，是绝对不能想问题都事无巨细的，刚开始入职是也会遇到各种挫折和领导的刁难。（后面汤婆婆让小千去清理大澡堂）<br>跟着萝卜精上楼这段也有一个细节，本来萝卜精应该到中间就下站了，但还是陪千寻上到了顶楼。自己再做电梯下去。<br>而且我本人不认为千寻没有礼貌，她只是不知道怎样做才是礼貌，她自身还是很愿意学习适应环境，并且达到解救其父母的目的的。从她的表现看，他是十分礼貌的。见人如果没口头打招呼都会礼貌的鞠躬。<br>到了楼上就算是见到了强权下的汤婆婆，依然能坚定自己的想法索要工作。而且本剧另外一个映射<code>巨婴</code>也登场了。名如其形。名如其意。但巨婴本身性格的形成与汤婆婆是有很大的关系的，过分溺爱造成的，同时也能看出汤婆婆柔软的一面。再强势的人都会有柔弱的一面。而从这一刻起千寻被剥夺了名字叫小千。我觉得这段能映射日本社会现状，也是我对日本比较失望的一点。日本整个社会就像一个巨大的机器，每个人都是其中的零部件，而这些零部件已经没有了名字，每个人从事的职业、人物都被标准化，抹去了棱角，也忘了自己叫什么，没有了自身的特色，如同流水线产品般。忘掉自己的名字是很可怕的，因为人各有不同，每个人都有其独特之处。<br>千寻说脚软的时候，发现日语中真的很多象声词。这也是我一直吐槽日语中形容词匮乏的一大原因，日语很多词义太随便了。<br>汤屋的世界是日落而作，日出而息。这也能很好解释小千刚来的时候，什么人都没见到。<br>渐渐的汤屋中的所有人也都慢慢接受了小千的加入，说明很多时候适应新事物都会有个过程的。<br>再次证明小千还是很有礼貌的<br><video id="video001" controls="controls" preload="none" src="/video/003.mp4"><br>您的浏览器不支持 video 标签。<br></video><br>事实上，第一天的工作并不顺利，这我前面也已经解释过了。小千给无脸男留门，在不了解无脸男的意图的情况下还这么做，说明她足够的真诚，也相信无脸男的善良。<br><img data-src="/images/%E5%86%8D%E7%9C%8B%E5%8D%83%E4%B8%8E%E5%8D%83%E5%AF%BB/001.png"><br>这真的是像极了我们，一开始啥都不知道。<br>其实，我认为无脸男是喜欢小千的，但他表达的方式不对，小千也不认可，这也是小千另外一个难得的品质，做好自己分内事，不是自己所得的坚决不要。从一开始看到小千想要药浴，替小千要了一份。觉得她可能喜欢药浴，又拿了更多的给她。<br>片中的腐烂神也是人类污染的象征，事实上只是河神，但是已经被污染的看不出原貌。店里的人也是礼貌的请回去。然而，污染是全世界的问题，是每个人的问题，人们只想着将污染从身边转移走，而不想着去如何处理和避免污染。<br>而且，一开始河神给的钱并不多，那也是后期觉得小千服侍的好加多的，所以说有时候不要太斤斤计较，拿100的钱，做120的努力，可能能得到150的回报。<br>看到满地的金钱就抢，像极了人类社会。<br>后面的内容就没什么好评价的了<del>主要是因为懒，写不动了</del></p>
]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>读后感</tag>
        <tag>电影</tag>
      </tags>
  </entry>
  <entry>
    <title>单域名可实现Cloudflare Workers优选IP</title>
    <url>/2024/%E5%8D%95%E5%9F%9F%E5%90%8D%E5%8F%AF%E5%AE%9E%E7%8E%B0Cloudflare-Workers%E4%BC%98%E9%80%89IP/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="TLDR"><a href="#TLDR" class="headerlink" title="TLDR"></a>TLDR</h1><p>鱼和熊掌不可兼得。<br>想要保留国内域名 DNS 服务器（如：DNSPOD）不变的情况下，还能接入CloudFlare服务。<br>在2021 年 11 月以前，可以使用cloudflare partner来实现。<br>在这之后，借助SaaS功能，两个域名，绑定信用卡也能实现。<br>那么有没有更好的方案呢？<br>为什么不想修改域名的NS记录到Cloudflare，一个最大的因素就是，国内的NS支持分运营商解析域名。<br>那么，可以考虑将子域名(dnspod.example.com)接入到DNSPOD上，主域名(example.com)接入到Cloudflare上。<br>主域名可以CNAME子域名下的域名。这样既能享受Cloudflare的服务，又支持分运营商解析。</p>
<h1 id="主域名-example-com-接入Cloudflare"><a href="#主域名-example-com-接入Cloudflare" class="headerlink" title="主域名(example.com)接入Cloudflare"></a>主域名(example.com)接入Cloudflare</h1><p>在购买域名的服务商将NS记录修改成Cloufalre提供的NS服务器即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NS	dan.ns.cloudflare.com</span><br><span class="line">NS	mary.ns.cloudflare.com</span><br></pre></td></tr></table></figure>
<p>接入成功后，配置workers相关路由。给workers使用的子域名配置小橙云。<br>假设workers使用的子域名为gd<br><img data-src="/images/%E5%8D%95%E5%9F%9F%E5%90%8D%E5%8F%AF%E5%AE%9E%E7%8E%B0CloudflareWorkers%E4%BC%98%E9%80%89IP/Screenshot_20240324112757.png" alt="配置路由"><br>配置路由完成之后，Cloudflare就知道gd.example.com属于Cloudflare，会转发流量到workers。<br>接着需要配置子域名的NS记录，让子域名接入到DNSPOD上。<br><img data-src="/images/%E5%8D%95%E5%9F%9F%E5%90%8D%E5%8F%AF%E5%AE%9E%E7%8E%B0CloudflareWorkers%E4%BC%98%E9%80%89IP/Screenshot_20240324114720.png" alt="配置NS"><br>配置workers.example.com的CNAME为cloudflare.dnspod.example.com，不要打开小乘云。<br><img data-src="/images/%E5%8D%95%E5%9F%9F%E5%90%8D%E5%8F%AF%E5%AE%9E%E7%8E%B0CloudflareWorkers%E4%BC%98%E9%80%89IP/Screenshot_20240324115650.png" alt="配置CNAME"></p>
<h1 id="子域名-dnspod-example-com-接入DNSPOD"><a href="#子域名-dnspod-example-com-接入DNSPOD" class="headerlink" title="子域名(dnspod.example.com)接入DNSPOD"></a>子域名(dnspod.example.com)接入DNSPOD</h1><p>在dnspod中添加域名dnspod.example.com，根据要求完成域名验证。<br>当状态显示正常后，*.dnspod.example.com的域名记录就可以配置了。<br><img data-src="/images/%E5%8D%95%E5%9F%9F%E5%90%8D%E5%8F%AF%E5%AE%9E%E7%8E%B0CloudflareWorkers%E4%BC%98%E9%80%89IP/Screenshot_20240324115005.png" alt="子域名接入DNSPOD"><br>借助项目<a href="https://github.com/ddgth/cf2dns">cf2dns</a>，优选Cloudflare IP，并自动分运营商配置A，AAAA记录。<br><img data-src="/images/%E5%8D%95%E5%9F%9F%E5%90%8D%E5%8F%AF%E5%AE%9E%E7%8E%B0CloudflareWorkers%E4%BC%98%E9%80%89IP/Screenshot_20240324115430.png" alt="优选IP记录"></p>
]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>启用跨链交易：一个去中心化的加密货币交换协议</title>
    <url>/2023/%E5%90%AF%E7%94%A8%E8%B7%A8%E9%93%BE%E4%BA%A4%E6%98%93%EF%BC%9A%E4%B8%80%E4%B8%AA%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E7%9A%84%E5%8A%A0%E5%AF%86%E8%B4%A7%E5%B8%81%E4%BA%A4%E6%8D%A2%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="原文标题"><a href="#原文标题" class="headerlink" title="原文标题"></a>原文标题</h1><p>Enabling Cross-chain Transactions: A Decentralized Cryptocurrency Exchange Protocol<br>发表于：IEEE Transactions on Information Forensics and Security, 2021(SCI 计算机科学 1区)</p>
<h1 id="摘要部分"><a href="#摘要部分" class="headerlink" title="摘要部分"></a>摘要部分</h1><h2 id="背景与现状"><a href="#背景与现状" class="headerlink" title="背景与现状"></a>背景与现状</h2><p>不同类型的加密货币不可能直接交易。<br>传统方式是由一个集中的第三方平台（加密货币交易所）来进行交易。容易受到单点故障与攻击。</p>
<h2 id="本文提出的方案或改进"><a href="#本文提出的方案或改进" class="headerlink" title="本文提出的方案或改进"></a>本文提出的方案或改进</h2><p>在本文中， 我们提出了一个分布式的加密货币交易方案来解决集中式交易所的问题 ，它可以实现不同类型的加密货币之间的交易。我们的方案是用<strong>以太坊区块链上的智能合约实现的</strong>，并部署在以太坊测试网络上。</p>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>不仅实现了单个用户之间的交易，而且还允许多个用户之间的交易。<br>实验结果证明，我们方案的成本是可以接受的。</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>交代加密货币发展状况，各种货币层出不穷。<br>基于可信第三方的集中式交易所带来了资金管理方面的便利，也可以充当中介，帮助用户在不同类型的加密货 币之间进行交易。<br>介绍前人基于第三方的集中式交易所的改进，降低交易所的安全风险。</p>
<h2 id="本文提出的方案或改进-1"><a href="#本文提出的方案或改进-1" class="headerlink" title="本文提出的方案或改进"></a>本文提出的方案或改进</h2><p>解决这个问题的最好办法是有一个分布式的加密货币交换方案。<br>因为以太坊平台是最大和最流行的区块链平台，支持部署智能合约而选择了以太坊平台。<br>提出了<strong>基于Ethereum的智能合约来实现一个去中心化的跨加密货币交换方案</strong>。</p>
<h2 id="主要贡献"><a href="#主要贡献" class="headerlink" title="主要贡献"></a>主要贡献</h2><ul>
<li>我们提出了一个基于智能合约的去中心化跨加密货币交换方案，它允许用户通过不同的账户在不同种类的加密货币之间进行交易。用户可以在短时间内发起多次转账，而提议的合约可以收集来自不同用户的多次转账，并在同一时间完成这些交易。</li>
<li>我们采取了一种有效的方法，通过选择多个验证者并在不信任的用户群中形成一个委员会，利用以太坊智能合约验证不同类型的货币交易。分析报告表明该委员会可以为每笔交易获得正确的验证结果。</li>
<li>我们在以太坊测试网络上实现并部署了我们的跨加密货币交易方案，并在本地机器上评估了合约的每一部分的运行成本。实验结果显示，我们方案 的本地运行成本只与参与者的数量有关，但与每个用户的交易数量无关。</li>
</ul>
<h1 id="相关的工作"><a href="#相关的工作" class="headerlink" title="相关的工作"></a>相关的工作</h1><p>介绍前人对<strong>去中心化加密货币交易方案的工作</strong></p>
<h1 id="系统和安全模式"><a href="#系统和安全模式" class="headerlink" title="系统和安全模式"></a>系统和安全模式</h1><h2 id="系统模型"><a href="#系统模型" class="headerlink" title="系统模型"></a>系统模型</h2><p>系统模型主要包含以下组成部分：付款人、受款人、中介、区块链</p>
<ul>
<li>付款人。付款人是一个想要向另一个用户转移加密货币的用户</li>
<li>受款人。受款人是一个需要转入的用户，但他&#x2F;她需要的加密货币类型在付款人那边是不可用的。</li>
<li>中介人。一些用户作为付款人和受款人之间的中间人，实现不同类型的加密货币之间的转移。中介人需要通过智能合约连接付款人和受款人。中介人需要加入<strong>验证委员会</strong>，参与交易验证过程。</li>
<li>区块链。我们方案的每个执行都涉及三个区块链。两个区块链是支付方和收款方分别使用的加密货币类型。第三个区块链是以太坊区块链，我们的智能合约是在其上设计和部署的。</li>
</ul>
<p>中介人有能力验证不同种类加密货币的交易</p>
<h2 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h2><p>考虑到系统中的恶意用户可能会设立大量账户，充当付款人、受款人或中介。可能的恶意行为如下所示</p>
<ul>
<li>恶意付款人或中介机构可能向合同发送欺骗性信息，而不进行转账或进行双重消费。</li>
<li>恶意受款人或中介机构在收到转账后可以欺骗合同，赚取额外的补偿费用。</li>
<li>参与验证委员会的恶意节点可能会发布错误的信息来破坏共识过程。</li>
</ul>
<p>恶意节点的哈希值总和应该小于任何时候总哈希值的1&#x2F;4。否则，会滋生自私的挖矿攻击。</p>
<h1 id="跨加密货币交易计划"><a href="#跨加密货币交易计划" class="headerlink" title="跨加密货币交易计划"></a>跨加密货币交易计划</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>我们需要两个中间人C1 和C2 ，他们可以是网络中的任何人。他们需要分别支持通过比特币和莱特币进行交易。<br>首先，A向C1转移x个莱特币。收到转账后，C1向C2转移等价的以太币，然后C2向B转移y个比特币。<br>中介可以通过这个过程，获得交易费用。<br>选择一组用户作为验证委员会，提供验证结果。合约将整合委员会的判断结果并得出最终结论。<br>多用户交易场景下，我们的合同可以将需要转移同种加密货币的付款人，与需要不同种加密货币的受款人相结合。</p>
<h2 id="单用户交易方案"><a href="#单用户交易方案" class="headerlink" title="单用户交易方案"></a>单用户交易方案</h2><p>单用户交易方案的具体过程如下：(参考论文中的图1)<br>一切顺利的情况下：</p>
<ol>
<li>交易双方选择合适的中介（C1和C2）并将交易的相关信息（如加密货币类型、交易金额和账户地址）发布到智能合约上。</li>
<li>中介C1和C2向智能合约发送一定量的押金。</li>
<li>付款方A向C1转x个莱特币</li>
<li>C2向收款方B转y个比特币。</li>
<li>退回C2的以太坊押金。</li>
<li>C1向C2转x个莱特币，<br>有两种可能的异常情况：<br>C2向收款方B转y个比特币时失败，将中介C2的押金转给B。<br>付款方A向C1转x个莱特币时失败，中介C1和C2的押金都退回。</li>
</ol>
<h2 id="贸易验证"><a href="#贸易验证" class="headerlink" title="贸易验证"></a>贸易验证</h2><p>中间人C1 和A之间的转账以及中间人C2 和B之间的转账需要被确认。而验证结 果需要发送到合同，以便进行下一步的工作。<br>我们认为系统中有大量的中间人，但每笔交易的进展只需要两个中间人。因此，其余的中介节点可以在我们的方案中作为验证者来验证交易。<br>为了防止恶意用户注册多个中介账户来攻击验证过程，我们使用工作证明（ PoW）算法来确定参加验证委员会的中介机构的集合。<br>在加入验证委员会之前，每一个成功解出PoW之谜的中间人都需要支付一些以太坊作为押金。如果一个中介节点始终是诚实的，它不仅可以拿回押金，还可以从不诚实节点的惩罚中获得奖励，以及从交易担保中获得交易费。<br>每次交易后，验证委员会的每个节点都需要验证交易，并将自己的验证结果发送给智能合约。</p>
<h2 id="多用户交易"><a href="#多用户交易" class="headerlink" title="多用户交易"></a>多用户交易</h2><p>这个方案是针对有多个用户在短时间内进行交易的情况而设计的。<br>智能合约可以支持多个用户参与加密货币的转移。<br>在该方案中，每个用户可以单独选择自己的交易伙伴。<br>合约将组合这些交易信息，并将同一用户转移的加密货币数量聚合起来，从而提高交易效率。<br>在该方案中，智能合约首先收集来自付款方A1、A2、A3……An和收款方B1、B2、B3……Bn的信息，计算交易金额的总和。<br>然后，中间人C1和C2收到此信息后，需要选择合适的交易伙伴，并提交等量的以太币作为保证金。<br>随后，所有付款方都需要向C1支付足够的coin1。<br>验证委员会的成员需要通过上一节描述的方法对这些转移进行验证。转移信息还将记录在合约中。<br>付款方向中间人C1转移后，合约将计算成功交易的数量，修改C1收到的金额，然后向C2发送消息。<br>最后，中间人C2根据收到的消息向每个收款方B1、B2、B3……Bn转移coin2。<br>如果向收款方Bi转移失败，则合约将向中间人C2发送相同数量的保证金。该方案可有效地实现多个用户之间的交易。</p>
<h2 id="合同执行"><a href="#合同执行" class="headerlink" title="合同执行"></a>合同执行</h2><p>包括中介合同和交易合同的编写。<br>中介合同用于控制中介的行为，交易合同是通过中介参与跨加密货币交易的付款方和收款方的完成。</p>
<h1 id="安全分析"><a href="#安全分析" class="headerlink" title="安全分析"></a>安全分析</h1><h2 id="审定委员会的安全性"><a href="#审定委员会的安全性" class="headerlink" title="审定委员会的安全性"></a>审定委员会的安全性</h2><p>假设选举委员会的节点总数为w，则假设恶意节点的总哈希率不超过总哈希率的1&#x2F;4。<br>在这种情况下，验证委员会的正确性得到了保障。<br>从表3可以看出，当我们取10个验证委员会成员时，恶意节点的数量超过总数量的1&#x2F;2的概率为0.99。<br>这意味着，如果智能合约收到超过一半的验证委员会成员的一致判断，那么有0.99的概率是正确的结果。<br>因此，该方案的验证委员会的安全性得到了充分的考虑和保障。</p>
<h1 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h1><p>在<strong>以太坊测试网络</strong>（测试环境而非生产环境）上实施并部署了我们提出的方案，我们方案的本地运行成本只受参与者数量的影响，与每个用户的交易数量无关。（与参与者数量相关，与交易金额无关）</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>在本文中，我们提出了一个基于智能合约的多个用户之间的去中心化跨加密货币 交换方案。在我们的方案中，我们使用乙醚作为中转，将不同种类的两种加密货 币之间的交易联系起来。我们还实现了合约，并评估了它在我们本地机器上的 执行开销。结果显示，我们方案的时间成本只与参与交易的用户总数有关，而 用户的交易数量对我们合约的运行时间没有明显影响。在未来，我们将从实验 部分的两个方面来改进我们的方案。首先，我们将尝试在更多用户参与的情况 下完成该方案的实施。其次，我们将在以太坊主网上部署我们的方案，以测试 我们方案在实际网络下的成本。</p>
<h1 id="个人想法"><a href="#个人想法" class="headerlink" title="个人想法"></a>个人想法</h1><p>用DEEPL翻译的论文，总是会有些瑕疵。随着ChatGPT之类的工具发展，我们可以向ChatGPT提出改进意见，来辅助翻译。<br>比如DEEPL会将ether翻译成“乙醚”，在人工检查发现后，可以告诉ChatGPT该如何翻译，来改进翻译质量。</p>
<h1 id="提问与回答"><a href="#提问与回答" class="headerlink" title="提问与回答"></a>提问与回答</h1><h2 id="押金交给谁，是否会需要交双倍押金，能避免交付押金吗？"><a href="#押金交给谁，是否会需要交双倍押金，能避免交付押金吗？" class="headerlink" title="押金交给谁，是否会需要交双倍押金，能避免交付押金吗？"></a>押金交给谁，是否会需要交双倍押金，能避免交付押金吗？</h2><p>押金交给智能合约，只有两个中介被要求先交付押金。<br>C2确实需要交双倍的押金，准确说是一部分以太坊，和与以太坊等价值的加密货币。<br>押金确保中介有足够多的以太坊参与客户的交易。</p>
<h2 id="跟传统的交易所中介相比，本文同样需要中介，这不也需要依赖三方吗？"><a href="#跟传统的交易所中介相比，本文同样需要中介，这不也需要依赖三方吗？" class="headerlink" title="跟传统的交易所中介相比，本文同样需要中介，这不也需要依赖三方吗？"></a>跟传统的交易所中介相比，本文同样需要中介，这不也需要依赖三方吗？</h2><p>根据论文中的说法：<br>集中式交易所为用户提供了管理资金和进行交易的便利。<br>但是作为一个中央机构，总会有一个单点故障。<br>采用分布式加密货币交换方案，这也符合加密货币去中心化的理念。<br>我个人认为本文其实也需要依赖以太坊、参与计划的用户作为中间商进行交易，并没有很好的去除中心化，但相比与传统的交易所而言，权力更加分散，整个体系更难被某一实体操控。</p>
<h2 id="为什么要使用两个中介，一个中介或者不需要中介不行吗？"><a href="#为什么要使用两个中介，一个中介或者不需要中介不行吗？" class="headerlink" title="为什么要使用两个中介，一个中介或者不需要中介不行吗？"></a>为什么要使用两个中介，一个中介或者不需要中介不行吗？</h2><p>文章中提到想找到一个支持两种加密货币的中介机构，并不容易。就算是找到这样的中介，也可以把它当作方案中提到的两个中介。</p>
<h2 id="为什么选用了以太坊，作为中间货币，而不直接进行交换？"><a href="#为什么选用了以太坊，作为中间货币，而不直接进行交换？" class="headerlink" title="为什么选用了以太坊，作为中间货币，而不直接进行交换？"></a>为什么选用了以太坊，作为中间货币，而不直接进行交换？</h2><p>因为以太坊是最大和最流行的支持部署智能合约的区块链平台。</p>
<h2 id="有什么手段来避免网络故障带来的损失，交易不一致性？"><a href="#有什么手段来避免网络故障带来的损失，交易不一致性？" class="headerlink" title="有什么手段来避免网络故障带来的损失，交易不一致性？"></a>有什么手段来避免网络故障带来的损失，交易不一致性？</h2><p>文中提到会在智能合约中设置一个时间限制，如果在规定时间内没有完成交易，就会自动撤销交易。</p>
<h2 id="如何保证参与计划的节点不作恶？"><a href="#如何保证参与计划的节点不作恶？" class="headerlink" title="如何保证参与计划的节点不作恶？"></a>如何保证参与计划的节点不作恶？</h2><p>交易过程中，除了交易双方和两位中介外，还引入了验证委员会。验证委员会成员是通过选举产生的，并且假设恶意节点的哈希值总和应该小于任何时候总哈希值的1&#x2F;4。（与比特币类似，解决不了50%以上的算力攻击）</p>
<h2 id="为什么在验证委员会中要加入押金这一奖惩机制？"><a href="#为什么在验证委员会中要加入押金这一奖惩机制？" class="headerlink" title="为什么在验证委员会中要加入押金这一奖惩机制？"></a>为什么在验证委员会中要加入押金这一奖惩机制？</h2><p>如果我们在这里只用工作证明来做判断，那么就没有动力让普通用户加入验证委员会并正确报告验证结果。<br>验证委员会中的每个用户都需要提供 押金，作为对报告正确验证结果的诚实用户的激励和对报 告错误验证结果的恶意用户的惩罚。</p>
<h1 id="启发"><a href="#启发" class="headerlink" title="启发"></a>启发</h1><ol>
<li>相关工作中有前人所作的 其他旨在解决集中式交易所单点故障问题 的解决方案，可供后续阅读与学习。</li>
<li>本人对于一些有关以太坊知识的欠缺，多篇论文中对于性能分析的部分，都提到了gas的概念。</li>
<li>本文巧妙结合了智能合约——哈希时间锁等概念，与借用类似于比特币的PoW，和其他区块链所用的PoS的交易委员会，提出并实现一种中转加密货币的方案。（巧用前人经验）</li>
</ol>
<h1 id="文章中有待改进的地方"><a href="#文章中有待改进的地方" class="headerlink" title="文章中有待改进的地方"></a>文章中有待改进的地方</h1><ol>
<li>没有详细的智能合约相关的代码提供，带来了代码复现困难。本文中作者说明代码是跑在以太坊测试网络上的，并且对代码gas的消耗进行了一定的测试。</li>
<li>基于的是公有链——以太坊，而非联盟链——fabric,BCOS。与我们所研究的联盟链有一定的出入，公有链对用户的信任和协作提出了更高的要求，往往要比联盟链要求更高。</li>
<li>对于收款人B而言，有可能最终拿不到他想要的货币。需要再次进行货币转换。</li>
<li>文章中多次用到的押金，有没有办法能够避免呢？</li>
</ol>
]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>论文</tag>
      </tags>
  </entry>
  <entry>
    <title>各种各样的镜像加速</title>
    <url>/2020/%E5%90%84%E7%A7%8D%E5%90%84%E6%A0%B7%E7%9A%84%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
      <categories>
        <category>互联网</category>
        <category>转载</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>link</tag>
      </tags>
  </entry>
  <entry>
    <title>图形变换(transform)</title>
    <url>/2015/%E5%9B%BE%E5%BD%A2%E5%8F%98%E6%8D%A2-transform/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>对一个由n个点组成的图形连续作平移、缩放、旋转变换。相关操作定义如下：</p>
<p>Trans(dx,dy) 表示平移图形，即把图形上所有的点的横纵坐标分别加上dx和dy；</p>
<p>Scale(sx,sy) 表示缩放图形，即把图形上所有点的横纵坐标分别乘以sx和sy；</p>
<p>Rotate(θ,x0,y0) 表示旋转图形，即把图形上所有点的坐标绕(x0,y0)顺时针旋转θ角度</p>
<p>由于某些操作会重复运行多次，还定义了循环指令：</p>
<p>Loop(m)</p>
<p>… </p>
<p>End </p>
<p>表示把Loop和对应End之间的操作循环执行m次，循环可以嵌套。</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>第一行一个整数n(n&lt;&#x3D;100)表示图形由n个点组成；</p>
<p>接下来n行，每行空格隔开两个实数xi，yi表示点的坐标；</p>
<h2 id="接下来一直到文件结束，每行一条操作指令。保证指令格式合法，无多余空格。Output"><a href="#接下来一直到文件结束，每行一条操作指令。保证指令格式合法，无多余空格。Output" class="headerlink" title="接下来一直到文件结束，每行一条操作指令。保证指令格式合法，无多余空格。Output"></a>接下来一直到文件结束，每行一条操作指令。保证指令格式合法，无多余空格。<br>Output</h2><p>输出有n行，每行两个空格隔开实数xi，yi表示对应输入的点变换后的坐标。</p>
<p>本题采用Special Judge判断，只要你输出的数值与标准答案误差不能超过1即可。</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">0.5 0</span><br><span class="line">2.5 2</span><br><span class="line">-4.5 1</span><br><span class="line">Trans(1.5,-1)</span><br><span class="line">Loop(2)</span><br><span class="line">Trans(1,1)</span><br><span class="line">Loop(2)</span><br><span class="line">Rotate(90,0,0)</span><br><span class="line">End</span><br><span class="line">Scale(2,3)</span><br><span class="line">End</span><br></pre></td></tr></table></figure>

<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10.0000 -3.0000</span><br><span class="line">18.0000 15.0000</span><br><span class="line">-10.0000 6.0000</span><br></pre></td></tr></table></figure>

<h2 id="Data-Constraint"><a href="#Data-Constraint" class="headerlink" title="Data Constraint"></a>Data Constraint</h2><p>保证操作中坐标值不会超过double范围，输出不会超过int范围；</p>
<p>指令总共不超过1000行；</p>
<p>对于所有的数据,所有循环指令中m&lt;&#x3D;1000000；</p>
<p>对于60%的数据,所有循环指令中m&lt;&#x3D;1000；</p>
<h2 id="对于30-的数据不含嵌套循环。Analysis"><a href="#对于30-的数据不含嵌套循环。Analysis" class="headerlink" title="对于30%的数据不含嵌套循环。Analysis"></a>对于30%的数据不含嵌套循环。<br>Analysis</h2><p>看到这道题，首先想到的肯定是模拟。平移和缩放都是很简单的操作，比较麻烦的是旋转操作。据说有一个公式可以求任意点绕着原点逆时针旋转θrad的公式。<br><img data-src="/images/%E5%9B%BE%E5%BD%A2%E5%8F%98%E6%8D%A2/0.jpg" alt="绕原点旋转公式"><br>因为题目要求的是顺时针我们将角度取反再加上2πrad就好了。对于绕着任一点旋转，我们可以平移所有的点，使得给定的点与原点重合，套用公式计算，再把所有的平移回去。这样就可以通过暴力模拟拿到30%的分了。</p>
<p>因为循环的次数非常大，而给出的指令又比较少，所以我们应该想办法将循环之间的状态保存下来然后快速的做n次。因为我们注意到题目中的变换是对于两个变量的线性递推，所以可以用矩阵来实现。而每做一次相当于矩阵自乘一次。因为矩阵具有结合律，所以自乘的操作通过快速幂来实现就好了。</p>
<p>我们可以将每一种操作用矩阵表示出来，O(M)的扫一遍整个指令后将每个矩阵相乘，即可得到做完所有操作后的最终矩阵。然后，我们O(N)的将每一个点都与这个矩阵相乘就能得到这个点经过M次操作后的最终结果了。</p>
<p>接下来就是如何构造矩阵的问题了。平移，缩放的矩阵构造相对简单。基本上是通过系数于变量相乘和相加而得，具体可看程序实现。(可以自己手动模拟模拟矩阵乘法的工作过程)<br>比较难得就是旋转的矩阵构造。<br>我们不需要将一个旋转命令拆成几个命令，这样子太麻烦。可以一步构造矩阵实现平移与绕远点旋转。<br>我们假设图形中的一个点为(x,y)，绕(x0,y0)这个点顺时针旋转θrad(可以通过取反再加上一圈转换)，那么举例说明x’是如何得到的。<br>x’ &#x3D; (x-x0)cosθ-(y-y0)sinθ+x0&#x3D;cosθx-sinθy+sinθy0-cosθx0+x0<br>y’ &#x3D; 同理可得<br>最后的矩阵就是这样的：<br>| –|1 | 2 | 3 |<br>| –|:-:| :|<br>| 1 | cosθ | sinθ | 0<br>| 2 | -sinθ | cosθ |0<br>| 3 | sinθ<em>y0-cosθ</em>x0+x0 | cosθ<em>y0-sin</em>x0+y0 |1<br>对于每一个点构造矩阵：<br>| –|1 | 2 | 3 |<br>| –|:-:| :|<br>| 1 | x | y | 0<br>| 2 | 0 | 0 |0<br>| 3 | 0 | 0 |0<br>最后就可以在O(M)的时间过啦~~~</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pi M_PI</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rad(x) x*pi/180</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">105</span> , M = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> matrix[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">double</span> x,y,angle;</span><br><span class="line">	<span class="type">int</span> type,time;</span><br><span class="line">&#125; a[M];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">double</span> x,y;</span><br><span class="line">&#125; p[N];</span><br><span class="line"><span class="type">int</span> n,m,top,stack[M],end[M];</span><br><span class="line">matrix H;</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mul</span><span class="params">(matrix &amp;a,matrix b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	matrix c;</span><br><span class="line">	<span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span> c);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">3</span>;k++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;j++)</span><br><span class="line">				c[i][j] += a[i][k]*b[k][j];</span><br><span class="line">	<span class="built_in">memcpy</span>(a,c,<span class="keyword">sizeof</span> c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pow</span><span class="params">(matrix &amp;a,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	matrix c;</span><br><span class="line">	<span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span> c);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i ++) c[i][i]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (y&gt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (y &amp; <span class="number">1</span> == <span class="number">1</span>) <span class="built_in">mul</span>(c,a);</span><br><span class="line">		<span class="built_in">mul</span>(a,a);</span><br><span class="line">		y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memcpy</span>(a,c,<span class="keyword">sizeof</span> c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">(<span class="type">int</span> st,<span class="type">int</span> en)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (st&gt;en) <span class="keyword">return</span>;</span><br><span class="line">	matrix F,G;</span><br><span class="line">	<span class="built_in">memset</span>(F,<span class="number">0</span>,<span class="keyword">sizeof</span> F);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++) F[i][i] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=st;i&lt;=en;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">memset</span>(G,<span class="number">0</span>,<span class="keyword">sizeof</span> G);</span><br><span class="line">		<span class="keyword">if</span> (a[i].type==<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			G[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">			G[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">			G[<span class="number">3</span>][<span class="number">1</span>] = a[i].x;</span><br><span class="line">			G[<span class="number">3</span>][<span class="number">2</span>] = a[i].y;</span><br><span class="line">			G[<span class="number">3</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">			<span class="built_in">mul</span>(F,G);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (a[i].type==<span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			G[<span class="number">1</span>][<span class="number">1</span>] = a[i].x;</span><br><span class="line">			G[<span class="number">2</span>][<span class="number">2</span>] = a[i].y;</span><br><span class="line">			G[<span class="number">3</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">			<span class="built_in">mul</span>(F,G);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (a[i].type==<span class="number">3</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			a[i].angle = <span class="number">360</span> - a[i].angle;</span><br><span class="line">			<span class="type">double</span> co=<span class="built_in">cos</span>(<span class="built_in">rad</span>(a[i].angle)),si=<span class="built_in">sin</span>(<span class="built_in">rad</span>(a[i].angle));</span><br><span class="line">			G[<span class="number">1</span>][<span class="number">1</span>] = co;</span><br><span class="line">			G[<span class="number">1</span>][<span class="number">2</span>] = si;</span><br><span class="line">			G[<span class="number">2</span>][<span class="number">1</span>] = -si;</span><br><span class="line">			G[<span class="number">2</span>][<span class="number">2</span>] = co;</span><br><span class="line">			G[<span class="number">3</span>][<span class="number">1</span>] = si*a[i].y-co*a[i].x+a[i].x;</span><br><span class="line">			G[<span class="number">3</span>][<span class="number">2</span>] = -co*a[i].y-si*a[i].x+a[i].y;</span><br><span class="line">			G[<span class="number">3</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">			<span class="built_in">mul</span>(F,G);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (a[i].type==<span class="number">4</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">work</span>(i<span class="number">+1</span>,end[i]<span class="number">-1</span>);</span><br><span class="line">			<span class="built_in">pow</span>(H,a[i].time);</span><br><span class="line">			<span class="built_in">mul</span>(F,H);</span><br><span class="line">			i = end[i];</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memcpy</span>(H,F,<span class="keyword">sizeof</span> F);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;transform.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;transform.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d\n&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf\n&quot;</span>,&amp;p[i].x,&amp;p[i].y);</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch) != EOF)</span><br><span class="line">	&#123;</span><br><span class="line">		m ++;</span><br><span class="line">		<span class="keyword">if</span> (ch==<span class="string">&#x27;T&#x27;</span>) a[m].type = <span class="number">1</span>,<span class="built_in">scanf</span>(<span class="string">&quot;rans(%lf,%lf)\n&quot;</span>,&amp;a[m].x,&amp;a[m].y);</span><br><span class="line">		<span class="keyword">if</span> (ch==<span class="string">&#x27;S&#x27;</span>) a[m].type = <span class="number">2</span>,<span class="built_in">scanf</span>(<span class="string">&quot;cale(%lf,%lf)\n&quot;</span>,&amp;a[m].x,&amp;a[m].y);</span><br><span class="line">		<span class="keyword">if</span> (ch==<span class="string">&#x27;R&#x27;</span>) a[m].type = <span class="number">3</span>,<span class="built_in">scanf</span>(<span class="string">&quot;otate(%lf,%lf,%lf)\n&quot;</span>,&amp;a[m].angle,&amp;a[m].x,&amp;a[m].y);</span><br><span class="line">		<span class="keyword">if</span> (ch==<span class="string">&#x27;L&#x27;</span>) a[m].type = <span class="number">4</span>,<span class="built_in">scanf</span>(<span class="string">&quot;oop(%d)\n&quot;</span>,&amp;a[m].time);</span><br><span class="line">		<span class="keyword">if</span> (ch==<span class="string">&#x27;E&#x27;</span>) a[m].type = <span class="number">5</span>,<span class="built_in">scanf</span>(<span class="string">&quot;nd\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> top = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (a[i].type == <span class="number">4</span>) stack[++ top] = i;</span><br><span class="line">		<span class="keyword">if</span> (a[i].type == <span class="number">5</span>) end[stack[top --]] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">work</span>(<span class="number">1</span>,m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		matrix F;</span><br><span class="line">		<span class="built_in">memset</span>(F,<span class="number">0</span>,<span class="keyword">sizeof</span> F);</span><br><span class="line">		F[<span class="number">1</span>][<span class="number">1</span>] = p[i].x , F[<span class="number">1</span>][<span class="number">2</span>] = p[i].y , F[<span class="number">1</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">mul</span>(F,H);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%.4lf %.4lf\n&quot;</span>,F[<span class="number">1</span>][<span class="number">1</span>],F[<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>信息学</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>矩阵乘法</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Clash透明代理的实现</title>
    <url>/2020/%E5%9F%BA%E4%BA%8EClash%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="研究原因"><a href="#研究原因" class="headerlink" title="研究原因"></a>研究原因</h1><p>为了使之前写的WireGuard大内网融合方案，能更进一步完成科学上网。而不需要在多个VPN频繁切换。<br>实现一次接入，打通内网外网，实现真正意义上的异地组网融合。</p>
<h1 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h1><h2 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h2><p>Docker部署还是很香的，所以我这里使用的是Docker部署，使用官方的Docker镜像，写好一份<code>docker-compose.yml</code>配置文件,一键部署。<br>因为Docker网络这块不太了解，并且要在宿主机上配置iptables防火墙与路由，所以直接使用宿主机网络。就不需要做端口映射了。</p>
<figure class="highlight yml"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.4&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">clash:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">dreamacro/clash-premium:2021.07.03</span></span><br><span class="line">    <span class="attr">cap_add:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NET_ADMIN</span></span><br><span class="line">    <span class="attr">devices:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/dev/net/tun</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config.yaml:/root/.config/clash/config.yaml:ro</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="comment"># When your system is Linux, you can use `network_mode: &quot;host&quot;` directly.</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">clash</span></span><br></pre></td></tr></table></figure>
<p>在<code>./clash</code>目录中需要准备三份文件<code>config.yaml``ui</code><br>其中只有<code>config.yaml</code>是必须要自己编写放好。<br><code>ui</code>目录用于WEB端控制的前端代码。可以选择<code>yacd</code>直接下载静态网页就好<br>因为要实现透明代理，按照官方文档必须启用DNS，这里有一份<code>config.yaml</code>示例<br>关于DNS后面会写一篇关于DNS的博文来详细讲述。<br>这里面nameserver就填国内的DNS，fallback就填国内直连能获取到的国外DNS。<br>由于现在多数的Public DNS都已经支持EDNS，所以解析结果会更加精准。<br>理论上选择一个国外DNS就够了，但为了更快的速度，国内解析结果用国内DNS更快。<br>由于现在境内对境外DNS的干扰严重，DoT，DoH都已经是重点关照对象。虽然没有直接封禁Public DNS的IP地址，但是其他相关的检测技术都用上了。目前还能无污染的拿到IP地址的方式也就只有使用非常规端口了。<br>然而Clash并不依赖于准确的IP地址解析，即使是污染的地址，Clash也会重构发往代理的数据包，将IP地址反向解析为域名，并让远端代理服务器去解析真正的IP，所以在本地只起到一种域名与IP的映射功能。</p>
<figure class="highlight yml"><figcaption><span>config.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">port:</span> <span class="number">7890</span></span><br><span class="line"><span class="attr">socks-port:</span> <span class="number">7891</span></span><br><span class="line"><span class="attr">redir-port:</span> <span class="number">7892</span></span><br><span class="line"><span class="attr">allow-lan:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">Rule</span></span><br><span class="line"><span class="attr">log-level:</span> <span class="string">warning</span></span><br><span class="line"><span class="attr">external-controller:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:9090</span></span><br><span class="line"><span class="attr">secret:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">external-ui:</span> <span class="string">ui</span></span><br><span class="line"><span class="comment">#此处内容请安装一个gui版本的clash然后在里面配置好代理然后抄过来</span></span><br><span class="line"><span class="attr">dns:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">listen:</span> <span class="string">:1053</span></span><br><span class="line">  <span class="attr">enhanced-mode:</span> <span class="string">redir-host</span></span><br><span class="line">  <span class="attr">nameserver:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;114.114.114.114&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;223.5.5.5&#x27;</span></span><br><span class="line">  <span class="attr">fallback:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">208.67</span><span class="number">.220</span><span class="number">.220</span><span class="string">:5353</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">208.67</span><span class="number">.222</span><span class="number">.222</span><span class="string">:5353</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">101.6</span><span class="number">.6</span><span class="number">.6</span><span class="string">:5353</span></span><br><span class="line"><span class="attr">proxies:</span></span><br><span class="line"><span class="attr">proxy-groups:</span></span><br><span class="line"><span class="attr">rules:</span></span><br></pre></td></tr></table></figure>
<p>成功启动后接下来就是编写最为关键的<code>iptables</code>规则<br>为了规避流量成环问题，规则中没有对设备进行透明代理的相关代码。只有经过此电脑中转的数据包才会进行透明代理。<br>在此之前需要开启当前linux系统的路由功能。<br>临时生效：<br><code>echo &quot;1&quot; &gt; /proc/sys/net/ipv4/ip_forward</code><br>永久生效的话，需要修改<code>sysctl.conf</code>：<br><code>net.ipv4.ip_forward = 1</code><br>执行<code>sysctl -p</code>马上生效<br>下面是参考底部<a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3">参考文档</a>中的TPROXY方式改写的iptables规则，能够将TCP与UDP的流量准确筛选后送给clash<br>可以看到规则中有对所有53端口的UDP数据包的重定向，重定向的端口得是clash的DNS端口。</p>
<figure class="highlight bash"><figcaption><span>postup.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#Clash(Tproxy TCP+UDP)</span></span><br><span class="line"><span class="comment"># ROUTE RULES</span></span><br><span class="line">ip rule add fwmark 1 table 100</span><br><span class="line">ip route add <span class="built_in">local</span> 0.0.0.0/0 dev lo table 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># CREATE TABLE</span></span><br><span class="line">iptables -t mangle -N clash</span><br><span class="line"></span><br><span class="line"><span class="comment"># RETURN LOCAL AND LANS</span></span><br><span class="line">iptables -t mangle -A clash -d 0.0.0.0/8 -j RETURN</span><br><span class="line">iptables -t mangle -A clash -d 10.0.0.0/8 -j RETURN</span><br><span class="line">iptables -t mangle -A clash -d 100.64.0.0/10 -j RETURN</span><br><span class="line">iptables -t mangle -A clash -d 127.0.0.0/8 -j RETURN</span><br><span class="line">iptables -t mangle -A clash -d 169.254.0.0/16 -j RETURN</span><br><span class="line">iptables -t mangle -A clash -d 172.16.0.0/12 -j RETURN</span><br><span class="line">iptables -t mangle -A clash -d 192.168.0.0/16 -j RETURN</span><br><span class="line">iptables -t mangle -A clash -d 224.0.0.0/4 -j RETURN</span><br><span class="line">iptables -t mangle -A clash -d 240.0.0.0/4 -j RETURN</span><br><span class="line"></span><br><span class="line"><span class="comment"># whitelist China ip.</span></span><br><span class="line">iptables -t mangle -A clash -m <span class="built_in">set</span> --match-set china dst -j RETURN</span><br><span class="line"></span><br><span class="line"><span class="comment"># FORWARD ALL</span></span><br><span class="line">iptables -t mangle -A clash -p udp -j TPROXY --on-port 7893 --tproxy-mark 1</span><br><span class="line">iptables -t mangle -A clash -p tcp -j TPROXY --on-port 7893 --tproxy-mark 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># REDIRECT</span></span><br><span class="line">iptables -t mangle -A PREROUTING -j clash</span><br><span class="line"></span><br><span class="line"><span class="comment"># hijack DNS to Clash</span></span><br><span class="line">iptables -t nat -N CLASH_DNS</span><br><span class="line">iptables -t nat -F CLASH_DNS </span><br><span class="line">iptables -t nat -A CLASH_DNS -p udp -j REDIRECT --to-port 1053</span><br><span class="line">iptables -t nat -I PREROUTING -p udp --dport 53 -j CLASH_DNS</span><br></pre></td></tr></table></figure>
<p>配置好后可以观察能否进行透明代理。<br>通过在本机访问<a href="http://localhost:9090/ui/">http://localhost:9090/ui/</a><br>可以使用WEB管理Clash<br>通过使用<code>docker-compose logs</code>可查看Clash运行日志<br>测试没问题后，需要将iptables规则保存，在下次自启动时，能自动生效。<br><a href="https://magiclen.org/ubuntu-server-iptables-save-permanently/">Ubuntu Server 如何永久儲存iptables的設定？</a><br>如果不想永久储存iptables规则，可以在执行clash前先执行上面的<code>postup.sh</code>结束clash后在执行下面的<code>postdown.sh</code>恢复原有网络</p>
<figure class="highlight bash"><figcaption><span>postdown.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#Clash(Tproxy TCP+UDP)</span></span><br><span class="line">ip rule del fwmark 1 table 100</span><br><span class="line">ip route del <span class="built_in">local</span> default dev lo table 100</span><br><span class="line"><span class="comment"># 对局域网其他设备进行透明代理</span></span><br><span class="line">iptables -t mangle -D PREROUTING -j clash</span><br><span class="line">iptables -t mangle -F clash</span><br><span class="line">iptables -t mangle -X clash</span><br><span class="line"><span class="comment"># hijack DNS to Clash</span></span><br><span class="line">iptables -t nat -D PREROUTING -p udp --dport 53 -j CLASH_DNS</span><br><span class="line">iptables -t nat -F CLASH_DNS</span><br><span class="line">iptables -t nat -X CLASH_DNS</span><br></pre></td></tr></table></figure>
<h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2><p>在一个局域网环境下(二层网络中),手动配置静态地址，将设备的网关与DNS均指向上述部署了Clash的linux机子中即可使用。<br>如果写了重定向DNS的iptables规则，则可以不下发DNS，使用默认的DNS，只要保证网关是运行Clash的透明网关且DNS数据包经过这个透明网关即可。<br>除此之外还可以通过DHCP来下发代理网关和DNS，也可以通过DHCP来指定设备下发，其余设备走默认网关&#x2F;DNS。<br><code>DHCP Options 6 DNS</code><br><code>DHCP Options 3 Gateway</code><br>只需先绑定mac地址，给绑定的mac地址下发不同的DHCP Options即可。<br>除此之外，DHCP还可以下发PAC地址，客户端自动配置代理。目前测试Windows，IOS均可使用，Android，Linux不太行。<br><code>DHCP Options 252 PAC</code><br>Windows IOS均需要启用代理自动获取</p>
<h1 id="与WireGuard联动"><a href="#与WireGuard联动" class="headerlink" title="与WireGuard联动"></a>与WireGuard联动</h1><p>在相同的机子部署WireGuard，并设置这台电脑为出口网关，其余设备只要接入WireGuard，就既能访问WireGuard设备中的内网资源，又能完成科学上网。<br>对端的wireguard设备将数据包往这个透明网关路由，也能获得科学上网能力。这样就不局限于在同一局域网（二层网络）的条件限制。</p>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://lancellc.gitbook.io/clash/">Clash Document</a></p>
<!-- 重传文件，以应对阿里云OSS封禁 -->]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>基于阿里云OSS搭建hexo博客</title>
    <url>/2019/%E5%9F%BA%E4%BA%8E%E9%98%BF%E9%87%8C%E4%BA%91OSS%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
      <categories>
        <category>互联网</category>
        <category>转载</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>link</tag>
      </tags>
  </entry>
  <entry>
    <title>基于阿里云函数实现UptimeRobot微信提醒</title>
    <url>/2020/%E5%9F%BA%E4%BA%8E%E9%98%BF%E9%87%8C%E4%BA%91%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0UptimeRobot%E5%BE%AE%E4%BF%A1%E6%8F%90%E9%86%92/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote>
<p>注意：因server酱升级为Turbo版，该文章已过时。<br>但提供的接口已升级为Turbo版，依旧可用。</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Uptime Robot可以非常方便的实现对网站上线率的监控，免费拥有每5分钟检测一次，最多50个网站的接入功能。<br>其中的题型功能支持很多海外IM工具，但并没有微信。<br>要实现微信提醒可以配合Uptime Robot的WebHook功能，通过使用ServerChan往微信发送消息。<br>ServerChan能提供每天500次推送请求。ServerChan同样拥有一个URL，对其发送Http请求就能推送消息了。<br>但是Http的请求参数与UptimeRobot中WebHook的请求参数不一样，所以我们需要一个转换器，将从UptimeRobot的WebHook请求转换为ServerChan的请求。而使用阿里云函数是最方便部署这样的小功能，无服务器架构，稳定可靠又免费。</p>
<p>在此之前通过搜索得知此博文<a href="https://blog.chrxw.com/archives/2019/12/02/794.html">Uptime Robot接入微信提醒</a><br>此博文使用的方式是PHP，但是要在服务器上部署PHP环境实在太麻烦了，而且还要出一个服务器的钱，也很难保证稳定性。</p>
<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>此次使用的方式是阿里云函数的Http触发器，可以先参考一下我的另一篇博文<a href="/2020/%E5%9F%BA%E4%BA%8E%E9%98%BF%E9%87%8C%E4%BA%91%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0%E5%BC%B9%E5%B9%95%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%8E%A5%E5%8F%A3/">基于阿里云函数实现弹幕文件解析接口</a>了解一下如何快速的搭建一个Python环境的Http触发器。<br>然后在index.py中粘贴上我下方的代码：</p>
<figure class="highlight python"><figcaption><span>index.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> unquote,quote,parse_qs</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">params = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># To enable the initializer feature (https://help.aliyun.com/document_detail/158208.html)</span></span><br><span class="line"><span class="comment"># please implement the initializer function as below：</span></span><br><span class="line"><span class="comment"># def initializer(context):</span></span><br><span class="line"><span class="comment">#    logger = logging.getLogger()  </span></span><br><span class="line"><span class="comment">#    logger.info(&#x27;initializing&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_response</span>(<span class="params">url,text,desp</span>):</span><br><span class="line">    payload = &#123;<span class="string">&#x27;text&#x27;</span>: text, <span class="string">&#x27;desp&#x27;</span>: desp&#125;</span><br><span class="line">    response = requests.post(url,params=payload)</span><br><span class="line">    response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> response.text</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">paramsget</span>(<span class="params">key</span>):</span><br><span class="line">    <span class="keyword">return</span> params.get(key,[<span class="string">&quot;&quot;</span>])[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timeformat</span>(<span class="params">obj</span>):</span><br><span class="line">    timestamp = obj.last_modified</span><br><span class="line">    time = datetime.datetime.fromtimestamp(timestamp, tz)</span><br><span class="line">    <span class="keyword">return</span> time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handler</span>(<span class="params">environ, start_response</span>):</span><br><span class="line">    <span class="keyword">global</span> params</span><br><span class="line">    response_headers = [(<span class="string">&#x27;Content-type&#x27;</span>, <span class="string">&#x27;text/html; charset=utf-8&#x27;</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;QUERY_STRING&#x27;</span> <span class="keyword">in</span> environ:</span><br><span class="line">        query_string = environ[<span class="string">&#x27;QUERY_STRING&#x27;</span>]</span><br><span class="line">        params = parse_qs(query_string)</span><br><span class="line">        SCKEY = paramsget(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">        desp = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        名称: &#123;&#125;</span></span><br><span class="line"><span class="string">        网址: &#123;&#125;</span></span><br><span class="line"><span class="string">        详情: &#123;&#125;</span></span><br><span class="line"><span class="string">        状态: &#123;&#125;</span></span><br><span class="line"><span class="string">        持续: &#123;&#125;</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        desp = desp.<span class="built_in">format</span>(paramsget(<span class="string">&#x27;monitorFriendlyName&#x27;</span>),paramsget(<span class="string">&#x27;monitorURL&#x27;</span>),paramsget(<span class="string">&#x27;alertDetails&#x27;</span>),paramsget(<span class="string">&#x27;alertTypeFriendlyName&#x27;</span>),paramsget(<span class="string">&#x27;alertDuration&#x27;</span>))</span><br><span class="line">        <span class="keyword">if</span> (paramsget(<span class="string">&#x27;alertType&#x27;</span>) == <span class="string">&#x27;1&#x27;</span>):</span><br><span class="line">            text = paramsget(<span class="string">&#x27;monitorFriendlyName&#x27;</span>)+<span class="string">&#x27;服务器下线啦&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> (paramsget(<span class="string">&#x27;alertType&#x27;</span>) == <span class="string">&#x27;2&#x27;</span>):</span><br><span class="line">            text = paramsget(<span class="string">&#x27;monitorFriendlyName&#x27;</span>)+<span class="string">&#x27;服务器上线啦&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            status = <span class="string">&#x27;500&#x27;</span></span><br><span class="line">            start_response(status, response_headers)</span><br><span class="line">            ret = <span class="string">&#x27;传入参数错误&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> [ret.encode(<span class="string">&#x27;utf-8&#x27;</span>)]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        status = <span class="string">&#x27;500&#x27;</span></span><br><span class="line">        start_response(status, response_headers)</span><br><span class="line">        ret = <span class="string">&#x27;传入参数错误&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> [ret.encode(<span class="string">&#x27;utf-8&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ret = get_response(<span class="string">&quot;https://sctapi.ftqq.com/&quot;</span>+SCKEY+<span class="string">&quot;.send&quot;</span>,text,desp)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># do something here</span></span><br><span class="line">    status = <span class="string">&#x27;200&#x27;</span></span><br><span class="line">    start_response(status, response_headers)</span><br><span class="line">    <span class="keyword">return</span> [ret.encode(<span class="string">&#x27;utf-8&#x27;</span>)]</span><br></pre></td></tr></table></figure>
<p>后面可以参考<a href="https://blog.chrxw.com/archives/2019/12/02/794.html">Uptime Robot接入微信提醒</a>，在UptimeRobot添加一个WebHook功能，注意要将查询字符串中的token改成你自己在ServerChan中获取到的SCKEY。</p>
<p>然后就可以了。<br>当然如果你实在是懒得可以，也可以直接调用我用上面代码实现的API:<a href="https://fc.lyz05.cn/webhook?token=xxxx&">https://fc.lyz05.cn/webhook?token=xxxx&amp;</a>,如果不放心后端代码实现，那还是自己部署吧。</p>
]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>基于阿里云函数实现弹幕文件解析接口</title>
    <url>/2020/%E5%9F%BA%E4%BA%8E%E9%98%BF%E9%87%8C%E4%BA%91%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0%E5%BC%B9%E5%B9%95%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一直苦于看非B站视频不能下载弹幕，遂上网搜索下载非B站视频弹幕的方法，后找到一篇博客较为满意。但为了更方便的下载弹幕，而不用本地跑Python代码。萌生了将这份代码做成HTTP触发器的念头，以后只需要使用浏览器，直接调用接口，就可下载弹幕文件。方便多了！如同直接访问<code>comment.bilibili.com</code>，可以查看并下载B站弹幕。<br>此篇文章代码主要参考这篇博客——<a href="https://lxmymjr.github.io/contents/%E4%B8%BB%E6%B5%81%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%E5%BC%B9%E5%B9%95%E4%B8%8B%E8%BD%BD">主流视频网站弹幕下载</a><br>要是不想自己部署，也可以直接用我做好的接口<br>访问<a href="http://fc.lyz05.cn/">http://fc.lyz05.cn</a></p>
<h2 id="2023年6月1日更新（重要）"><a href="#2023年6月1日更新（重要）" class="headerlink" title="2023年6月1日更新（重要）"></a>2023年6月1日更新（重要）</h2><p>下面介绍的部分是最初的版本，现在整个项目已改用node重写了。<br>里面的解析地址很有可能因为官方更换地址而失效。<br>网站部署的是我用Node重写后的版本，代码开源在：<a href="https://github.com/lyz05/danmaku">https://github.com/lyz05/danmaku</a><br>有任何使用上的问题，可以在Github Issue中提出，博客评论区不适合追踪问题。</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>首先，在阿里云函数中创建一个带HTTP触发器的函数。<br>也可以在应用中心——新建应用——Python简单示例应用中创建，这是一个官方自带的Hello World模板。<br>删除原有文件后，在在线编辑页中创建以下两个文件<code>index.html</code> <code>index.py</code><br>如下图：<br><img data-src="/images/%E5%9F%BA%E4%BA%8E%E9%98%BF%E9%87%8C%E4%BA%91%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0%E5%BC%B9%E5%B9%95%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%8E%A5%E5%8F%A3/001.png" alt="在线编辑页面"><br>其中<br><code>index.html</code>用于显示不调用接口时默认的主页面。<br><code>index.py</code>用于从视频源网站上爬取弹幕信息。将爬取结果转换为B站的弹幕XML格式后存入OSS中，并重定向到OSS上去下载。（这样做的目的是为了省流量费，香港阿里云一个月5G以下流量不收钱。自己部署也可以直接返回XML的内容）<br>附代码如下：</p>
<p>代码中的save2oss函数需要自行修改为自己的oss bucket。</p>
<figure class="highlight python"><figcaption><span>index.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> unquote,quote,parse_qs</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"><span class="keyword">import</span> oss2</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36 QIHU 360SE&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_response_iqiyi</span>(<span class="params">url</span>):</span><br><span class="line">    req = urllib.request.Request(url)</span><br><span class="line">    req.add_header(<span class="string">&quot;User-Agent&quot;</span>,</span><br><span class="line">                   <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36&quot;</span>)</span><br><span class="line">    response = urllib.request.urlopen(req).read()</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_response</span>(<span class="params">url</span>):</span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> response.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">judgeIllegalChar</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    illegal = <span class="literal">False</span>  <span class="comment"># 标志是否有非法XML字符</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> [<span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;&amp;&quot;</span>, <span class="string">&quot;\u0000&quot;</span>, <span class="string">&quot;\b&quot;</span>]:</span><br><span class="line">        <span class="keyword">if</span> char <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">            illegal = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> illegal</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_response_head</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;i&gt;\n&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_response_foot</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;/i&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_response_body</span>(<span class="params">timepoint, content, ct=<span class="number">1</span>, size=<span class="number">20</span>, color=<span class="number">16777215</span>,</span></span><br><span class="line"><span class="params">                       unixtime=<span class="built_in">int</span>(<span class="params">t.mktime(<span class="params">datetime.datetime.now(<span class="params"></span>).timetuple(<span class="params"></span>)</span>)</span>), uid=<span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;\t&lt;d p=&quot;&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,0,&#123;&#125;,26732601000067074&quot;&gt;&#123;&#125;&lt;/d&gt;\n&#x27;</span>.<span class="built_in">format</span>(timepoint, ct, size, color, unixtime, uid,</span><br><span class="line">                                                                            content)</span><br><span class="line">    <span class="comment"># 第一个参数是弹幕出现的时间 以秒数为单位。</span></span><br><span class="line">    <span class="comment"># 第二个参数是弹幕的模式1..3 滚动弹幕 4底端弹幕 5顶端弹幕 6.逆向弹幕 7精准定位 8高级弹幕</span></span><br><span class="line">    <span class="comment"># 第三个参数是字号， 12非常小,16特小,18小,25中,36大,45很大,64特别大</span></span><br><span class="line">    <span class="comment"># 第四个参数是字体的颜色 以HTML颜色的十位数为准</span></span><br><span class="line">    <span class="comment"># 第五个参数是Unix格式的时间戳。基准时间为 1970-1-1 08:00:00</span></span><br><span class="line">    <span class="comment"># 第六个参数是弹幕池 0普通池 1字幕池 2特殊池 【目前特殊池为高级弹幕专用】</span></span><br><span class="line">    <span class="comment"># 第七个参数是发送者的ID，用于“屏蔽此弹幕的发送者”功能</span></span><br><span class="line">    <span class="comment"># 第八个参数是弹幕在弹幕数据库中rowID 用于“历史弹幕”功能。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mgtv</span>(<span class="params">url</span>):</span><br><span class="line">    cid = url.split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">4</span>]</span><br><span class="line">    vid = url.split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">5</span>].split(<span class="string">&#x27;?&#x27;</span>)[<span class="number">0</span>].strip(<span class="string">&#x27;.html&#x27;</span>)</span><br><span class="line">    title = re.search(<span class="string">r&#x27;partName:&quot;(.*?)&quot;,&#x27;</span>, get_response(url))</span><br><span class="line">    <span class="keyword">if</span> title <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        title = title.group(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        title = <span class="string">&#x27;Unknow&#x27;</span></span><br><span class="line">    contents = <span class="built_in">set</span>()</span><br><span class="line">    ret = make_response_head()</span><br><span class="line"></span><br><span class="line">    time = <span class="number">0</span></span><br><span class="line">    total = <span class="number">0</span>  <span class="comment"># 弹幕总数</span></span><br><span class="line">    cnt = <span class="number">0</span>  <span class="comment"># 筛选弹幕数</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        result = get_response(<span class="string">&#x27;https://galaxy.bz.mgtv.com/rdbarrage?vid=&#x27;</span> + vid + <span class="string">&#x27;&amp;cid=&#x27;</span> + cid + <span class="string">&#x27;&amp;time=&#x27;</span> + <span class="built_in">str</span>(time))</span><br><span class="line">        danmu = json.loads(result)</span><br><span class="line">        <span class="keyword">if</span> danmu[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;items&#x27;</span>] == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> danmu[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;items&#x27;</span>]:</span><br><span class="line">            total += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> judgeIllegalChar(j[<span class="string">&#x27;content&#x27;</span>]):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            timepoint = j[<span class="string">&#x27;time&#x27;</span>] / <span class="number">1000</span>  <span class="comment"># 弹幕发送时间</span></span><br><span class="line">            uid = j[<span class="string">&#x27;uid&#x27;</span>]  <span class="comment"># 发送者uid</span></span><br><span class="line">            content = j[<span class="string">&#x27;content&#x27;</span>]  <span class="comment"># 弹幕内容</span></span><br><span class="line">            <span class="keyword">if</span> content <span class="keyword">not</span> <span class="keyword">in</span> contents:</span><br><span class="line">                cnt += <span class="number">1</span></span><br><span class="line">                contents.add(content)</span><br><span class="line">                ret += make_response_body(timepoint=timepoint, content=content, uid=uid)</span><br><span class="line">        time = danmu[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;next&#x27;</span>]</span><br><span class="line">    ret += make_response_foot()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Download &#123;&#125; danmakus, Select &#123;&#125; danmakus\nfinish.&quot;</span>.<span class="built_in">format</span>(total, cnt))</span><br><span class="line">    <span class="keyword">return</span> [title, ret]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tencentvideo</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="comment"># url = &#x27;https://v.qq.com/x/cover/a8oeend1e9gfdzs/f0031nbupkq.html&#x27; # 视频的url</span></span><br><span class="line">    video_info = json.loads(</span><br><span class="line">        <span class="built_in">str</span>([s <span class="keyword">for</span> s <span class="keyword">in</span> get_response(url).split(<span class="string">&#x27;\n&#x27;</span>) <span class="keyword">if</span> <span class="string">&#x27;VIDEO_INFO&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>(s)]).strip(<span class="string">&#x27;[\&#x27;var VIDEO_INFO = &#x27;</span>).strip(</span><br><span class="line">            <span class="string">&#x27;\&#x27;]&#x27;</span>))</span><br><span class="line">    duration = video_info[<span class="string">&#x27;duration&#x27;</span>]</span><br><span class="line">    title = video_info[<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line">    vid = video_info[<span class="string">&#x27;vid&#x27;</span>]</span><br><span class="line">    targetid = json.loads(get_response(<span class="string">&#x27;http://bullet.video.qq.com/fcgi-bin/target/regist?otype=json&amp;vid=&#x27;</span> + vid).strip(</span><br><span class="line">        <span class="string">&#x27;QZOutputJson=&#x27;</span>).strip(<span class="string">&#x27;;&#x27;</span>))[<span class="string">&#x27;targetid&#x27;</span>]</span><br><span class="line">    contents = <span class="built_in">set</span>()</span><br><span class="line">    ret = make_response_head()</span><br><span class="line"></span><br><span class="line">    total = <span class="number">0</span>  <span class="comment"># 弹幕总数</span></span><br><span class="line">    cnt = <span class="number">0</span>  <span class="comment"># 筛选弹幕数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(duration) // <span class="number">30</span> + <span class="number">1</span>):</span><br><span class="line">        timestamp = i * <span class="number">30</span></span><br><span class="line">        danmu = json.loads(</span><br><span class="line">            get_response(<span class="string">&#x27;http://mfm.video.qq.com/danmu?timestamp=&#x27;</span> + <span class="built_in">str</span>(timestamp) + <span class="string">&#x27;&amp;target_id=&#x27;</span> + targetid),</span><br><span class="line">            strict=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> danmu[<span class="string">&#x27;comments&#x27;</span>]:</span><br><span class="line">            total += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> judgeIllegalChar(j[<span class="string">&#x27;content&#x27;</span>]):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            timepoint = j[<span class="string">&#x27;timepoint&#x27;</span>]  <span class="comment"># 弹幕发送时间</span></span><br><span class="line">            ct = <span class="number">1</span>  <span class="comment"># 弹幕样式</span></span><br><span class="line">            size = <span class="number">20</span>  <span class="comment"># 字体大小</span></span><br><span class="line">            <span class="comment"># 获取颜色</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;color&quot;</span> <span class="keyword">in</span> j[<span class="string">&quot;content_style&quot;</span>]:</span><br><span class="line">                content_style = json.loads(j[<span class="string">&quot;content_style&quot;</span>])</span><br><span class="line">                color = <span class="built_in">int</span>(content_style[<span class="string">&quot;color&quot;</span>], <span class="number">16</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                color = <span class="number">16777215</span></span><br><span class="line">            unixtime = <span class="built_in">int</span>(t.mktime(datetime.datetime.now().timetuple()))  <span class="comment"># unix时间戳</span></span><br><span class="line">            content = j[<span class="string">&#x27;content&#x27;</span>]  <span class="comment"># 弹幕内容</span></span><br><span class="line">            <span class="keyword">if</span> content <span class="keyword">not</span> <span class="keyword">in</span> contents:</span><br><span class="line">                cnt += <span class="number">1</span></span><br><span class="line">                contents.add(content)</span><br><span class="line">                ret += <span class="string">&#x27;\t&lt;d p=&quot;&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,0,0,26732601000067074&quot;&gt;&#123;&#125;&lt;/d&gt;\n&#x27;</span>.<span class="built_in">format</span>(timepoint, ct, size, color,</span><br><span class="line">                                                                                       unixtime, content)</span><br><span class="line">    ret += make_response_foot()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Download &#123;&#125; danmakus, Select &#123;&#125; danmakus\nfinish.&quot;</span>.<span class="built_in">format</span>(total, cnt))</span><br><span class="line">    <span class="keyword">return</span> [title, ret]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">youku</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="comment"># url = &#x27;https://v.youku.com/v_show/(%id%).html&#x27;  # 视频的url&#x27;</span></span><br><span class="line">    res = get_response(url)</span><br><span class="line">    title = re.search(<span class="string">r&#x27;&lt;title&gt;(.*)&lt;/title&gt;&#x27;</span>, res).group(<span class="number">1</span>).split(<span class="string">&#x27;—&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    iid = re.search(<span class="string">r&#x27;videoId: \&#x27;(\d*)\&#x27;&#x27;</span>, res).group(<span class="number">1</span>)</span><br><span class="line">    duration = <span class="built_in">float</span>(re.search(<span class="string">r&#x27;seconds: \&#x27;(.*)\&#x27;,&#x27;</span>, res).group(<span class="number">1</span>))</span><br><span class="line">    contents = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">    total = <span class="number">0</span>  <span class="comment"># 弹幕总数</span></span><br><span class="line">    cnt = <span class="number">0</span>  <span class="comment"># 筛选弹幕数</span></span><br><span class="line">    ret = make_response_head()</span><br><span class="line">    <span class="keyword">for</span> mat <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(duration) // <span class="number">60</span> + <span class="number">1</span>):</span><br><span class="line">        <span class="comment"># req = urllib.request.Request(&#x27;https://service.danmu.youku.com/list?mat=&#x27; + str(mat) + &#x27;&amp;ct=1001&amp;iid=&#x27; + iid)</span></span><br><span class="line">        <span class="comment"># req.add_header(&quot;User-Agent&quot;,</span></span><br><span class="line">        <span class="comment">#                &quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36&quot;)</span></span><br><span class="line">        <span class="comment"># response = urllib.request.urlopen(req)</span></span><br><span class="line">        response = get_response(<span class="string">&#x27;https://service.danmu.youku.com/list?mat=&#x27;</span> + <span class="built_in">str</span>(mat) + <span class="string">&#x27;&amp;ct=1001&amp;iid=&#x27;</span> + iid)</span><br><span class="line">        danmu = json.loads(response)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(danmu[<span class="string">&quot;result&quot;</span>])):</span><br><span class="line">            total += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> judgeIllegalChar(danmu[<span class="string">&quot;result&quot;</span>][i][<span class="string">&quot;content&quot;</span>]):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            playat = danmu[<span class="string">&quot;result&quot;</span>][i][<span class="string">&quot;playat&quot;</span>] / <span class="number">1000</span>  <span class="comment"># 弹幕发送时间</span></span><br><span class="line">            <span class="comment"># 获取颜色</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;color&quot;</span> <span class="keyword">in</span> danmu[<span class="string">&quot;result&quot;</span>][i][<span class="string">&quot;propertis&quot;</span>]:</span><br><span class="line">                propertis = json.loads(danmu[<span class="string">&quot;result&quot;</span>][i][<span class="string">&quot;propertis&quot;</span>])</span><br><span class="line">                color = propertis[<span class="string">&quot;color&quot;</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                color = <span class="number">16777215</span></span><br><span class="line">            content = danmu[<span class="string">&quot;result&quot;</span>][i][<span class="string">&quot;content&quot;</span>]  <span class="comment"># 弹幕内容</span></span><br><span class="line">            <span class="keyword">if</span> content <span class="keyword">not</span> <span class="keyword">in</span> contents:</span><br><span class="line">                contents.add(content)</span><br><span class="line">                cnt += <span class="number">1</span></span><br><span class="line">                ret += make_response_body(timepoint=playat, color=color, content=content)</span><br><span class="line">    ret += make_response_foot()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Download &#123;&#125; danmakus, Select &#123;&#125; danmakus\nfinish.&quot;</span>.<span class="built_in">format</span>(total, cnt))</span><br><span class="line">    <span class="keyword">return</span> [title, ret]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">iqiyi</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="comment"># url = &#x27;https://www.iqiyi.com/(%id%).html&#x27;  # 视频的url&#x27;</span></span><br><span class="line">    ret = get_response(url)</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;iqiyi&#x27;</span>,ret]</span><br><span class="line">    page_info = json.loads(re.search(<span class="string">r&quot;page-info=&#x27;(.*)&#x27;  :video-info=&quot;</span>, get_response(url)).group(<span class="number">1</span>))</span><br><span class="line">    duration_str = page_info[<span class="string">&#x27;duration&#x27;</span>].split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    duration = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(duration_str) - <span class="number">1</span>):</span><br><span class="line">        duration = (duration + <span class="built_in">int</span>(duration_str[i])) * <span class="number">60</span></span><br><span class="line">    duration = duration + <span class="built_in">int</span>(duration_str[-<span class="number">1</span>])</span><br><span class="line">    title = page_info[<span class="string">&#x27;tvName&#x27;</span>]</span><br><span class="line">    albumid = page_info[<span class="string">&#x27;albumId&#x27;</span>]</span><br><span class="line">    tvid = page_info[<span class="string">&#x27;tvId&#x27;</span>]</span><br><span class="line">    categoryid = page_info[<span class="string">&#x27;cid&#x27;</span>]</span><br><span class="line">    page = duration // (<span class="number">60</span> * <span class="number">5</span>) + <span class="number">1</span></span><br><span class="line">    contents = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">    total = <span class="number">0</span>  <span class="comment"># 弹幕总数</span></span><br><span class="line">    cnt = <span class="number">0</span>  <span class="comment"># 筛选弹幕数</span></span><br><span class="line">    ret = make_response_head()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(duration // (<span class="number">60</span> * <span class="number">5</span>) + <span class="number">1</span>):</span><br><span class="line">        dec = zlib.decompressobj(<span class="number">32</span> + zlib.MAX_WBITS)</span><br><span class="line">        b = dec.decompress(get_response_iqiyi(</span><br><span class="line">            <span class="string">&#x27;http://cmts.iqiyi.com/bullet/&#x27;</span> + <span class="built_in">str</span>(tvid)[-<span class="number">4</span>:-<span class="number">2</span>] + <span class="string">&#x27;/&#x27;</span> + <span class="built_in">str</span>(tvid)[-<span class="number">2</span>:] + <span class="string">&#x27;/&#x27;</span> + <span class="built_in">str</span>(tvid) + <span class="string">&#x27;_300_&#x27;</span> + <span class="built_in">str</span>(</span><br><span class="line">                i + <span class="number">1</span>) + <span class="string">&#x27;.z?rn=0.&#x27;</span> + <span class="string">&#x27;&#x27;</span>.join([<span class="string">&quot;%s&quot;</span> % randint(<span class="number">0</span>, <span class="number">9</span>) <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,</span><br><span class="line">                                                                                     <span class="number">16</span>)]) + <span class="string">&#x27;&amp;business=danmu&amp;is_iqiyi=true&amp;is_video_page=true&amp;tvid=&#x27;</span> + <span class="built_in">str</span>(</span><br><span class="line">                tvid) + <span class="string">&#x27;&amp;albumid=&#x27;</span> + <span class="built_in">str</span>(albumid) + <span class="string">&#x27;&amp;categoryid=&#x27;</span> + <span class="built_in">str</span>(categoryid) + <span class="string">&#x27;&amp;qypid=01010021010000000000&#x27;</span>))</span><br><span class="line">        root = ET.fromstring(b.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">        <span class="keyword">for</span> bulletInfo <span class="keyword">in</span> root.<span class="built_in">iter</span>(<span class="string">&#x27;bulletInfo&#x27;</span>):</span><br><span class="line">            total += <span class="number">1</span></span><br><span class="line">            timepoint = bulletInfo[<span class="number">3</span>].text  <span class="comment"># 弹幕发送时间</span></span><br><span class="line">            color = <span class="built_in">int</span>(bulletInfo[<span class="number">5</span>].text, <span class="number">16</span>)  <span class="comment"># 颜色</span></span><br><span class="line">            content = bulletInfo[<span class="number">1</span>].text  <span class="comment"># 弹幕内容</span></span><br><span class="line">            size = bulletInfo[<span class="number">4</span>].text</span><br><span class="line">            <span class="keyword">if</span> content <span class="keyword">not</span> <span class="keyword">in</span> contents:</span><br><span class="line">                cnt += <span class="number">1</span></span><br><span class="line">                contents.add(content)</span><br><span class="line">                ret += make_response_body(timepoint=timepoint, color=color, content=content, size=size)</span><br><span class="line">    ret += make_response_foot()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Download &#123;&#125; danmakus, Select &#123;&#125; danmakus\nfinish.&quot;</span>.<span class="built_in">format</span>(total, cnt))</span><br><span class="line">    <span class="keyword">return</span> [title, ret]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save2oss</span>(<span class="params">title, xml, download</span>):</span><br><span class="line">    url = <span class="string">&quot;XML/&quot;</span> + title + <span class="string">&quot;.xml&quot;</span></span><br><span class="line">    auth = oss2.Auth(<span class="string">&#x27;******&#x27;</span>, <span class="string">&#x27;******&#x27;</span>)</span><br><span class="line">    endpoint_internal = <span class="string">&#x27;oss-cn-******-internal.aliyuncs.com&#x27;</span></span><br><span class="line">    endpoint = <span class="string">&#x27;oss-cn-******.aliyuncs.com&#x27;</span></span><br><span class="line">    bucketName = <span class="string">&#x27;****&#x27;</span></span><br><span class="line">    bucket = oss2.Bucket(auth, endpoint, bucketName)</span><br><span class="line">    headers = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> (download):</span><br><span class="line">        headers[<span class="string">&#x27;Content-Type&#x27;</span>]=<span class="string">&#x27;application/force-download&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        headers[<span class="string">&#x27;Content-Type&#x27;</span>]=<span class="string">&#x27;application/xml&#x27;</span></span><br><span class="line"></span><br><span class="line">    result = bucket.put_object(url, xml,headers=headers)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Upload URL:&#123;&#125;\tHTTP status: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(url, result.status))</span><br><span class="line">    <span class="comment">#bucket = oss2.Bucket(auth, endpoint, bucketName)</span></span><br><span class="line">    <span class="keyword">return</span> unquote(bucket.sign_url(<span class="string">&#x27;GET&#x27;</span>, url, <span class="number">120</span>),<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bilibili</span>(<span class="params">url</span>):</span><br><span class="line">    text = get_response(url)</span><br><span class="line">    keyStr = re.findall(<span class="string">r&#x27;&quot;cid&quot;:[\d]*&#x27;</span>, text)  <span class="comment"># B站有两种寻址方式，第二种多一些</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> keyStr:  <span class="comment"># 若列表为空，则等于“False”</span></span><br><span class="line">        keyStr = re.findall(<span class="string">r&#x27;cid=[\d]*&#x27;</span>, text)</span><br><span class="line">        key = <span class="built_in">eval</span>(keyStr[<span class="number">0</span>].split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        key = <span class="built_in">eval</span>(keyStr[<span class="number">0</span>].split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">    commentUrl = <span class="string">&#x27;https://comment.bilibili.com/&#x27;</span> + <span class="built_in">str</span>(key) + <span class="string">&#x27;.xml&#x27;</span>  <span class="comment"># 弹幕存储地址</span></span><br><span class="line">    <span class="keyword">return</span> commentUrl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_response</span>(<span class="params">url,download</span>):</span><br><span class="line">    <span class="keyword">if</span> url.find(<span class="string">&#x27;mgtv.com&#x27;</span>) &gt;= <span class="number">0</span>:</span><br><span class="line">        [title, ret] = mgtv(url)</span><br><span class="line">    <span class="keyword">elif</span> url.find(<span class="string">&#x27;qq.com&#x27;</span>) &gt;= <span class="number">0</span>:</span><br><span class="line">        [title, ret] = tencentvideo(url)</span><br><span class="line">    <span class="keyword">elif</span> url.find(<span class="string">&#x27;youku.com&#x27;</span>) &gt;= <span class="number">0</span>:</span><br><span class="line">        [title, ret] = youku(url)</span><br><span class="line">    <span class="keyword">elif</span> url.find(<span class="string">&#x27;iqiyi.com&#x27;</span>) &gt;= <span class="number">0</span>:</span><br><span class="line">        [title, ret] = iqiyi(url)</span><br><span class="line">    <span class="keyword">elif</span> url.find(<span class="string">&#x27;bilibili.com&#x27;</span>) &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> bilibili(url)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> save2oss(title, ret, download)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handler</span>(<span class="params">environ, start_response</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;QUERY_STRING&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> environ:</span><br><span class="line">        status = <span class="string">&#x27;200 OK&#x27;</span></span><br><span class="line">        response_headers = [(<span class="string">&#x27;Content-type&#x27;</span>, <span class="string">&#x27;text/html; charset=UTF-8&#x27;</span>)]</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;index.html&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            ret = f.read()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        query_string = environ[<span class="string">&#x27;QUERY_STRING&#x27;</span>]</span><br><span class="line">        params = parse_qs(query_string)</span><br><span class="line">        download = params.get(<span class="string">&#x27;download&#x27;</span>,[<span class="string">&#x27;off&#x27;</span>])[<span class="number">0</span>]</span><br><span class="line">        download = (download == <span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">        url = unquote(params[<span class="string">&#x27;url&#x27;</span>][<span class="number">0</span>], <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        returl = build_response(url,download)</span><br><span class="line">        <span class="keyword">if</span> returl <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            status = <span class="string">&#x27;302 Found&#x27;</span></span><br><span class="line">            response_headers = [(<span class="string">&#x27;Location&#x27;</span>, quote(returl,safe=<span class="string">&#x27;/:?&amp;=&#x27;</span>))]</span><br><span class="line">            ret = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            status = <span class="string">&#x27;200 OK&#x27;</span></span><br><span class="line">            response_headers = [(<span class="string">&#x27;Content-type&#x27;</span>, <span class="string">&#x27;text/html; charset=UTF-8&#x27;</span>)]</span><br><span class="line">            ret = <span class="string">&quot;不支持的视频网址&quot;</span></span><br><span class="line">    start_response(status, response_headers)</span><br><span class="line">    <span class="keyword">return</span> [ret.encode(<span class="string">&#x27;utf8&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#build_response(&quot;https://www.iqiyi.com/v_19rr1lm35o.html&quot;)</span></span><br></pre></td></tr></table></figure>

<p>代码中<code>http://fc.lyz05.cn/</code>需要替换为自己OSS触发器的地址或者自己绑定的用户域名</p>
<figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>弹幕文件解析接口<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/jquery/3.4.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- bootstrap --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.staticfile.org/twitter-bootstrap/3.4.1/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/twitter-bootstrap/3.4.1/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row text-center&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">					主流视频网站弹幕文件解析接口</span><br><span class="line">				<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">				这是一个弹幕文件解析接口！输入你要解析的视频地址，即可获得B站弹幕形式的XML文件。<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">                通过使用<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.dandanplay.com/&quot;</span>&gt;</span>弹弹Play播放器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				或者<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://tiansh.github.io/us-danmaku/bilibili/&#x27;</span>&gt;</span>bilibili ASS 弹幕在线转换项目<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				转换为普通字幕文件，即可在本地播放器中播放。</span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">				使用方法：在当前页面添加一个查询字符串url<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">                目前支持芒果TV，腾讯视频，优酷视频，爱奇艺视频，哔哩哔哩。</span><br><span class="line">                例子<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">                http://fc.lyz05.cn/?url=https://www.mgtv.com/b/336727/8087768.html<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">                http://fc.lyz05.cn/?url=https://v.qq.com/x/cover/a8oeend1e9gfdzs/f0031nbupkq.html<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">                http://fc.lyz05.cn/?url=https://v.youku.com/v_show/id_XNDYyMDM2NDMyOA==.html<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                http://fc.lyz05.cn/?url=https://www.iqiyi.com/v_19rr1lm35o.html<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                http://fc.lyz05.cn/?url=https://www.bilibili.com/video/av170001</span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>在下方直接输入视频网址，点击提交按钮也可解析。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-horizontal&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-1 control-label&quot;</span>&gt;</span>视频网址<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-5&quot;</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;URL&quot;</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-offset-1 col-sm-5&quot;</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;download&quot;</span> <span class="attr">checked</span>=<span class="string">&#x27;checked&#x27;</span>&gt;</span> 强制下载</span><br><span class="line">							<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-offset-1 col-sm-5&quot;</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">				Powered by <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Aliyun FC<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-divider&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                Reference blog：<span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">					<span class="attr">href</span>=<span class="string">&quot;https://lxmymjr.github.io/contents/%E4%B8%BB%E6%B5%81%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%E5%BC%B9%E5%B9%95%E4%B8%8B%E8%BD%BD&quot;</span>&gt;</span>主流视频网站弹幕下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>基于阿里云函数计算实现OSS文件自动索引功能</title>
    <url>/2020/%E5%9F%BA%E4%BA%8E%E9%98%BF%E9%87%8C%E4%BA%91%E5%87%BD%E6%95%B0%E8%AE%A1%E7%AE%97%E5%AE%9E%E7%8E%B0OSS%E6%96%87%E4%BB%B6%E8%87%AA%E5%8A%A8%E7%B4%A2%E5%BC%95%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>可能是我的搜索方式不对。总之，我找不到OSS自动索引当前目录文件的功能。所以，决定自己写一个，操作并不难。</p>
<p>首先要有一个美观的索引页面，为了锻炼一下自己，就用bootstrap手写了一个，效果如下：</p>
<p><img data-src="/images/%E5%9F%BA%E4%BA%8E%E9%98%BF%E9%87%8C%E4%BA%91%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0OSS%E6%96%87%E4%BB%B6%E8%87%AA%E5%8A%A8%E7%B4%A2%E5%BC%95%E5%8A%9F%E8%83%BD/001.png" alt="001"></p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>因为是使用的阿里云函数计算，所以要先开通服务<br>新建函数 - 事件函数<br><img data-src="/images/%E5%9F%BA%E4%BA%8E%E9%98%BF%E9%87%8C%E4%BA%91%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0OSS%E6%96%87%E4%BB%B6%E8%87%AA%E5%8A%A8%E7%B4%A2%E5%BC%95%E5%8A%9F%E8%83%BD/002.png" alt="002"></p>
<p>所在服务，函数名称：随便取一个名<br>运行环境：python3 (因为我是用Python写的)<br>函数入口：index.handler(代表OSS事件发生后，会调用index.py里的handler函数)<br>函数执行内存：选一个最小的就够用了</p>
<p><img data-src="/images/%E5%9F%BA%E4%BA%8E%E9%98%BF%E9%87%8C%E4%BA%91%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0OSS%E6%96%87%E4%BB%B6%E8%87%AA%E5%8A%A8%E7%B4%A2%E5%BC%95%E5%8A%9F%E8%83%BD/003.png" alt="003"></p>
<p>在代码执行中直接粘贴下面的代码<br><img data-src="/images/%E5%9F%BA%E4%BA%8E%E9%98%BF%E9%87%8C%E4%BA%91%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0OSS%E6%96%87%E4%BB%B6%E8%87%AA%E5%8A%A8%E7%B4%A2%E5%BC%95%E5%8A%9F%E8%83%BD/004.png" alt="004"></p>
<figure class="highlight python"><figcaption><span>index.py</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> oss2</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> pytz  <span class="comment"># 时区</span></span><br><span class="line"></span><br><span class="line">tz = pytz.timezone(<span class="string">&#x27;Asia/Shanghai&#x27;</span>)  <span class="comment"># +8时区</span></span><br><span class="line">auth = oss2.Auth(<span class="string">&#x27;&lt;你的阿里云AccessKey&gt;&#x27;</span>, <span class="string">&#x27;&lt;你的阿里云AccessKeySecret&gt;&#x27;</span>)</span><br><span class="line">endpoint = <span class="string">&#x27;oss-cn-hongkong-internal.aliyuncs.com&#x27;</span></span><br><span class="line"><span class="comment">#endpoint = &#x27;oss-cn-hongkong.aliyuncs.com&#x27;</span></span><br><span class="line">bucketName = <span class="string">&#x27;&lt;你的bucketName&gt;&#x27;</span></span><br><span class="line">bucket = oss2.Bucket(auth, endpoint, bucketName)</span><br><span class="line"><span class="comment">#返回给云函数的信息</span></span><br><span class="line">message = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列举Object大小</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">objsize</span>(<span class="params">obj</span>):</span><br><span class="line">    <span class="built_in">dict</span> = &#123;<span class="number">0</span>: <span class="string">&#x27;B&#x27;</span>, <span class="number">1</span>: <span class="string">&#x27;KB&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;MB&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;GB&#x27;</span>&#125;</span><br><span class="line">    size = obj.size</span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (size / <span class="number">1024</span> &gt;= <span class="number">1</span> <span class="keyword">and</span> cnt &lt; <span class="number">3</span>):</span><br><span class="line">        size /= <span class="number">1024</span></span><br><span class="line">        cnt += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(<span class="built_in">round</span>(size, <span class="number">2</span>)) + <span class="built_in">dict</span>[cnt]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列举Object最后修改时间</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">objtime</span>(<span class="params">obj</span>):</span><br><span class="line">    timestamp = obj.last_modified</span><br><span class="line">    time = datetime.datetime.fromtimestamp(timestamp, tz)</span><br><span class="line">    <span class="keyword">return</span> time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写某一个Object的链接</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">writeitem</span>(<span class="params">obj, folder</span>):</span><br><span class="line">    <span class="comment"># 当前Object不是首页和当前目录</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(folder) != <span class="built_in">len</span>(obj.key) <span class="keyword">and</span> obj.key.find(<span class="string">&#x27;index.html&#x27;</span>) == -<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># Object是目录</span></span><br><span class="line">        <span class="keyword">if</span> (obj.is_prefix()):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&lt;tr&gt;&lt;td&gt;&lt;a href=&#x27;/&quot;</span> + obj.key + <span class="string">&quot;&#x27;&gt;&quot;</span> + obj.key[<span class="built_in">len</span>(folder):] + <span class="string">&quot;&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&lt;tr&gt;&lt;td&gt;&lt;a href=&#x27;/&quot;</span> + obj.key + <span class="string">&quot;&#x27;&gt;&quot;</span> + obj.key[<span class="built_in">len</span>(folder):] + <span class="string">&quot;&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&quot;</span> + objsize(</span><br><span class="line">                obj) + <span class="string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span> + objtime(obj) + <span class="string">&quot;&lt;/td&gt;&lt;/tr&gt;\n&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列举folder目录下所有文件和子目录。flag:是否递归</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">folder, flag</span>):</span><br><span class="line">    <span class="keyword">global</span> message</span><br><span class="line">    <span class="comment"># index.html头部信息</span></span><br><span class="line">    html = <span class="string">&quot;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\&quot;content-type\&quot; content=\&quot;txt/html; charset=utf-8\&quot; /&gt;&lt;meta name=\&quot;viewport\&quot; content=\&quot;width=device-width, initial-scale=1\&quot;&gt;&lt;link rel=\&quot;stylesheet\&quot; href=\&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.4.1/dist/css/bootstrap.min.css\&quot;&gt;&lt;title&gt;Index of /&quot;</span> + folder + <span class="string">&quot;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=\&quot;container\&quot;&gt;&lt;div class=\&quot;row\&quot;&gt;&lt;h1&gt;Index of /&quot;</span> + folder + <span class="string">&quot;&lt;/h1&gt;&lt;hr&gt;&lt;table class=\&quot;table table-striped table-hover\&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;File name&lt;/th&gt;&lt;th&gt;File Size&lt;/th&gt;&lt;th&gt;Date&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&quot;</span></span><br><span class="line">    <span class="comment"># 首页不需要返回上一层</span></span><br><span class="line">    <span class="keyword">if</span> (folder != <span class="string">&#x27;&#x27;</span>):</span><br><span class="line">        html += <span class="string">&quot;&lt;tr&gt;&lt;td&gt;&lt;a href=&#x27;../&#x27;&gt;../&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;\n&quot;</span></span><br><span class="line">    <span class="comment"># 列举文件夹</span></span><br><span class="line">    <span class="keyword">for</span> obj <span class="keyword">in</span> oss2.ObjectIterator(bucket, prefix=folder, delimiter=<span class="string">&#x27;/&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span> obj.is_prefix():</span><br><span class="line">            html += writeitem(obj, folder)</span><br><span class="line">            <span class="comment"># message += &#x27;directory: &#x27; + obj.key+&#x27;\n&#x27;</span></span><br><span class="line">    <span class="comment"># 列举文件</span></span><br><span class="line">    <span class="keyword">for</span> obj <span class="keyword">in</span> oss2.ObjectIterator(bucket, prefix=folder, delimiter=<span class="string">&#x27;/&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> obj.is_prefix():</span><br><span class="line">            html += writeitem(obj, folder)</span><br><span class="line">            <span class="comment"># message += &#x27;file:&#x27; + obj.key+&#x27;\n&#x27;</span></span><br><span class="line">    <span class="comment"># index.html尾部信息</span></span><br><span class="line">    html += <span class="string">&quot;&lt;/table&gt;&lt;hr&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span></span><br><span class="line">    <span class="comment"># 上传index.html的地址</span></span><br><span class="line">    url = folder + <span class="string">&quot;index.html&quot;</span></span><br><span class="line">    <span class="comment"># 上传index文件</span></span><br><span class="line">    result = bucket.put_object(url, html)</span><br><span class="line">    <span class="comment"># print(html)</span></span><br><span class="line">    message += <span class="string">&#x27;Url:&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(url) + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    message += <span class="string">&#x27;HTTP status: &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(result.status) + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    <span class="comment"># 递归操作</span></span><br><span class="line">    <span class="keyword">if</span> (flag):</span><br><span class="line">        <span class="keyword">for</span> obj <span class="keyword">in</span> oss2.ObjectIterator(bucket, prefix=folder, delimiter=<span class="string">&#x27;/&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> obj.is_prefix():  <span class="comment"># 文件夹</span></span><br><span class="line">                dfs(obj.key, flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># OSS有创建删除Object事件产生</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handler</span>(<span class="params">event, context</span>):</span><br><span class="line">    result = bucket.head_object(<span class="string">&#x27;event.txt&#x27;</span>)</span><br><span class="line">    bucket.append_object(<span class="string">&#x27;event.txt&#x27;</span>,result.content_length,event)</span><br><span class="line">    <span class="keyword">global</span> message</span><br><span class="line">    message = <span class="string">&quot;&quot;</span></span><br><span class="line">    eventObj = json.loads(event)[<span class="string">&quot;events&quot;</span>]</span><br><span class="line">    url = eventObj[<span class="number">0</span>][<span class="string">&#x27;oss&#x27;</span>][<span class="string">&#x27;object&#x27;</span>][<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">    eventName = eventObj[<span class="number">0</span>][<span class="string">&#x27;eventName&#x27;</span>]</span><br><span class="line">    <span class="comment"># 得到事件发生Object的URL</span></span><br><span class="line">    <span class="keyword">if</span> (url.find(<span class="string">&#x27;index.html&#x27;</span>) == -<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 不是index.html</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">len</span>(url) - <span class="number">1</span> == url.rfind(<span class="string">&#x27;/&#x27;</span>)):</span><br><span class="line">            <span class="comment"># 如果是创建修改目录,当前目录需要更新</span></span><br><span class="line">            dfs(url,<span class="literal">False</span>)</span><br><span class="line">            <span class="comment"># 同时目录的上层目录需要更新</span></span><br><span class="line">            url = url[:-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> (url.find(<span class="string">&#x27;/&#x27;</span>) == -<span class="number">1</span>):</span><br><span class="line">            dfs(folder=<span class="string">&#x27;&#x27;</span>, flag=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dfs(url[:url.rfind(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>], <span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> message</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Not Modified&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以在触发事件中选一个OSS模板的测试事件</p>
<p><img data-src="/images/%E5%9F%BA%E4%BA%8E%E9%98%BF%E9%87%8C%E4%BA%91%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0OSS%E6%96%87%E4%BB%B6%E8%87%AA%E5%8A%A8%E7%B4%A2%E5%BC%95%E5%8A%9F%E8%83%BD/005.png" alt="005"></p>
<p>执行结果类似这样</p>
<p><img data-src="/images/%E5%9F%BA%E4%BA%8E%E9%98%BF%E9%87%8C%E4%BA%91%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0OSS%E6%96%87%E4%BB%B6%E8%87%AA%E5%8A%A8%E7%B4%A2%E5%BC%95%E5%8A%9F%E8%83%BD/006.png" alt="006"></p>
<p>然后在创建一个OSS的触发器，中间可能会要求授予调用的权限，按照提示操作即可</p>
<p><img data-src="/images/%E5%9F%BA%E4%BA%8E%E9%98%BF%E9%87%8C%E4%BA%91%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0OSS%E6%96%87%E4%BB%B6%E8%87%AA%E5%8A%A8%E7%B4%A2%E5%BC%95%E5%8A%9F%E8%83%BD/007.png" alt="007"></p>
<h1 id="费用"><a href="#费用" class="headerlink" title="费用"></a>费用</h1><p>阿里云函数计算每个月每个账户有一定的免费额度，所以正常使用免费。</p>
<p>OSS费用按照OSS的收费方式进行。</p>
]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>大橋のぞみ Oohashi Nozomi</title>
    <url>/2016/%E5%A4%A7%E6%A9%8B%E3%81%AE%E3%81%9E%E3%81%BF/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote>
<p>一个唱《崖上的波妞》从头唱到尾的有精神的女孩子。</p>
</blockquote>
<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>这是我所写的第三个人物，亦是第二个童星。好吧(∩_∩)！我承认其实我是loli控！</p>
<h1 id="关于她"><a href="#关于她" class="headerlink" title="关于她"></a>关于她</h1><p>从07-12年活跃在日本童星一线。12年4月后暂时隐退。(在很多人眼中，可能觉得这是个遗憾！但我并不这么认为，她的隐退对她来说其实是个最好的选择。)因演唱 《崖上的波妞》同名主题曲而红遍了日本。<br>曾经打破红白歌会上年纪最小上台表演者。（其后，纪录被芦田爱莱超越，并一直保持至今（2016年））<br>详细信息请右转<a href="https://zh.wikipedia.org/wiki/%E5%A4%A7%E6%A9%8B%E6%9C%9B%E7%BE%8E">维基百科</a></p>
<h1 id="声优"><a href="#声优" class="headerlink" title="声优"></a>声优</h1><h2 id="名侦探柯南剧场版《天空的遇难船》"><a href="#名侦探柯南剧场版《天空的遇难船》" class="headerlink" title="名侦探柯南剧场版《天空的遇难船》"></a>名侦探柯南剧场版《天空的遇难船》</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>大桥望美在里面是声的出演。川口聪 役。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>曾经的我可是柯南粉啊！（因为自从看了《相棒》之后，就对柯南的各种假，感到无望）然而现在已经不是了，只不过要是出最新的剧场版，还是会追的。剧场版一年一更。<br>当时我还在刷柯南剧场版时还并不知道</p>
<h1 id="演员"><a href="#演员" class="headerlink" title="演员"></a>演员</h1><h2 id="久石譲-in-武道館-宮崎アニメと共に歩んだ25年間"><a href="#久石譲-in-武道館-宮崎アニメと共に歩んだ25年間" class="headerlink" title="久石譲 in 武道館 宮崎アニメと共に歩んだ25年間"></a>久石譲 in 武道館 <del>宮崎アニメと共に歩んだ25年間</del></h2><p>早在我关注宫崎骏动画的时候，无意间在bilibili中发现了这场演奏会的视频。<br>也就是那时候从弹幕中知道的大桥望美。<br>这是一场十分不错的演唱会，强烈建议看一下!!</p>
<h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>这可是25年以来从风之谷到悬崖上的金鱼姬，久石让为宫崎骏配音中的大部分配乐的演奏，其中一些配乐还加上了歌词，请来了原唱。（自然，大桥望美肯定少不了了）如果，你曾经看过宫崎骏有关的动漫，会产生很强的画面感！当然，没看过也没关系。毕竟，我在最开始的时候也没有看过多少。即使没看过，你也可以从久石让的音乐中听出各种各样的感情。</p>
<h3 id="演出"><a href="#演出" class="headerlink" title="演出"></a>演出</h3><h4 id="悬崖上的金鱼姬"><a href="#悬崖上的金鱼姬" class="headerlink" title="悬崖上的金鱼姬"></a>悬崖上的金鱼姬</h4><ul>
<li>47:00出场</li>
</ul>
<p>这可是她的主打歌啊！！一直唱到隐退…<br>最初时，我就想，这娃有多厉害啊，尽然能够在武道馆，这么大的牌场下表演，一定很有名气。但我看完表演，却也不觉得怎么样，十分的普通，就像是那种在道路上随便找的人来唱的。没什么镜头感，没什么气场。跟Crystal比起来简直弱爆啊！所以，我一直觉得很奇怪，这不符合常理啊。<br>当然第一次时只是稍微看了一下，并没有太在意她。<br>前面说了那么多不足，在来说一下优点吧。其实，她在武道馆的演出比红白上好太多了！没有红白上那么紧张，表现非常的自然，就要这种效果。而且也没有出现唱歌跑调这种情况。（波妞这首歌似乎是唯一一个不会唱跑调的歌了。）只不过经常忘词，这倒是真事！还试过藤冈藤卷跟着一起忘词的情况。</p>
<h4 id="散步"><a href="#散步" class="headerlink" title="散步"></a>散步</h4><ul>
<li>01:32:00出场</li>
</ul>
<p>镜头不多，也就是打打酱油。在她以个人名义发布的第一张专辑<a href="#jump1">《ノンちゃん云に乗る 》</a>中也有收录这首歌曲《散步》。这次的表演唱的比专辑中的要好！<br><a href="http://www.bilibili.com/video/av1237120/">视频地址</a></p>
<h2 id="钢之女"><a href="#钢之女" class="headerlink" title="钢之女"></a>钢之女</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><p>大桥望美在这部剧中饰演中野爱梨，私生女小孩，就像<a href="https://www.zhihu.com/question/30359838">知乎</a>上某人所说：</p>
<blockquote>
<p>日剧里面，有这么个规则，凡是小孩子有戏份，基本都是家庭有问题成长多坎坷什么的。</p>
</blockquote>
<p>然而，她在这部剧中表现并不出色！尽管，名字被特意拿到最前面，相对于其他子役而言。简直弱爆啊!!!其他子役个个都在刷存在感,演技爆表啊！！尤其是那个叫吉田里琴的，女王风范啊！！你就在那呆萌呆萌的……<del>（醉）</del></p>
<h3 id="第一季"><a href="#第一季" class="headerlink" title="第一季"></a>第一季</h3><p>可以说编剧还是给了充足的戏份的，在没主要出场的几集中，都能时常看到她的露脸。（这段时间也是她最辉煌的时候啦！在芦田爱莱还没崛起之前）主要出场在第6集哦！<br>其实整一集也真的没什么好说的，就是呆萌嘛！当然与柠檬酱的对手戏还是不错的，将来可以做一个不错的姐姐！（竟然你那么想做幼儿园老师）</p>
<h3 id="第二季"><a href="#第二季" class="headerlink" title="第二季"></a>第二季</h3><p>也就第一集出场的时间比较多，依旧是原先第一季的设定，就是一个暖妹子嘛！<br>在第8集时，有个地方还是挺令我吃惊的。<br>28：30，有一种young神的感觉啊！整个人的气质都出来了啊！</p>
<h2 id="白色之春"><a href="#白色之春" class="headerlink" title="白色之春"></a>白色之春</h2><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><h1 id="歌手"><a href="#歌手" class="headerlink" title="歌手"></a>歌手</h1><h2 id="崖の上のポニョ"><a href="#崖の上のポニョ" class="headerlink" title="崖の上のポニョ"></a>崖の上のポニョ</h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=450 src="//music.163.com/outchain/player?type=1&id=71171&auto=0&height=430"></iframe>

<p>以大橋のぞみと藤冈藤巻的名义，发行的第一张专辑。相比中国新声代的国内小朋友，已经相当的幸福了。能够发行含自己名字的专辑。<br>《崖の上のポニョ》这首歌完成的相当棒！全程音非常的准，没有跑调！这也是她唯一一首值得骄傲的歌了。<br>整个演艺生涯也就是将这首歌从小唱到大。<br>《フジモトのテーマ》这首歌大橋のぞみ没有参与，完全是藤冈藤巻两个大叔唱的，还是比较耐听的。我好像在弹幕中看到有人说这其中有个人像白岩松。<br>《崖の上のポニョ(のぞみちゃんデモ)》这是demo试唱版，大橋のぞみ的小奶音相当的重啊！！萌cry了！！因为这是最初的曲子版本，后面的成品对曲子有所修改，所以并不是她唱跑调的啦。</p>
<p><span id="jump1"></span></p>
<h2 id="ノンちゃん云に乗る"><a href="#ノンちゃん云に乗る" class="headerlink" title="ノンちゃん云に乗る"></a>ノンちゃん云に乗る</h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=450 src="//music.163.com/outchain/player?type=1&id=2076099&auto=0&height=430"></iframe>

<h1 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h1><h2 id="【pv】悬崖上的金鱼姬"><a href="#【pv】悬崖上的金鱼姬" class="headerlink" title="【pv】悬崖上的金鱼姬"></a>【pv】悬崖上的金鱼姬</h2><iframe src="//player.bilibili.com/player.html?aid=4630914&cid=7513051&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" id="video1" width="100%"> </iframe>

<h2 id="【making】悬崖上的金鱼姬"><a href="#【making】悬崖上的金鱼姬" class="headerlink" title="【making】悬崖上的金鱼姬"></a>【making】悬崖上的金鱼姬</h2><iframe src="//player.bilibili.com/player.html?aid=4630914&cid=13483137&page=2" frameborder="0" scrolling="no" id="video2" width="100%"></iframe>

<script type="text/javascript">
	function changeFrameHeight(ID){
		var ifm= document.getElementById(ID);
		var bHeight = document.documentElement.clientHeight-150;
		var dHeight = document.documentElement.clientWidth-150;
		var height = Math.min(bHeight, dHeight);
		ifm.height = height;
		//ifm.height=ifm.width;
		//ifm.width=50
	}

	window.onresize=function(){  
		changeFrameHeight("video1");
		changeFrameHeight("video2");
	} 
	window.onload=function (){
		changeFrameHeight("video1");
		changeFrameHeight("video2");
	}
</script>


<!--

<video controls="controls" width="480" height="450" src="">
</video>

-->]]></content>
      <categories>
        <category>人物</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>未完成</tag>
      </tags>
  </entry>
  <entry>
    <title>家用网络透明代理实践</title>
    <url>/2023/%E5%AE%B6%E7%94%A8%E7%BD%91%E7%BB%9C%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="所需设备"><a href="#所需设备" class="headerlink" title="所需设备"></a>所需设备</h1><ol>
<li>主路由选择以下三种路由设备之一，基础版面向的普通用户（一般买的家用无线路由器都支持），进阶版与linux系列路由器可定制一些高级功能，并且能在旁路由不稳定的情况下，保证家中不断网。</li>
</ol>
<ul>
<li>基础版（支持关闭DHCP功能的路由器均可）</li>
<li>进阶版（能修改路由表、配置DHCP Option的路由器均可）<ul>
<li>Openwrt&#x2F;Padavan&#x2F;RouterOS 等底层是linux的路由器</li>
</ul>
</li>
</ul>
<ol start="2">
<li>旁路由选择性能比较好的设备，安装linux系统或以linux为底层的路由器系统。</li>
</ol>
<ul>
<li>基础版：斐讯N1、树莓派等微型计算机</li>
<li>进阶版：x86软路由，虚拟机等</li>
</ul>
<h1 id="网络拓扑结构"><a href="#网络拓扑结构" class="headerlink" title="网络拓扑结构"></a>网络拓扑结构</h1><p>旁路由设备与普通电脑、手机、电视设备一样接入到主路由的LAN网络中。<br>旁路由建议网线连接。</p>
<h1 id="设计目标"><a href="#设计目标" class="headerlink" title="设计目标"></a>设计目标</h1><ol>
<li>访问国内IPv4&#x2F;IPv6地址段直连，其余流量走旁路由设备</li>
<li>旁路由设备运行Clash TUN模式，由TUN网卡接管流量，交由Clash进一步分流处理。</li>
<li>双栈域名解析，IPv4优先（IPv6路由太差，不够稳定）</li>
<li>根据用户设备分为两类，一类正常上网，一类走旁路由设备分流代理。</li>
<li>不需要在每台设备挂代理与配置静态IP，客户端零配置，直接接入家庭网络即可。</li>
</ol>
<h1 id="运营商光猫与主路由默认配置"><a href="#运营商光猫与主路由默认配置" class="headerlink" title="运营商光猫与主路由默认配置"></a>运营商光猫与主路由默认配置</h1><ol>
<li>光猫改桥接</li>
<li>主路由PPPoE拨号</li>
</ol>
<h1 id="方案一（主路由为基础版）"><a href="#方案一（主路由为基础版）" class="headerlink" title="方案一（主路由为基础版）"></a>方案一（主路由为基础版）</h1><p>因为主路由的功能有限，尤其是网上买的普通家用无线路由器。<br>这种情况下，如果不更换主路由就需要由旁路由设备来代管一些功能。<br>要求旁路由设备与主路由设备同样稳定，避免影响家里其他用户正常上网。</p>
<h2 id="主路由配置"><a href="#主路由配置" class="headerlink" title="主路由配置"></a>主路由配置</h2><p>关闭DHCP即可，其他参照默认配置。</p>
<h2 id="旁路由配置"><a href="#旁路由配置" class="headerlink" title="旁路由配置"></a>旁路由配置</h2><p>旁路由需要开启路由转发。</p>
<h3 id="DHCP配置（dnsmasq）"><a href="#DHCP配置（dnsmasq）" class="headerlink" title="DHCP配置（dnsmasq）"></a>DHCP配置（dnsmasq）</h3><h4 id="设计目标-1"><a href="#设计目标-1" class="headerlink" title="设计目标"></a>设计目标</h4><p>根据用户设备分为两类，一类走主路由，主路由提供的DNS正常上网，一类走旁路由设备分流代理。</p>
<h4 id="实施方法"><a href="#实施方法" class="headerlink" title="实施方法"></a>实施方法</h4><p>对于需要透明代理的设备下发以下DHCP配置：<br>DHCP Options 3（默认网关）：旁路由IP地址<br>DHCP Options 5（DNS）：旁路由IP地址<br>对于不需要透明代理的设备默认配置即可，即网关为主路由，DNS为主路由或运营商下发的DNS。</p>
<p>那么问题来了，怎么做到针对不同的设备下发不同的DHCP配置呢？<br>这里可以通过配置dnsmasq来实现，参考底部参考文献<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[dnsmasq 按需分配分配网关与 DNS（旁路由）](https://www.haoyizebo.com/posts/d461b93f/)
">[2]</span></a></sup>的文章<br>大致是通过MAC地址或者IP段来匹配，从而下发不同的DHCP配置。</p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol>
<li>需要提前搜集用户设备的MAC地址，如果用户设备的MAC地址发生变化，那么就会导致DHCP配置失效，需要重新配置。</li>
<li>多网卡设备，像笔记本电脑既可以插网线，又能连wifi，这是两个独立的网卡，因此两个mac地址都要配置。</li>
<li>不够安全，知道套路的人，可以自己配置静态ip使用代理。</li>
<li>不够灵活，每次修改DHCP配置，都需要等待用户设备重新获取IP地址，才能生效。</li>
</ol>
<h3 id="DNS服务器配置（mosdns）"><a href="#DNS服务器配置（mosdns）" class="headerlink" title="DNS服务器配置（mosdns）"></a>DNS服务器配置（mosdns）</h3><p>mosdns的介绍和二进制可执行文件，参考项目官方地址<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[mosdns 项目](https://github.com/IrineSistiana/mosdns)
">[3]</span></a></sup>.</p>
<h4 id="设计目标-2"><a href="#设计目标-2" class="headerlink" title="设计目标"></a>设计目标</h4><ol>
<li>针对解析结果为国内IP的域名，转发至国内DNS，解析结果为海外IP的域名，转发至Clash DNS。</li>
<li>针对DNS解析结果分流，解析结果为国内IP的正常返回，解析结果为海外IP的返回fake-ip。</li>
<li>针对纯IPv6的域名解析，直接返回。（机场一般不支持v6，v6直连最好）</li>
</ol>
<h4 id="实施方法-1"><a href="#实施方法-1" class="headerlink" title="实施方法"></a>实施方法</h4><p>我写了一份配置文件，参考了这个配置<sup id="fnref:4"><a href="#fn:4" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[mosdnsV5配置分享](https://github.com/IrineSistiana/mosdns/discussions/624)
">[4]</span></a></sup>，有以下几点需要注意：</p>
<ol>
<li>forward_remote部分填写Clash的DNS地址。</li>
<li>china_ip中的文件自己从网上搜索<sup id="fnref:6"><a href="#fn:6" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[每日更新的电信IP段,联通IP段,移动IP段,铁通IP段,教育网IP段,长城宽带/鹏博士IP段,ISP IP](https://ispip.clang.cn/)
">[6]</span></a></sup>，主要是排除国内IP段与本地网络。是否排除本地网段<sup id="fnref:7"><a href="#fn:7" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[本地网段](https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/lancidr.txt)
">[7]</span></a></sup>看自己需求，GFW有将IP污染到保留地址的先例。</li>
<li>纯IPv6的域名解析，我希望能直接直连，因此专门增加了规则。不需要可以删除。</li>
<li>转发至国内的DNS，建议填写国内的加密DNS，避免因配置防火墙53端口劫持的时候污染到结果。</li>
<li>添加fallback插件，当forward_remote挂了，自动回滚到forward_local。</li>
<li>设置ttl为1，方便clash恢复时能尽快拿到fake-IP。</li>
</ol>
<figure class="highlight yaml"><figcaption><span>/etc/mosdns/config.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">log:</span></span><br><span class="line">  <span class="attr">level:</span> <span class="string">error</span></span><br><span class="line">  <span class="attr">file:</span> <span class="string">&quot;/tmp/mosdns.log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">plugins:</span></span><br><span class="line">  <span class="comment"># 缓存</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">tag:</span> <span class="string">cache</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">cache</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">      <span class="attr">size:</span> <span class="number">1024</span></span><br><span class="line">      <span class="attr">lazy_cache_ttl:</span> <span class="number">86400</span></span><br><span class="line">      </span><br><span class="line">  <span class="comment"># 中国与保留IP</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">tag:</span> <span class="string">china_local_ip</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">ip_set</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">      <span class="attr">ips:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;192.168.0.0/16&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;10.0.0.0/8&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;172.16.0.0/12&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;127.0.0.0/8&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;100.64.0.0/10&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;::1/128&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;fc00::/7&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;fe80::/10&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;fd00::/8&quot;</span></span><br><span class="line">      <span class="attr">files:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./all_cn.txt</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./all_cn_ipv6.txt</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 转发至国内DNS，并发查询</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">tag:</span> <span class="string">forward_local</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">forward</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">      <span class="attr">concurrent:</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">upstreams:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">addr:</span> <span class="string">&quot;https://223.5.5.5/dns-query&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">addr:</span> <span class="string">&quot;https://120.53.53.53/dns-query&quot;</span></span><br><span class="line">          </span><br><span class="line">  <span class="comment"># 转发至国外DNS，并发查询</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">tag:</span> <span class="string">forward_remote</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">forward</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">      <span class="attr">concurrent:</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">upstreams:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">tag:</span> <span class="string">CLOUDFLARE</span></span><br><span class="line">          <span class="attr">addr:</span> <span class="string">&quot;https://gd.lyz05.cn/dns-query&quot;</span></span><br><span class="line">          <span class="attr">bootstrap:</span> <span class="string">&quot;223.5.5.5&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">tag:</span> <span class="string">ALIYUN</span></span><br><span class="line">          <span class="attr">addr:</span> <span class="string">&quot;https://sub.lyz05.cn/dns-query&quot;</span></span><br><span class="line">          <span class="attr">bootstrap:</span> <span class="string">&quot;223.5.5.5&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 转发至Clash</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">tag:</span> <span class="string">forward_clash</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">forward</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">      <span class="attr">concurrent:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">upstreams:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">addr:</span> <span class="string">udp://192.168.2.10:1053</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 如果forward_clash挂了，可以自动回滚</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">tag:</span> <span class="string">&quot;fallback&quot;</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">fallback</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">      <span class="attr">primary:</span> <span class="string">forward_clash</span></span><br><span class="line">      <span class="attr">secondary:</span> <span class="string">forward_remote</span></span><br><span class="line">      <span class="attr">threshold:</span> <span class="number">100</span></span><br><span class="line">      <span class="attr">always_standby:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 主运行序列</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">tag:</span> <span class="string">main_sequence</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">sequence</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">      <span class="comment"># 是否匹配代理列表</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">matches:</span> <span class="string">qname</span> <span class="string">&amp;./proxy-list.txt</span></span><br><span class="line">        <span class="attr">exec:</span> <span class="string">$forward_clash</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">matches:</span> <span class="string">has_resp</span></span><br><span class="line">        <span class="attr">exec:</span> <span class="string">accept</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 是否匹配直连列表</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">matches:</span> <span class="string">qname</span> <span class="string">&amp;./direct-list.txt</span></span><br><span class="line">        <span class="attr">exec:</span> <span class="string">$forward_local</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">matches:</span> <span class="string">has_resp</span></span><br><span class="line">        <span class="attr">exec:</span> <span class="string">accept</span></span><br><span class="line">            </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">exec:</span> <span class="string">prefer_ipv4</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment"># 动态域名跳过缓存</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">matches:</span> <span class="string">&quot;!qname lyz05.cn&quot;</span></span><br><span class="line">        <span class="attr">exec:</span> <span class="string">$cache</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">matches:</span> <span class="string">has_resp</span></span><br><span class="line">        <span class="attr">exec:</span> <span class="string">accept</span></span><br><span class="line">        </span><br><span class="line">      <span class="comment"># 执行查询后匹配解析结果是中国或保留地址</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">exec:</span> <span class="string">$forward_local</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">matches:</span> </span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;has_resp&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;resp_ip $china_local_ip&quot;</span></span><br><span class="line">        <span class="attr">exec:</span> <span class="string">accept</span></span><br><span class="line">        </span><br><span class="line">      <span class="comment"># 接受所有的IPv4 A记录为空的本地查询结果</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">matches:</span> </span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;!has_wanted_ans&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;qtype 1&quot;</span></span><br><span class="line">        <span class="attr">exec:</span> <span class="string">accept</span></span><br><span class="line">        </span><br><span class="line">      <span class="comment"># 接受所有的IPv6 AAAA记录的本地查询结果</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">matches:</span> </span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;has_wanted_ans&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;qtype 28&quot;</span></span><br><span class="line">        <span class="attr">exec:</span> <span class="string">accept</span></span><br><span class="line">        </span><br><span class="line">      <span class="comment"># fallback</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">exec:</span> <span class="string">$fallback</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 启动监听服务</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">tag:</span> <span class="string">udp_server</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">udp_server</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">      <span class="attr">entry:</span> <span class="string">main_sequence</span></span><br><span class="line">      <span class="attr">listen:</span> <span class="string">:1053</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">tag:</span> <span class="string">tcp_server</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">tcp_server</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">      <span class="attr">entry:</span> <span class="string">main_sequence</span></span><br><span class="line">      <span class="attr">listen:</span> <span class="string">:1053</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Clash"><a href="#Clash" class="headerlink" title="Clash"></a>Clash</h3><p>参考Clash的官方项目<sup id="fnref:5"><a href="#fn:5" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Clash 项目](https://github.com/Dreamacro/clash)
">[5]</span></a></sup>，下载二进制文件并使用。注意下载Permium版本的。<br>配置文件参考项目的示例文件，根据自己的需求修改即可。<br>大体上就是增加dns的配置<br>TUN模式的auto-route需要关闭，原因是：auto-route会默认添加默认路由到TUN网卡。这样国内直连的IP就会走TUN网卡，被Clash接管。对于性能弱的设备不好，影响网速。<br>所以也就带来了个缺点：对于不用域名解析只用IP访问的软件，会连不上，像Telagram，所以我们要单独加静态路由，让Telegram的IP<sup id="fnref:8"><a href="#fn:8" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Telegram CIDR](https://core.telegram.org/resources/cidr.txt)">[8]</span></a></sup>走TUN网卡。</p>
<figure class="highlight yaml"><figcaption><span>/etc/clash/config.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">mixed-port:</span> <span class="number">7890</span></span><br><span class="line"><span class="attr">socks-port:</span> <span class="number">7891</span></span><br><span class="line"><span class="attr">redir-port:</span> <span class="number">7892</span></span><br><span class="line"><span class="attr">tproxy-port:</span> <span class="number">7893</span></span><br><span class="line"><span class="attr">allow-lan:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">rule</span></span><br><span class="line"><span class="attr">log-level:</span> <span class="string">warning</span></span><br><span class="line"><span class="attr">external-controller:</span> <span class="string">:9090</span></span><br><span class="line"><span class="attr">external-ui:</span> <span class="string">ui</span></span><br><span class="line"><span class="attr">profile:</span></span><br><span class="line">  <span class="attr">store-selected:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dns:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">enhanced-mode:</span> <span class="string">fake-ip</span></span><br><span class="line">  <span class="attr">listen:</span> <span class="string">:1053</span></span><br><span class="line">  <span class="attr">nameserver:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;https://223.5.5.5/dns-query&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;https://120.53.53.53/dns-query&quot;</span></span><br><span class="line">  <span class="attr">fake-ip-filter:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">+.stun.*.*</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">+.stun.*.*.*</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">+.stun.*.*.*.*</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">+.stun.*.*.*.*.*</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;*.n.n.srv.nintendo.net&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">+.stun.playstation.net</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">xbox.*.*.microsoft.com</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;*.*.xboxlive.com&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;*.msftncsi.com&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;*.msftconnecttest.com&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">WORKGROUP</span></span><br><span class="line"></span><br><span class="line"><span class="attr">tun:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">stack:</span> <span class="string">system</span></span><br><span class="line">  <span class="attr">dns-hijack:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tcp://8.8.8.8:53</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span><span class="string">:1053</span></span><br><span class="line">  <span class="attr">auto-detect-interface:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto-route:</span> <span class="literal">true</span> <span class="comment"># 根据需要开启</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="模拟访问过程"><a href="#模拟访问过程" class="headerlink" title="模拟访问过程"></a>模拟访问过程</h2><p>设备为透明代理用户</p>
<h3 id="访问国内网站（百度）"><a href="#访问国内网站（百度）" class="headerlink" title="访问国内网站（百度）"></a>访问国内网站（百度）</h3><ol>
<li>查<code>baidu.com</code>的域名，发送查询请求给DHCP下发的DNS（旁路由）。</li>
<li>mosdns查询国内公共DNS后，发现<code>baidu.com</code>是国内IP，直接返回此IP。</li>
<li>发送访问请求到<code>baidu.com</code>的真实IP，此IP不是局域网IP，将数据包发给网关（旁路由）。</li>
<li>旁路由收到数据包，检查本机路由表，此IP不属于TUN网段<code>198.18.0.0/16</code>，走默认路由即物理网卡（主路由）。<br>全程没有经过Clash，但流量会从旁路由饶一下，最终旁路由还是会把数据包原封不动（指网络层以上）交给主路由。</li>
</ol>
<h3 id="访问海外网站（Google）"><a href="#访问海外网站（Google）" class="headerlink" title="访问海外网站（Google）"></a>访问海外网站（Google）</h3><ol>
<li>查<code>google.com</code>的域名，发送查询请求给DHCP下发的DNS（旁路由）。</li>
<li>mosdns查询国内公共DNS后，发现<code>google.com</code>是双栈海外IP。</li>
<li>mosdns查询Clash的DNS，获得Clash的fake-ip，IP属于TUN网段<code>198.18.0.0/16</code>。</li>
<li>Google域名是双栈IP，mosdns设置了ipv4_prefer，会忽略IPv6结果。避免系统拿到IPv6走物理网卡出。</li>
<li>发送访问请求到<code>google.com</code>的fake-ip，此IP不是局域网IP，将数据包发给网关（旁路由）。</li>
<li>旁路由收到数据包，检查本机路由表，此IP属于TUN网段<code>198.18.0.0/16</code>，走Clash的TUN网卡。</li>
<li>Clash根据配置的规则，选择一个合适的代理或直连，发送数据包。<br>流量经过clash，会经过设备CPU处理，代理也有加解密的部分，会比直连的转发性能差。</li>
</ol>
<h1 id="方案二（主路由为进阶版或类linux系统）"><a href="#方案二（主路由为进阶版或类linux系统）" class="headerlink" title="方案二（主路由为进阶版或类linux系统）"></a>方案二（主路由为进阶版或类linux系统）</h1><h2 id="主路由配置-1"><a href="#主路由配置-1" class="headerlink" title="主路由配置"></a>主路由配置</h2><p>添加TUN网段<code>198.18.0.0/16</code>的静态路由，让TUN网段的流量走旁路由。<br>对于不适用域名解析，直接使用IP联网的应用，如：Telegram<sup id="fnref:8"><a href="#fn:8" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Telegram CIDR](https://core.telegram.org/resources/cidr.txt)">[8]</span></a></sup>，需要进一步添加静态路由到旁路由。<br>DHCP下发的DNS根据需要，分两种情况：</p>
<ul>
<li>正常上网用户：运营商下发的DNS</li>
<li>走透明代理用户：旁路由的IP<br>实际上就是将旁路由的DHCP功能放到主路由上，旁路由只做透明代理。</li>
</ul>
<h2 id="旁路由配置-1"><a href="#旁路由配置-1" class="headerlink" title="旁路由配置"></a>旁路由配置</h2><p>mosdns和Clash部分跟方案一一样。<br>因为主路由能够控制DHCP了，所以旁路由不在需要是DHCP服务器了。<br>对于不适用域名解析，直接使用IP联网的应用，如：Telegram，需要打开<code>auto-route</code>，让旁路由自动添加默认路由到Clash的TUN网卡。</p>
<h2 id="模拟访问过程-1"><a href="#模拟访问过程-1" class="headerlink" title="模拟访问过程"></a>模拟访问过程</h2><p>设备为透明代理用户</p>
<h3 id="访问国内网站（百度）-1"><a href="#访问国内网站（百度）-1" class="headerlink" title="访问国内网站（百度）"></a>访问国内网站（百度）</h3><p>与方案一不同的地方是，拿到国内IP会走主路由直接出去，进一步减轻了旁路有的负担。<br>唯有拿到TUN网段<code>198.18.0.0/16</code>的IP才会走旁路由。（因为设置了静态路由）<br>全程没有旁路由，跟正常上网一模一样，缺点是依赖旁路有的DNS，即mosdns。<br>如果旁路由挂了，域名解析不了。</p>
<h3 id="访问海外网站（Google）-1"><a href="#访问海外网站（Google）-1" class="headerlink" title="访问海外网站（Google）"></a>访问海外网站（Google）</h3><p>与方案一不同的地方是，数据包会先到主路由，做一次路由选择，再到旁路由。</p>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="systemd配置"><a href="#systemd配置" class="headerlink" title="systemd配置"></a>systemd配置</h2><h3 id="Clash-1"><a href="#Clash-1" class="headerlink" title="Clash"></a>Clash</h3><figure class="highlight ini"><figcaption><span>/etc/systemd/system/clash.service</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Clash daemon, A rule-based proxy in Go.</span><br><span class="line"><span class="attr">After</span>=network-<span class="literal">on</span>line.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=simple</span><br><span class="line"><span class="attr">Restart</span>=always</span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/bin/clash -d /etc/clash</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure>

<h3 id="mosdns"><a href="#mosdns" class="headerlink" title="mosdns"></a>mosdns</h3><figure class="highlight ini"><figcaption><span>/etc/systemd/system/mosdns.service</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=MosDNS DNS Server</span><br><span class="line"><span class="attr">After</span>=network-<span class="literal">on</span>line.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=simple</span><br><span class="line"><span class="attr">Restart</span>=always</span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/bin/mosdns start -c /etc/mosdns/config.yaml -d /etc/mosdns</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure>

<h2 id="自动更新订阅并下载分流规则"><a href="#自动更新订阅并下载分流规则" class="headerlink" title="自动更新订阅并下载分流规则"></a>自动更新订阅并下载分流规则</h2><figure class="highlight bash"><figcaption><span>/root/sub.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">mv</span> /etc/clash/config.yaml /etc/clash/config.yaml.bak</span><br><span class="line">wget <span class="string">&quot;订阅地址&quot;</span> -O /etc/clash/config.yaml</span><br><span class="line">wget <span class="string">&quot;https://ispip.clang.cn/all_cn.txt&quot;</span> -O /etc/mosdns/all_cn.txt</span><br><span class="line">wget <span class="string">&quot;https://ispip.clang.cn/all_cn_ipv6.txt&quot;</span> -O /etc/mosdns/all_cn_ipv6.txt</span><br><span class="line">systemctl restart clash</span><br><span class="line">systemctl restart mosdns</span><br></pre></td></tr></table></figure>

<h2 id="查看Clash中WARN级别漏网之鱼日志"><a href="#查看Clash中WARN级别漏网之鱼日志" class="headerlink" title="查看Clash中WARN级别漏网之鱼日志"></a>查看Clash中WARN级别漏网之鱼日志</h2><p>当设置漏网之鱼为直连时，可能会有一些域名无法正常解析，这时候就需要查看日志，找到这些域名，然后添加到自定义代理域名中。</p>
<figure class="highlight bash"><figcaption><span>/root/log.sh</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">journalctl -u clash &gt; /tmp/clash.log</span><br><span class="line">grep -P <span class="string">&#x27;WRN(?=.*漏网之鱼)&#x27;</span> /tmp/clash.log | less</span><br></pre></td></tr></table></figure>

<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol#Options">DHCP Options</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.haoyizebo.com/posts/d461b93f/">dnsmasq 按需分配分配网关与 DNS（旁路由）</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://github.com/IrineSistiana/mosdns">mosdns 项目</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://github.com/IrineSistiana/mosdns/discussions/624">mosdnsV5配置分享</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://github.com/Dreamacro/clash">Clash 项目</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">6.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://ispip.clang.cn/">每日更新的电信IP段,联通IP段,移动IP段,铁通IP段,教育网IP段,长城宽带/鹏博士IP段,ISP IP</a><a href="#fnref:6" rev="footnote"> ↩</a></span></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">7.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/lancidr.txt">本地网段</a><a href="#fnref:7" rev="footnote"> ↩</a></span></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">8.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://core.telegram.org/resources/cidr.txt">Telegram CIDR</a><a href="#fnref:8" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>抽签程序</title>
    <url>/2013/%E6%8A%BD%E7%AD%BE%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>最新版本：2.5<br>Version 2.5(2017届)下载地址：<a href="http://pan.baidu.com/s/1gdFBcmJ">http://pan.baidu.com/s/1gdFBcmJ</a><br>Version 2.3(2014届)下载地址：<a href="http://pan.baidu.com/s/1gdq85F1">http://pan.baidu.com/s/1gdq85F1</a><br>Version 2.3(2015届)下载地址：<a href="http://pan.baidu.com/s/1kTIkIFl">http://pan.baidu.com/s/1kTIkIFl</a></p>
]]></content>
      <categories>
        <category>易语言</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>摘抄</title>
    <url>/2016/%E6%91%98%E6%8A%84/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="未分类"><a href="#未分类" class="headerlink" title="未分类"></a>未分类</h1><ol>
<li><p>社会最大的悲剧，不是坏人嚣张，而是好人的沉默。 ——1963马丁路德金</p>
</li>
<li><p>电影的力量在于动人，卡通的力量在于纯真，宫崎骏掌握了这些力量，他取得了理所当然的胜利。（新闻晚报评）</p>
</li>
<li><p>总之，被美好事物吸引是无罪而美丽的，但是当这种想法升级为占有欲和社会规则结合到一起可能就产生了破坏性。 </p>
</li>
<li><p>希腊中的神都像人类，也会有各种各样的缺点，因为是神，能力放大，缺点也会放大，有教育意义吧。</p>
</li>
</ol>
<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><h2 id="对联"><a href="#对联" class="headerlink" title="对联"></a>对联</h2><ol>
<li>映日门庭增气象 接天梁栋起云烟（乔迁新居）</li>
<li>双飞却是关雎鸟 并蒂常开连理枝（新婚） </li>
<li>凤律新调三阳开泰 鸿犹丕振四季亨通（开张）</li>
<li>明月一池莲 钓渭丝纶日月长 （祝寿）</li>
<li>完来大璞眼天地 留得和风惠子孙 （挽联）</li>
<li>白雪映红梅春回大地 凯歌偕丽日福满人间 （春联）</li>
<li>春夏秋冬一岁川流不息 东西南北四方宾至如归 （旅店)</li>
<li>巧手度处天衣无缝 匠心裁来长短合身 （裁缝店）</li>
<li>虽是毫末技艺 却是顶上功夫 （理发店）</li>
<li>满屋诗书添丽景 盈门桃李笑春风 （老师）</li>
</ol>
]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>收集</tag>
      </tags>
  </entry>
  <entry>
    <title>无题noname</title>
    <url>/2016/%E6%97%A0%E9%A2%98noname/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><h2 id="给定一个N，求出所有1到N之间的x，使得x-2-1-mod-N-。Input"><a href="#给定一个N，求出所有1到N之间的x，使得x-2-1-mod-N-。Input" class="headerlink" title="给定一个N，求出所有1到N之间的x，使得x^2&#x3D;1(mod N)。Input"></a>给定一个N，求出所有1到N之间的x，使得x^2&#x3D;1(mod N)。<br>Input</h2><h2 id="一行一个正整数，没有多余字符，表示N。Output"><a href="#一行一个正整数，没有多余字符，表示N。Output" class="headerlink" title="一行一个正整数，没有多余字符，表示N。Output"></a>一行一个正整数，没有多余字符，表示N。<br>Output</h2><h2 id="从小到大输出所有的x，一行一个。Sample-Input"><a href="#从小到大输出所有的x，一行一个。Sample-Input" class="headerlink" title="从小到大输出所有的x，一行一个。Sample Input"></a>从小到大输出所有的x，一行一个。<br>Sample Input</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">6</span><br></pre></td></tr></table></figure>
<h2 id="Data-Constraint"><a href="#Data-Constraint" class="headerlink" title="Data Constraint"></a>Data Constraint</h2><p>【数据范围】 　<br>    30%的数据N&lt;&#x3D;20000；<br>    100%的数据N&lt;&#x3D;2000000000。</p>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><h2 id="这道题有两种解题方法-第一种方法-扩展GCD-x-2-equiv1-mod-N-longleftrightarrow-x-2-1-N-T-longleftrightarrow-x-1-x-1-a-b-x0-y0-将N分解为ab，-T-in-N-将T分解为x0-y0-这样可以得到两个等式。-left-begin-aligned-x-1-a-x0-quad①-x-1-b-y0-quad②-end-aligned-right-a-x0-b-y0-2-qquad-③-①-②-下面是扩展GCD的一些知识③可以用扩展GCD解得一组特解x0-y0，然后能通过特解的出一般解。一般解为-left-begin-aligned-x0-frac-b-p-k-quad①-y0-frac-a-p-k-quad②-end-aligned-right-扩展GCD-a-x-b-y-d-解得一组整数解x-y的充分必要条件是gcd（a-b）-d。所以我们可以通过解出x，y，从而计算x的值-2-x-a-x0-b-y0-qquad-④-①-②-x-frac-a-x0-b-y0-2-将-x-化为一般解，即：-x-frac-a-x0-frac-b-p-k-b-y0-frac-a-p-k-2-因为-1-leq-x-leq-N-所以可以得到k的取值范围最后所求的x可化为：-x-frac-a-x0-b-y0-2-frac-a-b-k-p-详情代码1-第二种方法-中国剩余定理-详情请参见References列表中的链接详情代码2Code"><a href="#这道题有两种解题方法-第一种方法-扩展GCD-x-2-equiv1-mod-N-longleftrightarrow-x-2-1-N-T-longleftrightarrow-x-1-x-1-a-b-x0-y0-将N分解为ab，-T-in-N-将T分解为x0-y0-这样可以得到两个等式。-left-begin-aligned-x-1-a-x0-quad①-x-1-b-y0-quad②-end-aligned-right-a-x0-b-y0-2-qquad-③-①-②-下面是扩展GCD的一些知识③可以用扩展GCD解得一组特解x0-y0，然后能通过特解的出一般解。一般解为-left-begin-aligned-x0-frac-b-p-k-quad①-y0-frac-a-p-k-quad②-end-aligned-right-扩展GCD-a-x-b-y-d-解得一组整数解x-y的充分必要条件是gcd（a-b）-d。所以我们可以通过解出x，y，从而计算x的值-2-x-a-x0-b-y0-qquad-④-①-②-x-frac-a-x0-b-y0-2-将-x-化为一般解，即：-x-frac-a-x0-frac-b-p-k-b-y0-frac-a-p-k-2-因为-1-leq-x-leq-N-所以可以得到k的取值范围最后所求的x可化为：-x-frac-a-x0-b-y0-2-frac-a-b-k-p-详情代码1-第二种方法-中国剩余定理-详情请参见References列表中的链接详情代码2Code" class="headerlink" title="这道题有两种解题方法***第一种方法(扩展GCD)$x^2\equiv1 (mod N)\longleftrightarrow x^2-1&#x3D;N*T\longleftrightarrow (x+1)(x-1) &#x3D; a*b*x0*(-y0)$将N分解为ab，$T\in N$ 将T分解为x0(-y0),这样可以得到两个等式。$$ \left\{\begin{aligned}x+1 &#x3D; a*x0 \quad①\x-1 &#x3D; b*(-y0) \quad②\\end{aligned}\right.$$$a*x0+b*y0&#x3D;2 \qquad ③&#x3D;①-②$***下面是扩展GCD的一些知识③可以用扩展GCD解得一组特解x0,y0，然后能通过特解的出一般解。一般解为$$ \left\{\begin{aligned}x0 + \frac {b}{p}*k \quad①\y0 - \frac {a}{p}*k \quad②\\end{aligned}\right.$$***扩展GCD$a*x+b*y&#x3D;d$解得一组整数解x,y的充分必要条件是gcd（a,b）| d。所以我们可以通过解出x，y，从而计算x的值$2*x &#x3D; a*x0-b*y0\qquad ④&#x3D;①+②$$x &#x3D; \frac {a*x0-b*y0}{2}$将$x$化为一般解，即：$x &#x3D; \frac {a*(x0 + \frac {b}{p}*k)-b*(y0- \frac {a}{p}*k)}{2}$因为 $1\leq x\leq N$所以可以得到k的取值范围最后所求的x可化为：$x &#x3D; \frac {a*x0-b*y0}{2}+\frac {a*b*k}{p}$详情代码1***第二种方法(中国剩余定理)详情请参见References列表中的链接详情代码2Code"></a>这道题有两种解题方法<br>***<br>第一种方法(扩展GCD)<br>$x^2\equiv1 (mod N)\longleftrightarrow x^2-1&#x3D;N*T\longleftrightarrow (x+1)(x-1) &#x3D; a*b*x0*(-y0)$<br>将N分解为a<em>b，$T\in N$ 将T分解为x0</em>(-y0),这样可以得到两个等式。<br>$$ \left\{<br>\begin{aligned}<br>x+1 &#x3D; a*x0 \quad①\<br>x-1 &#x3D; b*(-y0) \quad②\<br>\end{aligned}<br>\right.<br>$$<br>$a*x0+b*y0&#x3D;2 \qquad ③&#x3D;①-②$<br>***<br>下面是扩展GCD的一些知识<br>③可以用扩展GCD解得一组特解x0,y0，然后能通过特解的出一般解。<br>一般解为<br>$$ \left\{<br>\begin{aligned}<br>x0 + \frac {b}{p}*k \quad①\<br>y0 - \frac {a}{p}*k \quad②\<br>\end{aligned}<br>\right.<br>$$<br>***<br>扩展GCD$a*x+b*y&#x3D;d$解得一组整数解x,y的充分必要条件是gcd（a,b）| d。<br>所以我们可以通过解出x，y，从而计算x的值<br>$2*x &#x3D; a*x0-b*y0\qquad ④&#x3D;①+②$<br>$x &#x3D; \frac {a*x0-b*y0}{2}$<br>将$x$化为一般解，即：<br>$x &#x3D; \frac {a*(x0 + \frac {b}{p}*k)-b*(y0- \frac {a}{p}*k)}{2}$<br>因为 $1\leq x\leq N$<br>所以可以得到k的取值范围<br><img data-src="/images/noname/0.png" alt="取值范围"><br>最后所求的x可化为：<br>$x &#x3D; \frac {a*x0-b*y0}{2}+\frac {a*b*k}{p}$<br>详情代码1<br>***<br>第二种方法(中国剩余定理)<br>详情请参见References列表中的链接<br>详情代码2<br>Code</h2><p>代码1</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line">LL n,k,tmp,x3,y3,a,b,p;</span><br><span class="line"><span class="type">int</span> ans[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">gcd</span><span class="params">(LL a,LL b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!b)</span><br><span class="line">	&#123;</span><br><span class="line">		x3 = <span class="number">2</span>/a;</span><br><span class="line">		y3 = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span> a;</span><br><span class="line">	&#125;</span><br><span class="line">	LL ret = <span class="built_in">gcd</span>(b,a%b),t = x3;</span><br><span class="line">	x3 = y3;</span><br><span class="line">	y3 = t-a/b*y3;</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">(LL a,LL b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	p = <span class="built_in">gcd</span>(a,b);</span><br><span class="line">	<span class="keyword">if</span> (<span class="number">2</span>%p!=<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">	LL x = a*x3-b*y3;</span><br><span class="line">	<span class="keyword">if</span> (x%<span class="number">2</span>==<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">	LL t = <span class="number">2</span>*a*b/p;</span><br><span class="line">	<span class="type">double</span> kmin = <span class="number">1.0</span>*(<span class="number">2</span>-a*x3+b*y3)/t,</span><br><span class="line">	       kmax = <span class="number">1.0</span>*(<span class="number">2</span>*n-a*x3+b*y3)/t;</span><br><span class="line">       	<span class="keyword">for</span> (<span class="type">int</span> k=<span class="built_in">ceil</span>(kmin);k&lt;=<span class="built_in">floor</span>(kmax);k ++)</span><br><span class="line">	&#123;</span><br><span class="line">		ans[++ ans[<span class="number">0</span>]] = x/<span class="number">2</span>+a*b*k/p;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//freopen(&quot;1460.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">	<span class="comment">//freopen(&quot;1460.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">if</span> (n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">sqrt</span>(n);i ++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (n%i==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			a = i;b = n/i;</span><br><span class="line">			<span class="built_in">work</span>(a,b);<span class="built_in">work</span>(b,a);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(ans<span class="number">+1</span>,ans<span class="number">+1</span>+ans[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">2</span>;i&lt;=ans[<span class="number">0</span>];i ++)</span><br><span class="line">		<span class="keyword">if</span> (ans[i]!=ans[i<span class="number">-1</span>]) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>代码2</p>
<figure class="highlight pascal"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n,m,t,t1,t2,tt,tt2,i,j:longint;</span><br><span class="line">    mo:int64;</span><br><span class="line">    b,d,g,mm:<span class="keyword">array</span>[<span class="number">0</span>..<span class="number">10001</span>] <span class="keyword">of</span> int64;</span><br><span class="line">    c:<span class="keyword">array</span>[<span class="number">0</span>..<span class="number">10001</span>,<span class="number">0</span>..<span class="number">4</span>] <span class="keyword">of</span> int64;</span><br><span class="line">    p:<span class="keyword">array</span>[<span class="number">0</span>..<span class="number">100001</span>] <span class="keyword">of</span> boolean;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exgcd</span><span class="params">(x,y:longint;<span class="keyword">var</span> tx,ty:longint)</span>:</span>longint;</span><br><span class="line"><span class="keyword">var</span> t1:int64;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">if</span> y=<span class="number">0</span> <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">		tx:=<span class="number">1</span>;ty:=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">exit</span>(x);</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line">	exgcd:=exgcd(y,x <span class="keyword">mod</span> y,tx,ty);</span><br><span class="line">	t1:=tx;tx:=ty;ty:=t1-(x <span class="keyword">div</span> y)*ty</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">qsort</span><span class="params">(x,y:longint)</span>;</span></span><br><span class="line"><span class="keyword">var</span> i,j,k:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	i:=x;j:=y;</span><br><span class="line">	k:=g[(i+j) <span class="keyword">div</span> <span class="number">2</span>];</span><br><span class="line">	<span class="keyword">while</span> i&lt;=j <span class="keyword">do</span> <span class="keyword">begin</span></span><br><span class="line">		<span class="keyword">while</span> g[i]&lt;k <span class="keyword">do</span> inc(i);</span><br><span class="line">		<span class="keyword">while</span> g[j]&gt;k <span class="keyword">do</span> dec(j);</span><br><span class="line">		<span class="keyword">if</span> i&lt;=j <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">			g[<span class="number">0</span>]:=g[i];g[i]:=g[j];g[j]:=g[<span class="number">0</span>];</span><br><span class="line">			inc(i);dec(j);</span><br><span class="line">		<span class="keyword">end</span>;</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line">	<span class="keyword">if</span> i&lt;y <span class="keyword">then</span> qsort(i,y);</span><br><span class="line">	<span class="keyword">if</span> x&lt;j <span class="keyword">then</span> qsort(x,j);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">sy</span>;</span></span><br><span class="line"><span class="keyword">var</span> i:longint;</span><br><span class="line">    ans:int64;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	ans:=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> tt <span class="keyword">do</span> <span class="keyword">begin</span></span><br><span class="line">		exgcd(mm[i],b[i],t1,t2);</span><br><span class="line">		ans:=(ans+((d[i]*t1) <span class="keyword">mod</span> mo*mm[i]) <span class="keyword">mod</span> mo+mo*<span class="number">10</span>) <span class="keyword">mod</span> mo;</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line">	inc(tt2);</span><br><span class="line">	g[tt2]:=ans;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">dfs</span><span class="params">(x:longint)</span>;</span></span><br><span class="line"><span class="keyword">var</span> i:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">if</span> x=tt+<span class="number">1</span> <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">		sy;</span><br><span class="line">		<span class="keyword">exit</span>;</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line">	<span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> c[x,<span class="number">0</span>] <span class="keyword">do</span> <span class="keyword">begin</span></span><br><span class="line">		d[x]:=c[x,i];</span><br><span class="line">		dfs(x+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	readln(n);</span><br><span class="line">	mo:=n;</span><br><span class="line">	t:=trunc(sqrt(n));</span><br><span class="line">	tt:=<span class="number">0</span>;</span><br><span class="line">	m:=n;</span><br><span class="line">	<span class="keyword">for</span> i:=<span class="number">2</span> <span class="keyword">to</span> t <span class="keyword">do</span></span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> p[i] <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">			<span class="keyword">if</span> m <span class="keyword">mod</span> i=<span class="number">0</span> <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">				inc(tt);</span><br><span class="line">				t2:=i;</span><br><span class="line">				b[tt]:=<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">while</span> m <span class="keyword">mod</span> i=<span class="number">0</span> <span class="keyword">do</span> <span class="keyword">begin</span></span><br><span class="line">					m:=m <span class="keyword">div</span> i;</span><br><span class="line">					b[tt]:=b[tt]*t2;</span><br><span class="line">				<span class="keyword">end</span>;</span><br><span class="line">			<span class="keyword">end</span>;</span><br><span class="line">			j:=i;</span><br><span class="line">			<span class="keyword">while</span> j&lt;=t <span class="keyword">do</span> <span class="keyword">begin</span></span><br><span class="line">				p[j]:=true;</span><br><span class="line">				j:=j+i;</span><br><span class="line">			<span class="keyword">end</span>;</span><br><span class="line">		<span class="keyword">end</span>;</span><br><span class="line">	<span class="keyword">if</span> m&lt;&gt;<span class="number">1</span> <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">		inc(tt);</span><br><span class="line">		b[tt]:=m;</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line">	<span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> tt <span class="keyword">do</span> <span class="keyword">begin</span></span><br><span class="line">		<span class="keyword">if</span> b[i] <span class="keyword">mod</span> <span class="number">2</span>=<span class="number">0</span> <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">			<span class="keyword">if</span> b[i]=<span class="number">2</span> <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">				c[i,<span class="number">0</span>]:=<span class="number">1</span>;</span><br><span class="line">				c[i,<span class="number">1</span>]:=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> b[i]=<span class="number">4</span> <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">				c[i,<span class="number">0</span>]:=<span class="number">2</span>;</span><br><span class="line">				c[i,<span class="number">1</span>]:=<span class="number">1</span>;</span><br><span class="line">				c[i,<span class="number">2</span>]:=<span class="number">3</span>;</span><br><span class="line">			<span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">				c[i,<span class="number">0</span>]:=<span class="number">4</span>;</span><br><span class="line">				c[i,<span class="number">1</span>]:=<span class="number">1</span>;</span><br><span class="line">				c[i,<span class="number">2</span>]:=b[i] <span class="keyword">div</span> <span class="number">2</span>-<span class="number">1</span>;</span><br><span class="line">				c[i,<span class="number">3</span>]:=b[i] <span class="keyword">div</span> <span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">				c[i,<span class="number">4</span>]:=b[i]-<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">end</span>;</span><br><span class="line">		<span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">			c[i,<span class="number">0</span>]:=<span class="number">2</span>;</span><br><span class="line">			c[i,<span class="number">1</span>]:=<span class="number">1</span>;</span><br><span class="line">			c[i,<span class="number">2</span>]:=b[i]-<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">end</span>;</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line">	<span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> tt <span class="keyword">do</span> mm[i]:=n <span class="keyword">div</span> b[i];</span><br><span class="line">	dfs(<span class="number">1</span>);</span><br><span class="line">	qsort(<span class="number">1</span>,tt2);</span><br><span class="line">	<span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> tt2 <span class="keyword">do</span> writeln(g[i]);</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>代码2来源lzy<br><a href="http://www.cnblogs.com/inpeace7/archive/2012/03/17/2403283.html">算法导论—–数论—–计算x^2&#x3D;1(mod n) 在区间[1,n-1]的解</a><br><a href="http://baike.baidu.com/link?url=kS4zX4FdjG9v8oFdMowWSI24Dfck0mlqT_s7VmFZpXJGGuRAJnKq4i1VleGHHNiRFxeIVtGMgN_3AfBrVINAsUnxs4wAEJTRjWq9yEldfYFQjqUSsBd78Z23BAW5tfbB7qF48FPxQuezJkjl1cn3LTnvZoeR-hC58J6nIFL01jTxxWKPte8Pg_h4d_uVwa5y8T8eTTmk7T0YW-GyBHAcz_">中国剩余定理</a><br><a href="http://baike.baidu.com/link?url=wNmpz64aCdtSnjQ8D2oD-kXpCmR8ijMOz7lgdNzOflp6PQ-0wPChMUa2TKsruvqo-U0T0xu75nHaClZfHUZ2OK">扩展GCD</a></p>
]]></content>
      <categories>
        <category>信息学</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>更新vmware esxi ssl证书</title>
    <url>/2020/%E6%9B%B4%E6%96%B0vmware-esxi-ssl%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
      <categories>
        <category>互联网</category>
        <category>转载</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>link</tag>
      </tags>
  </entry>
  <entry>
    <title>每日日报</title>
    <url>/2020/%E6%AF%8F%E6%97%A5%E6%97%A5%E6%8A%A5/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="6-25"><a href="#6-25" class="headerlink" title="6.25"></a>6.25</h1><h2 id="今日学习"><a href="#今日学习" class="headerlink" title="今日学习"></a>今日学习</h2><h3 id="【第十八讲】IP基础快速入门-BGP基础-基本原理"><a href="#【第十八讲】IP基础快速入门-BGP基础-基本原理" class="headerlink" title="【第十八讲】IP基础快速入门 - BGP基础 - 基本原理"></a>【第十八讲】IP基础快速入门 - BGP基础 - 基本原理</h3><p><a href="https://www.bilibili.com/video/BV1ut411i7ez">B站视频</a>前1小时</p>
<ul>
<li>AS的概念</li>
<li>BGP路径矢量特征</li>
<li>BGP协议特征</li>
<li>BGP的邻居状态机</li>
<li>IBGP与EBGP</li>
</ul>
<h2 id="留存疑问"><a href="#留存疑问" class="headerlink" title="留存疑问"></a>留存疑问</h2><h1 id="6-28"><a href="#6-28" class="headerlink" title="6.28"></a>6.28</h1><h2 id="今日学习-1"><a href="#今日学习-1" class="headerlink" title="今日学习"></a>今日学习</h2><h3 id="维基百科了解BGP相关知识"><a href="#维基百科了解BGP相关知识" class="headerlink" title="维基百科了解BGP相关知识"></a>维基百科了解BGP相关知识</h3><h3 id="BGP中IBGP和EBGP的区别和联系"><a href="#BGP中IBGP和EBGP的区别和联系" class="headerlink" title="BGP中IBGP和EBGP的区别和联系"></a><a href="https://blog.csdn.net/zhouwei1221q/article/details/45420223">BGP中IBGP和EBGP的区别和联系</a></h3><h3 id="路由黑洞与黑洞路由简介"><a href="#路由黑洞与黑洞路由简介" class="headerlink" title="路由黑洞与黑洞路由简介"></a><a href="https://blog.csdn.net/wangjianno2/article/details/52074148">路由黑洞与黑洞路由简介</a></h3><h3 id="路由汇聚"><a href="#路由汇聚" class="headerlink" title="路由汇聚"></a><a href="https://baike.baidu.com/item/%E8%B7%AF%E7%94%B1%E6%B1%87%E8%81%9A/4430343?fromtitle=%E8%B7%AF%E7%94%B1%E6%B1%87%E6%80%BB&fromid=7996986">路由汇聚</a></h3><h2 id="留存疑问-1"><a href="#留存疑问-1" class="headerlink" title="留存疑问"></a>留存疑问</h2><h1 id="6-29"><a href="#6-29" class="headerlink" title="6.29"></a>6.29</h1><h2 id="今日学习-2"><a href="#今日学习-2" class="headerlink" title="今日学习"></a>今日学习</h2><h3 id="路由反射器"><a href="#路由反射器" class="headerlink" title="路由反射器"></a><a href="https://www.youtube.com/watch?v=aXS6CSYgbYw">路由反射器</a></h3><ul>
<li>路由反射规则(3条规则)<br>Original_ID、Cluster_list</li>
</ul>
<h2 id="留存疑问-2"><a href="#留存疑问-2" class="headerlink" title="留存疑问"></a>留存疑问</h2><h1 id="6-30"><a href="#6-30" class="headerlink" title="6.30"></a>6.30</h1><h2 id="今日学习-3"><a href="#今日学习-3" class="headerlink" title="今日学习"></a>今日学习</h2><h3 id="路由联盟"><a href="#路由联盟" class="headerlink" title="路由联盟"></a><a href="https://www.youtube.com/watch?v=-PRvLmd5MRY">路由联盟</a></h3><h3 id="试运行CentOS-rr"><a href="#试运行CentOS-rr" class="headerlink" title="试运行CentOS rr"></a>试运行CentOS rr</h3><h2 id="留存疑问-3"><a href="#留存疑问-3" class="headerlink" title="留存疑问"></a>留存疑问</h2><h1 id="7-1"><a href="#7-1" class="headerlink" title="7.1"></a>7.1</h1><h2 id="今日学习-4"><a href="#今日学习-4" class="headerlink" title="今日学习"></a>今日学习</h2><h3 id="ACM暑期集训安排"><a href="#ACM暑期集训安排" class="headerlink" title="ACM暑期集训安排"></a>ACM暑期集训安排</h3><h2 id="留存疑问-4"><a href="#留存疑问-4" class="headerlink" title="留存疑问"></a>留存疑问</h2>]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>求和</title>
    <url>/2016/%E6%B1%82%E5%92%8C/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><h2 id="若两个数的最大公约数为1，则这两个数互质。现在给出一个正整数N（1"><a href="#若两个数的最大公约数为1，则这两个数互质。现在给出一个正整数N（1" class="headerlink" title="若两个数的最大公约数为1，则这两个数互质。现在给出一个正整数N（1&lt;&#x3D;2^31-1)，你的任务是求出1~N中与N互质的数的总和。Input"></a>若两个数的最大公约数为1，则这两个数互质。现在给出一个正整数N（1&lt;&#x3D;2^31-1)，你的任务是求出1~N中与N互质的数的总和。<br>Input</h2><p>一个整数N</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>一个整数sum，表示1~N中与N互质的数的总和。</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure>

<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">20</span><br></pre></td></tr></table></figure>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>这道题有两种解题方法</p>
<hr>
<p>第一种方法（数论）<br>结论:$ans&#x3D;N*\Phi(N)&#x2F;2$ </p>
<p>证明:<br>if gcd(n,i)&#x3D;1 then gcd(n,n-i)&#x3D;1 (1&lt;&#x3D;i&lt;&#x3D;n)</p>
<p>反证法：</p>
<pre><code>    如果存在K!=1使gcd(n,n-i)=k,那么(n-i)%k==0

    而n%k=0

    那么必须保证i%k=0

    k是n的因子,如果i%k=0那么 gcd(n,i)=k,矛盾出现;

    于是问题变的非常简单： ANS=N*phi(N)/2

    i,n-i总是成对出现，并且和是n

	于是可能就有人问了，如果存在n-i=i那不是重复计算？

    答案是不会

    因为:

            n=2*i-&gt;i=n/2
</code></pre>
<ol>
<li><p>如果n是奇数，那么n!&#x3D;2*i,自然也不存在 n-i&#x3D;i和重复计算之说</p>
</li>
<li><p>如果n是偶数,n&#x3D;2*i成立,gcd(n,n&#x2F;2)必然为n的一个因子,这个因子为1当且仅当n&#x3D;&#x3D;2</p>
</li>
<li><p>于是对于n&gt;2的偶数，绝对不存在gcd(n,n&#x2F;2)&#x3D;1所以更别说什么重复计算了</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对于n==2</span><br><span class="line"></span><br><span class="line">ans=2*1/2=1，正好也满足</span><br></pre></td></tr></table></figure>

<p>所以得到最终公式：$ans&#x3D;N*\Phi(N)&#x2F;2$<br>时间复杂度$O(\sqrt {N})$<br>详见代码1</p>
<hr>
<p>第二种方法(容斥)</p>
<p>我们可以先求1..N中与N不互质的数的和。即$GCD(N,x)\not&#x3D;1$</p>
<p>$N &#x3D; p1^{r1}*p2^{r2}*p3^{r3}*…*pn^{rn}$</p>
<p>时间复杂度$O(\sqrt {N})$<br>我们尝试构造一个非法的数M，使得$M | N$，由N的若干个质因数相乘得到。</p>
<p>$M &#x3D; p1*p2*…*pm$</p>
<p>枚举M的时间复杂度$O(2^n)$<br>对于奇数个质数相乘累加，对于偶数个质数相称累减。<br>这样得到一个不合法的最小数M,我们可以设</p>
<p>$Q&#x3D;M*K,(1&lt;&#x3D;k&lt;&#x3D;N&#x2F;M)$</p>
<p>得到一些列不合法的数Q,将他们累加起来，即</p>
<p>$\sum_{K&#x3D;1}^{\frac{N}{M}}M*K &#x3D; M*\frac{(\frac{N}{M}+1)*\frac{N}{M}}{2}$</p>
<p>最后的时间复杂度即$O(\sqrt {N}+2^n)$,n很小最大只有10。</p>
<h2 id="详见代码2-Code"><a href="#详见代码2-Code" class="headerlink" title="详见代码2***Code"></a>详见代码2<br>***<br>Code</h2><p>代码1:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line">LL ans;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">phi</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LL ret = n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="built_in">sqrt</span>(n);i ++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (n%i==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			ret = ret/i*(i<span class="number">-1</span>);</span><br><span class="line">			<span class="keyword">while</span> (n%i==<span class="number">0</span>) n /= i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (n&gt;<span class="number">1</span>) ret = ret/n*(n<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//freopen(&quot;1164.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">	<span class="comment">//freopen(&quot;1164.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n)!=EOF)</span><br><span class="line">	&#123;</span><br><span class="line">		LL ans;</span><br><span class="line">		<span class="keyword">if</span> (n==<span class="number">1</span>) ans = <span class="number">1</span>; <span class="keyword">else</span> ans = <span class="built_in">phi</span>(n)*n/<span class="number">2</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>代码2:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">int</span> pri[<span class="number">100</span>];</span><br><span class="line">LL ans,n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prepar</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="built_in">sqrt</span>(n);i ++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (n%i==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			pri[++ pri[<span class="number">0</span>]] = i;</span><br><span class="line">			<span class="keyword">while</span> (n%i==<span class="number">0</span>) n /= i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (n&gt;<span class="number">1</span>) pri[++ pri[<span class="number">0</span>]] = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//freopen(&quot;data.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">	<span class="comment">//freopen(&quot;1164.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n)!=EOF)</span><br><span class="line">	&#123;</span><br><span class="line">		ans = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">prepar</span>(n);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> st=<span class="number">1</span>;st&lt;(<span class="number">1</span>&lt;&lt;pri[<span class="number">0</span>]);st ++) </span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> tot = <span class="number">0</span>,tmp = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;pri[<span class="number">0</span>];i ++)</span><br><span class="line">				<span class="keyword">if</span> (st &amp; (<span class="number">1</span>&lt;&lt;i)) tmp *= pri[i<span class="number">+1</span>],tot ++;</span><br><span class="line">			<span class="keyword">if</span> (tot&amp;<span class="number">1</span>)</span><br><span class="line">				ans += (<span class="number">1</span>+n/tmp)*(n/tmp)/<span class="number">2</span>*tmp;</span><br><span class="line">			<span class="keyword">else</span>	ans -= (<span class="number">1</span>+n/tmp)*(n/tmp)/<span class="number">2</span>*tmp;</span><br><span class="line">		&#125; </span><br><span class="line">		ans = (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)n*(n<span class="number">+1</span>)/<span class="number">2</span>-ans;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="http://blog.csdn.net/luyuncheng/article/details/8020359">hdu3501 给出一个N，求1..N中与N互质的数的和</a></p>
]]></content>
      <categories>
        <category>信息学</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>注册ChatGPT详细指南</title>
    <url>/2023/%E6%B3%A8%E5%86%8CChatGPT%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
      <categories>
        <category>互联网</category>
        <category>转载</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>link</tag>
      </tags>
  </entry>
  <entry>
    <title>用NODE加载crontab任务</title>
    <url>/2022/%E7%94%A8NODE%E5%8A%A0%E8%BD%BDcrontab%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>众所周知有诸多平台可以实现定时任务，像：阿里云函数，Github Actions，服务器中的crontab。<br>如果不希望定时任务过于分散，我们可以全部写在一个文件里，然后用nodejs来加载这个文件，统一调用，实现定时任务。<br>大多数定时任务改写成Node代码并不复杂！而且可以直接与我的Express项目放一起运行，节省资源开销。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>node-cron:是一个非常好用的定时任务库，可以很方便的实现定时任务。<br>使用起来非常简单，由如下代码所示：</p>
<figure class="highlight js"><figcaption><span>schedule.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cron = <span class="built_in">require</span>(<span class="string">&quot;node-cron&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="comment">//TODO 添加自动删除一个月前的日志</span></span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;schedule.js loaded&quot;</span>);</span><br><span class="line">	cron.<span class="title function_">schedule</span>(<span class="string">&quot;0 */8 * * *&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">		<span class="title function_">subcache</span>(app);</span><br><span class="line">	&#125;);</span><br><span class="line">	cron.<span class="title function_">schedule</span>(<span class="string">&quot;*/15 * * * *&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">		<span class="title function_">cf2dns</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>)=&gt;</span>&#123;</span><br><span class="line">			leancloud.<span class="title function_">add</span>(<span class="string">&quot;Schedule&quot;</span>, &#123;</span><br><span class="line">				<span class="attr">name</span>: <span class="string">&quot;cf2dns&quot;</span>,</span><br><span class="line">				result</span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>目前实现了<a href="https://github.com/ddgth/cf2dns"><code>cf2dns</code></a>的功能（仅支持DNSPOD），可以每15min自动更新DNSPOD的Cloudflare优选IP记录。<br>以下是实现操作DNSPOD上的域名解析记录的相关js代码。</p>
<figure class="highlight js"><figcaption><span>dnspod.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&quot;axios&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> token = process.<span class="property">env</span>.<span class="property">DNSPOD_TOKEN</span>;</span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&quot;querystring&quot;</span>);</span><br><span class="line"><span class="comment">// 创建实例时配置默认值</span></span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">	<span class="attr">baseURL</span>: <span class="string">&quot;https://dnsapi.cn&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">get_record</span>(<span class="params">domain, subdomain</span>) &#123;</span><br><span class="line">	<span class="keyword">const</span> api = <span class="string">&quot;/Record.List&quot;</span>;</span><br><span class="line">	<span class="keyword">const</span> data = querystring.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">		<span class="string">&quot;domain&quot;</span>: domain,</span><br><span class="line">		<span class="string">&quot;sub_domain&quot;</span>: subdomain,</span><br><span class="line">		<span class="string">&quot;login_token&quot;</span>: token,</span><br><span class="line">		<span class="string">&quot;format&quot;</span>: <span class="string">&quot;json&quot;</span></span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="keyword">const</span> res = <span class="keyword">await</span> instance.<span class="title function_">post</span>(api, data);</span><br><span class="line">	<span class="keyword">return</span> res.<span class="property">data</span>.<span class="property">records</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">update_record</span>(<span class="params">domain, record</span>) &#123;</span><br><span class="line">	<span class="keyword">const</span> &#123;id, line, type, name, value&#125; = record;</span><br><span class="line">	<span class="keyword">const</span> api = <span class="string">&quot;/Record.Modify&quot;</span>;</span><br><span class="line">	<span class="keyword">const</span> data = querystring.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">		domain,</span><br><span class="line">		<span class="attr">record_id</span>: id,</span><br><span class="line">		value,</span><br><span class="line">		<span class="attr">record_line</span>: line,</span><br><span class="line">		<span class="attr">record_type</span>: type,</span><br><span class="line">		<span class="attr">sub_domain</span>: name,</span><br><span class="line">		<span class="string">&quot;login_token&quot;</span>: token,</span><br><span class="line">		<span class="string">&quot;format&quot;</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="keyword">const</span> res = <span class="keyword">await</span> instance.<span class="title function_">post</span>(api, data);</span><br><span class="line">	<span class="keyword">return</span> res.<span class="property">data</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">add_record</span>(<span class="params">domain, record</span>) &#123;</span><br><span class="line">	<span class="keyword">const</span> &#123;line, type, name, value&#125; = record;</span><br><span class="line">	<span class="keyword">const</span> api = <span class="string">&quot;/Record.Create&quot;</span>;</span><br><span class="line">	<span class="keyword">const</span> data = querystring.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">		domain,</span><br><span class="line">		value,</span><br><span class="line">		<span class="attr">record_line</span>: line,</span><br><span class="line">		<span class="attr">record_type</span>: type,</span><br><span class="line">		<span class="attr">sub_domain</span>: name,</span><br><span class="line">		<span class="string">&quot;login_token&quot;</span>: token,</span><br><span class="line">		<span class="string">&quot;format&quot;</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="keyword">const</span> res = <span class="keyword">await</span> instance.<span class="title function_">post</span>(api, data);</span><br><span class="line">	<span class="keyword">return</span> res.<span class="property">data</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">del_record</span>(<span class="params">domain, record</span>) &#123;</span><br><span class="line">	<span class="keyword">const</span> &#123;id&#125; = record;</span><br><span class="line">	<span class="keyword">const</span> api = <span class="string">&quot;/Record.Remove&quot;</span>;</span><br><span class="line">	<span class="keyword">const</span> data = querystring.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">		domain,</span><br><span class="line">		<span class="attr">record_id</span>: id,</span><br><span class="line">		<span class="string">&quot;login_token&quot;</span>: token,</span><br><span class="line">		<span class="string">&quot;format&quot;</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="keyword">const</span> res = <span class="keyword">await</span> instance.<span class="title function_">post</span>(api, data);</span><br><span class="line">	<span class="keyword">return</span> res.<span class="property">data</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;get_record, update_record, add_record, del_record&#125;;</span><br></pre></td></tr></table></figure>
<p>定时更新gd.home999.cc域名的Cloudflare优选IP记录，方便快捷。<br>有时候可能希望调用某个URL，来定时执行某些操作，如果本身是Express应用，可以像写NODE测试用例一样，使用<code>chaiHttp</code>来直接调用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">subcache</span>(<span class="params">app</span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Running Cron Job：subcache&quot;</span>);</span><br><span class="line">	chai.<span class="title function_">use</span>(chaiHttp);</span><br><span class="line">	chai.<span class="title function_">request</span>(app)</span><br><span class="line">		.<span class="title function_">get</span>(<span class="string">&quot;/sub/cache&quot;</span>)</span><br><span class="line">		.<span class="title function_">end</span>(<span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">			leancloud.<span class="title function_">add</span>(<span class="string">&quot;Schedule&quot;</span>, &#123;</span><br><span class="line">				<span class="attr">name</span>: <span class="string">&quot;subcache&quot;</span>,</span><br><span class="line">				<span class="attr">result</span>: res.<span class="property">text</span></span><br><span class="line">			&#125;);</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">text</span>);</span><br><span class="line">		&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>综上，可以很方便的实现定时任务。总有些任务需要定时操作，像数据库定期备份，文件定期缓存等。<br>通过引入定时任务的js脚本，就能在运行Express应用的同时，自动执行定时任务。</p>
]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>用NODE解压缩爱奇艺弹幕文件</title>
    <url>/2022/%E7%94%A8NODE%E8%A7%A3%E5%8E%8B%E7%BC%A9%E7%88%B1%E5%A5%87%E8%89%BA%E5%BC%B9%E5%B9%95%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因为Django的效率问题，以及Python冷启动可能会比Node要慢。<br>所以把我现有的Django项目用Express重构，重构过程中遇到zlib解压缩爱奇艺弹幕数据的问题。<br>在网上能找到的Node解压爱奇艺数据的只有下面这篇博文。<br><a href="https://yiluyanxia.github.io/c03ee65c.html">《中国新说唱2020》不完全数据大屏</a><br>但可惜的是博主没有公开相关源码，所以我自己瞎试找到了解决方案。<br>核心代码如下：<br>稍微解释一下：promises是我用循环把用axios包装所有的弹幕地址，axios返回的是Promise。<br>再用Promise.all去异步请求所有的弹幕文件，就能得到二进制的压缩后的弹幕文件数据。<br>想要解压就要用到<code>pako.inflate(value, &#123;to: &quot;string&quot;&#125;)</code>。<br>我是参考了两篇stackoverflow上的回答，才找到了这个方法。具体请看文末的参考资料。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> api_url = <span class="string">`https://cmts.iqiyi.com/bullet/<span class="subst">$&#123;tvid.slice(-<span class="number">4</span>, -<span class="number">2</span>)&#125;</span>/<span class="subst">$&#123;tvid.slice(-<span class="number">2</span>)&#125;</span>/<span class="subst">$&#123;tvid&#125;</span>_300_<span class="subst">$&#123;i + <span class="number">1</span>&#125;</span>.z`</span>;</span><br><span class="line"><span class="keyword">const</span> params = &#123;</span><br><span class="line">  <span class="attr">rn</span>: <span class="string">&quot;0.0123456789123456&quot;</span>,</span><br><span class="line">  <span class="attr">business</span>: <span class="string">&quot;danmu&quot;</span>,</span><br><span class="line">  <span class="attr">is_iqiyi</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">  <span class="attr">is_video_page</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">  <span class="attr">tvid</span>: tvid,</span><br><span class="line">  <span class="attr">albumid</span>: albumid,</span><br><span class="line">  <span class="attr">categoryid</span>: categoryid,</span><br><span class="line">  <span class="attr">qypid</span>: <span class="string">&quot;01010021010000000000&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line">promises.<span class="title function_">push</span>(<span class="title function_">axios</span>(&#123;<span class="attr">method</span>: <span class="string">&quot;get&quot;</span>, <span class="attr">url</span>: api_url, <span class="attr">params</span>: params, <span class="attr">responseType</span>: <span class="string">&quot;arraybuffer&quot;</span>&#125;));</span><br><span class="line"><span class="keyword">const</span> values = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(promises);</span><br><span class="line"><span class="keyword">const</span> pako = <span class="built_in">require</span>(<span class="string">&quot;pako&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> datas = values</span><br><span class="line">			.<span class="title function_">map</span>(<span class="function"><span class="params">value</span> =&gt;</span> value.<span class="property">data</span>)</span><br><span class="line">			.<span class="title function_">map</span>(<span class="function"><span class="params">value</span> =&gt;</span> pako.<span class="title function_">inflate</span>(value, &#123;<span class="attr">to</span>: <span class="string">&quot;string&quot;</span>&#125;));</span><br></pre></td></tr></table></figure>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://stackoverflow.com/questions/47057832/use-zlib-js-to-decompress-python-zlib-compress">Use zlib.js to decompress python zlib compress</a><br><a href="https://stackoverflow.com/questions/70827921/pythons-zlib-decompresses-data-but-pako-javascript-zlib-fails">Python’s zlib decompresses data, but Pako (JavaScript zlib) fails</a></p>
]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>用Node实现一个Telegram机器人</title>
    <url>/2022/%E7%94%A8Node%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AATelegram%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>好久没开新坑了，今天就开一个新坑！<br>聊天机器人这个领域还没怎么涉及过，所以就想着做一个Telegram机器人，来练练手。<br>之所以选择Telegram，是因为它的API比较简单，而且有很多开源的库可以使用。<br>在国内常用的还是微信和QQ，但这两个受限于官方对机器人的态度，与国内众所周知的原因，所以就不考虑了。</p>
<h1 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h1><p>个人项目，开发效率是第一位，在此之前用Python比较多，正好想换换口味。在网上找到<code>node-telegram-bot-api</code>的Node模块，看到项目中的Example足够的简单快捷，就决定用Node来实现。<br>这也是我第一次完整的用Node写项目，刚开始就被module的导包所困扰，但幸运的是很快就解决。</p>
<h1 id="申请机器人"><a href="#申请机器人" class="headerlink" title="申请机器人"></a>申请机器人</h1><p>因为在弄一个机器人服务之前，我就已经注册过一个机器人用于定时汇报服务器上的信息。当时就简单的调用一下API，就能给指定用户发送消息，再在服务器上设个cron定时任务，就能定时发送消息推送了。</p>
<p>根据网上的教程，在Telegram上搜索<code>BotFather</code>，然后点击<code>Start</code>，就能开始跟它聊天了。简单发送指令<code>/newbot</code>根据提示一步步操作即可。这里面有个<code>token</code>，就是机器人的唯一标识，有了这个就可以调用API操控机器人了。<br><img data-src="/images/%E7%94%A8Node%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AATelegram%E6%9C%BA%E5%99%A8%E4%BA%BA/001.png" alt="申请bot图片"></p>
<p>这次要做的是一个更加复杂的机器人，所以就需要申请一个新的机器人了。<br>这次申请的机器人是为了配合订阅功能加的，能够方便我推送维护信息和订阅链接。还有到期提醒功能。</p>
<h1 id="机器人功能"><a href="#机器人功能" class="headerlink" title="机器人功能"></a>机器人功能</h1><h2 id="智能聊天机器人"><a href="#智能聊天机器人" class="headerlink" title="智能聊天机器人"></a>智能聊天机器人</h2><p>反正是整来玩的，机器人最基本的就是聊天吧，类似手机上的智能语音助手。<br>所以我找了个可以智能聊天的机器人，然后把它的API接入到我的机器人中，就能实现智能聊天了。<br>核心代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 智能聊天机器人</span></span><br><span class="line">bot.<span class="title function_">on</span>(<span class="string">&#x27;text&#x27;</span>, <span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (msg.<span class="property">text</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;/&#x27;</span>) === -<span class="number">1</span>) &#123;</span><br><span class="line">        bot.<span class="title function_">sendMessage</span>(msg.<span class="property">chat</span>.<span class="property">id</span>, <span class="string">&#x27;you said: &#x27;</span> + msg.<span class="property">text</span>);</span><br><span class="line">        axios.<span class="title function_">get</span>(<span class="string">&#x27;https://api.qingyunke.com/api.php?key=free&amp;appid=0&amp;msg=&#x27;</span> + <span class="built_in">encodeURI</span>(msg.<span class="property">text</span>)).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span><br><span class="line">            bot.<span class="title function_">sendMessage</span>(msg.<span class="property">chat</span>.<span class="property">id</span>, res.<span class="property">data</span>.<span class="property">content</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>虽然比较智障，但聊剩余无。</p>
<h2 id="欢迎页面"><a href="#欢迎页面" class="headerlink" title="欢迎页面"></a>欢迎页面</h2><p>按照Telegram官方说法，每个机器人都应该有一个<code>/start</code>欢迎页面。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 欢迎页面</span></span><br><span class="line">bot.<span class="title function_">onText</span>(<span class="regexp">/\/start/</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> name = [msg.<span class="property">from</span>.<span class="property">first_name</span>];</span><br><span class="line">    <span class="keyword">if</span> (msg.<span class="property">from</span>.<span class="property">last_name</span>) &#123;</span><br><span class="line">        name.<span class="title function_">push</span>(msg.<span class="property">from</span>.<span class="property">last_name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    name = name.<span class="title function_">join</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    bot.<span class="title function_">sendMessage</span>(msg.<span class="property">chat</span>.<span class="property">id</span>, <span class="string">`Welcome, <span class="subst">$&#123;name&#125;</span>!`</span>);</span><br><span class="line">    bot.<span class="title function_">sendMessage</span>(msg.<span class="property">chat</span>.<span class="property">id</span>, <span class="string">`You can send me any message and I will repeat it back to you.`</span>);</span><br><span class="line">    bot.<span class="title function_">sendMessage</span>(msg.<span class="property">chat</span>.<span class="property">id</span>, <span class="string">`You can also send me commands like /start, /help.`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="猜数游戏"><a href="#猜数游戏" class="headerlink" title="猜数游戏"></a>猜数游戏</h2><p>100内的猜数游戏，怎么着也得来一个吧！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//猜数游戏</span></span><br><span class="line">bot.<span class="title function_">onText</span>(<span class="regexp">/\/game/</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> chatID = msg.<span class="property">chat</span>.<span class="property">id</span>;</span><br><span class="line">    <span class="keyword">const</span> guess = <span class="built_in">parseInt</span>(msg.<span class="property">text</span>.<span class="title function_">replace</span>(<span class="string">&quot;/game&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span> (game[chatID] == <span class="literal">undefined</span>) &#123;</span><br><span class="line">        game[chatID] = &#123;</span><br><span class="line">            <span class="attr">num</span>: <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>),</span><br><span class="line">            <span class="attr">limit</span>: <span class="number">10</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        bot.<span class="title function_">sendMessage</span>(chatID, <span class="string">`我们来玩猜数游戏吧！`</span>);</span><br><span class="line">        bot.<span class="title function_">sendMessage</span>(chatID, <span class="string">`猜一个数字，你有10次机会。范围:[0, 100)`</span>);</span><br><span class="line">        bot.<span class="title function_">sendMessage</span>(chatID, <span class="string">`请输入你的猜测：(例：/game 50)`</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> &#123;num, limit&#125; = game[chatID];</span><br><span class="line">    <span class="keyword">if</span> (limit &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        bot.<span class="title function_">sendMessage</span>(chatID, <span class="string">`游戏结束！未猜出正确答案，正确答案为：<span class="subst">$&#123;num&#125;</span>`</span>);</span><br><span class="line">        game[chatID] = <span class="literal">undefined</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    game[chatID].<span class="property">limit</span>--;</span><br><span class="line">    <span class="keyword">if</span> (guess == num) &#123;</span><br><span class="line">        bot.<span class="title function_">sendMessage</span>(chatID, <span class="string">`恭喜你猜对了！`</span>);</span><br><span class="line">        game[chatID] = <span class="literal">undefined</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (guess &gt; num) &#123;</span><br><span class="line">        bot.<span class="title function_">sendMessage</span>(chatID, <span class="string">`你猜的数字太大了！`</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        bot.<span class="title function_">sendMessage</span>(chatID, <span class="string">`你猜的数字太小了！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="机器人指令设置"><a href="#机器人指令设置" class="headerlink" title="机器人指令设置"></a>机器人指令设置</h2><p>机器人的指令设置，主要是为了方便用户使用，也可以用来做一些简单的功能。<br>在此之前我都是自己去找<code>botfather</code>设置机器人的指令，查了下API手册，发现可以直接通过API来设置机器人的指令。<br>代码的含义：在发送<code>/help</code>指令时，机器人会告诉你指令的同时，再将指令设置到机器人上。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">bot.<span class="title function_">onText</span>(<span class="regexp">/\/help/</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> helpMsg = [</span><br><span class="line">        &#123;<span class="attr">command</span>: <span class="string">&#x27;start&#x27;</span>, <span class="attr">description</span>: <span class="string">&#x27;欢迎界面&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">command</span>: <span class="string">&#x27;game&#x27;</span>, <span class="attr">description</span>: <span class="string">&#x27;猜数游戏&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">command</span>: <span class="string">&#x27;sendpic&#x27;</span>, <span class="attr">description</span>: <span class="string">&#x27;发送你的头像&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">command</span>: <span class="string">&#x27;help&#x27;</span>, <span class="attr">description</span>: <span class="string">&#x27;帮助&#x27;</span>&#125;,</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">const</span> helpMsgText = helpMsg.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`/<span class="subst">$&#123;item.command&#125;</span> - <span class="subst">$&#123;item.description&#125;</span>`</span>;</span><br><span class="line">    &#125;).<span class="title function_">join</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    bot.<span class="title function_">sendMessage</span>(msg.<span class="property">chat</span>.<span class="property">id</span>, helpMsgText, &#123;<span class="attr">parse_mode</span>: <span class="string">&quot;HTML&quot;</span>&#125;);</span><br><span class="line">    bot.<span class="title function_">setMyCommands</span>(helpMsg);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>这是一个十分令人头疼的问题。如果不想自己本地托管，还要免费的话，就得找合适的提供商。<br>在部署之前，首先得选部署方式：webhook、长轮询。</p>
<ul>
<li>长轮询：默认300ms进行一次api请求，会消耗一些网路带宽。同时，不适合函数计算这类会冻结进程的平台。</li>
<li>webhook：需要一个公网可访问的URL，让Telegram主动调用你的服务器URL，优点是能保证消息的新鲜度，节省资源。缺点是需要可信的证书。</li>
</ul>
<h2 id="阿里云函数计算"><a href="#阿里云函数计算" class="headerlink" title="阿里云函数计算"></a>阿里云函数计算</h2><p>这是我第一个选择的平台，后面发现会有进程暂停的问题，不建议。<br>具体而言，就是设置webhook，来让Telegram触发阿里云函数计算，但是当我回复response的时候，函数计算会暂停进程，导致一些异步消息无法发送。当Telegram再次调用时，函数计算会重新启动进程，这样就会带来消息的延迟。<br>可以通过设置短暂的延迟返回response，来避免这个问题，但毕竟不是一个好办法。万一异步回调处理时间过长，就会导致消息发不出去。</p>
<h2 id="heroku"><a href="#heroku" class="headerlink" title="heroku"></a>heroku</h2><p>heroku是一个免费的云平台，可以用来部署nodejs应用。但是，heroku的免费版有一些限制，比如每个月只能运行550个小时，每个月只能有1000个请求，每个月只能有10GB的数据传输。这些限制对于一个普通的机器人来说，是完全够用的。<br><del>(以上是Copilot自动补全的结果，不保证数据的准确性，有可能是Copilot脑补的结果)</del><br>但是heroku要收费了！！那就不好意思，再见！<br>heroku不会出现函数计算那样的问题，heroku虽然也会冻结进程，但是他会在进程不活跃30分钟后，才冻结进程。<br>30分钟足够处理完所有的异步消息了。而且不需要在代码上做多余的修改。<br>美中不足的就是不能定时任务，定时推送消息。要定时推送还得外部调用来唤醒应用。</p>
<h2 id="fly-io"><a href="#fly-io" class="headerlink" title="fly.io"></a>fly.io</h2><p>所有的不足都能得到弥补，因为平台不会冻结进程。程序会24h不间断运行，也有提供免费的ssl证书和域名。<br>最终我选择的是fly.io。但要看未来的免费政策会不会变化。</p>
<h1 id="一些对Telegram-Bot-API的看法"><a href="#一些对Telegram-Bot-API的看法" class="headerlink" title="一些对Telegram Bot API的看法"></a>一些对Telegram Bot API的看法</h1><p>整体来说Telegram Bot API还是很好用的。文档详细，也方便各个编程语言的社区提供了SDK。<br>官方也支持！自由度很大！<br>但目前对于图片、视频、音频还有些大小限制，不方便我愉快的爬视频。<br>我觉得机器人适合那些不会写WEB前端，又希望自己写些小工具来与自己后端交互的人。</p>
<h1 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h1><p>不得不说<code>Github Copilot</code>真的是个好东西，我写这篇文章的时候，<code>Copilot</code>给了超多的提示，让我写的更加快捷，也更加规范。<br>上面这句话都是<code>Copilot</code>写的，王婆卖瓜，自卖自夸！就是逻辑上还有待改进。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://core.telegram.org/bots/api">Telegram Bot API</a></li>
<li><a href="https://github.com/yagop/node-telegram-bot-api">node-telegram-bot-api</a></li>
</ul>
]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>电影《你好，之华》</title>
    <url>/2018/%E7%94%B5%E5%BD%B1%E3%80%8A%E4%BD%A0%E5%A5%BD%EF%BC%8C%E4%B9%8B%E5%8D%8E%E3%80%8B/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- 《你好，之华》观后感 -->

<h1 id="契机"><a href="#契机" class="headerlink" title="契机"></a>契机</h1><p>闲着无聊，想看电影，去“美团”搜索电影票，就看到《你好，之华》这部电影。之前稍有听说过，是因为子枫参演拿了个台湾金马奖的最佳女配。但是，这个电影名字一看就特别的文艺，加之子枫并不是主角，所以没有如我的法眼。但是看看同时段的其他电影，《名侦探柯南：零的执行人》，嗯！昨天就已经看过盗版了，而且这是情怀电影，还不值得我掏钱买电影票。《毒液:致命守护者》，对不起，对漫威题材电影不感兴趣。</p>
<p>没办法，是同档期对手太菜。</p>
<p>最终决定看《你好，之华》有一下几个原因。一是支持一波子枫，早在《李雷和韩梅梅》就想支持一波，幸亏没买那是的票，剧情坑的一批！二是毕竟是金马奖提名影片，加之子枫的最佳女配，说明至少电影还是受电影界的认可的。三是日本导演加女主周迅，日本导演当然也算加分项，因为我也算看过不少日本电影，周迅演技也是得到认可的，我记得曾经看子枫综艺中听说过这个人。</p>
<h1 id="影院"><a href="#影院" class="headerlink" title="影院"></a>影院</h1><p>看了排期，适合我的最佳排期是15：50，时间稍微紧张一点。主要是还有该死的思政讲座要去听，而且网络签到到最后一刻才签到成功！看一看距离2.8公里，骑行15分钟。实际用时10分钟。这时有单车的重要性就体现出来的。<br>影院环境比我想象中的好，而且价格也便宜。虽然感觉影院里面的屏幕素质一般，有些烧屏，而且好像是投影的硬伤，一到暗环境下就啥都看不见。</p>
<h1 id="剧情"><a href="#剧情" class="headerlink" title="剧情"></a>剧情</h1><p>一开始就是袁之南去世，骨灰被袁之南的女儿袁睦睦留下，放在家中。袁睦睦收到一封袁之南的初中聚会。于是乎袁之南的妹妹之华代替姐姐参加初中同学聚会。因为之华是学生会主席。在聚会中，之华被其他同学推上舞台发言，因自己不擅长在台上发言，没说几句话就下台了，也因为害怕被人认出就灰溜溜的提前离开了。聚会上的尹川注意到了之华。尽管，他一眼看出了这不是之南而是之华，但并没有拆穿她。发现之华离开后一直追至公交车站。之华以家里离的远为借口，想要提前离开。而尹川却希望能够跟之南（之华）找个地方聊聊，两人最后留下了联系方式。之华回到家中，之华丈夫周文涛惊讶于之华回来的这么早，随后，之华在洗手间卸妆的过程中，被周文涛意外发现之华手机上尹川发来的信息“其实我一直都喜欢你”。随后，周文涛拿起手机质问之华，之华向其解释这是在之南的同学会上加的同学，但是周文涛并不相信，把手机摔了，还用花洒淋手机，最后，手机坏了。之华也干脆不用手机，写了封信向尹川诉说发生的事情。向其抱怨丈夫有意为难她，不仅把婆婆安排回来住，还带了朋友家的两条大狗回来代养。给尹川写信的时候并没有留地址，因为不希望尹川回信。而尹川最终写信到了之南的老家，被睦睦碰巧收到了，睦睦对尹川也是有一定的了解，所以，假装之南给尹川回信。而此刻之华也在婆婆的老师家中，借用老师家的地址给尹川写回信。</p>
<p>镜头回到少年时期，尹川一家搬到之南所在的县城，跟之南在同一所高中。尹川称自己来自北京，爱好足球和写作。而他关注到了之南，就喜欢上了她。恰巧的是尹川的妹妹跟之南的妹妹即之华是同学，她们在玩乐的过程中，遇到了尹川。尹川从之华的口中了解到她是之南的妹妹，就开始从之华的口中获取之南的信息。就在交谈之中之华喜欢上了尹川，愿意帮助尹川传递情书。但每次收到情书后，之华都并没有真正的给到之南。之华不仅给尹川看了很多张姐姐的相片，还在一次偶遇中，让其看到她真正的脸。（平时，因为流感而一直带着口罩）最后，尹川发现了之华并没有将情书转给之南，之南不知说些什么好，只好一个劲的道歉。称自己一定会将这些信转交给之南。之华也履行了他的诺言，将信全部转交给了之南。但她依旧喜欢尹川而不想放弃，在某一天，亲自到尹川家中找他，写了一封信，问“我们能做朋友吗？”遭到尹川的拒绝。尹川在学校被之南拦下，之南希望他能帮她改写毕业发言演讲稿，尹川很谦虚的说自己并不擅长写作，并问了之南为什么选择他来修改演讲稿，之南说她看过了尹川给他写的信，觉得很不错，认为尹川以后能够成为作家。</p>
<p>镜头转回成年后，尹川找到之华写信的地址，登门拜访。之华恰巧也在，之华随便找了个口红化了妆，就把尹川请了进来，说明自已不是有意隐瞒他，代替姐姐之南写信给她，并让其知道姐姐是自杀而死，有可能是得了抑郁症。而之南的丈夫张超是个极其不负责的人，有一次家暴快把之南打死，自己却什么事都没发生的跑了。尹川也找到了张超的居住地，进一步了解了一下张超是什么人。随后，尹川又回到了初中，拍摄了些照片，正好遇到了睦睦和飒然两人在遛狗，尹川一眼就认出她们两个是之南和之华的女儿，因为长得太像了。<del>那都是一个人演的</del>，睦睦也认出了尹川，遂邀请尹川到外婆家中做，也就是之南的老家。尹川见到了之南的骨灰，烧了香，泪如雨下。渐渐平复心情后，偶然瞥见书架上的《之南》一书。心中的心结也解开了，他写的《之南》之南真的看过了，睦睦也看过这本书，所以收到信时他就想到了这封信是这本书的作者寄的。</p>
<p>尹川在准备回上海时，最后见了一次之华，将他在初中校园拍的一些照片给了之华看，也将他遇到睦睦和飒然的事告诉了之华。影片结尾以睦睦和她的弟弟打开之南的遗书结束。遗书的内容，与《之南》书的结尾，毕业典礼演讲稿的内容一样。</p>
<h1 id="影后感"><a href="#影后感" class="headerlink" title="影后感"></a>影后感</h1><p>先从整个影片的结构上说，结构上还是很不错的，固定的长镜头很多，符合多数日影的情况。而且本土化做的超乎想象的好。少年之华之南的装扮，场景，都特别的复古。没有一丝的日本情景在里面，给人一种故事真的发生在中国的感觉。但故事的内核，又具有编剧表达情愫的唯美感。本土化无疑是成功的。<br>虽然在影片中我也一直在吐槽写信这种通讯方式的传统，以及寄信过程中的问题。让我联想到寄信的过程就是UDP，寄出去就没有后文了，无法知晓是否传达成功。而寄信的过程如同http，非加密的容易发生中间人攻击，所以只有写信这种方式才能让故事变的有趣。<br>如同豆瓣简介一样，这是一个含蓄的故事，讲的是错过的故事！不需要直白的表达，就能将人与人的之间的情愫表达出来。</p>
]]></content>
      <categories>
        <category>个人</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>电影</tag>
      </tags>
  </entry>
  <entry>
    <title>电影《千与千寻》</title>
    <url>/2016/%E7%94%B5%E5%BD%B1%E3%80%8A%E5%8D%83%E4%B8%8E%E5%8D%83%E5%AF%BB%E3%80%8B/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>　　正值春节假期，可以好好地放松一下。准备找几部电影来看下。很早就注册过豆瓣的账户了,想找一些高分电影来看下。在一份“同时入选IMDBTop250与豆瓣电影Top250的电影”的豆列中，发现了这部电影。<br>　　我对这部电影最早的印象是在小学的一次六一文艺汇演。当时我们正在后台准备（阶梯教室），老师怕我们无聊，就给我们放了这部电影。虽说还并不知道这部电影名，但是在我的心中留下了一些画面。在我心目中印象最深的是白龙带着千寻穿过人类世界到汤屋的桥。因为不能被其他人闻到有人类的气息，而屏住呼吸向前跑。<br>　　因为是关于神明鬼怪的故事，所以在我幼小的内心觉得有点恐怖。（可能也是这让我对这部影片有了较深的印象）<br>　　于是乎在妈妈的陪同下，重新完整的看了一遍这个电影。<br>　　看完这部片时,并没有觉得有什么特别之处,觉得很稀奇为什么在豆瓣上可以得这么高的分。等我看了一些其他人写的影评的时候,就发现自己”too young too naive”。</p>
<h1 id="观后感"><a href="#观后感" class="headerlink" title="观后感"></a>观后感</h1><p>　　一直以来,都没有机会看这部广为人知的动漫电影。也是因为在豆瓣上突然看到其评分很高，加之小学曾经对这部电影有些许的印象。所以，决定花一些时间完整的看一遍这篇电影。当我看完这部电影后，加上一些豆瓣上的影评。是我对这部片子的喜爱到了近乎疯狂的地步。<br>　　第一次看完，并没觉得有什么特别之处。仅仅是当故事看完了一遍，在看完了一些人的影评后，发现这不仅仅只是一个冒险片，而是一个教育片。整个片子每一处细节，每一个角色都具有特殊的含义，都象征着社会中的某些人或事。<br>　　整个汤屋其实就是一个人类社会的缩影，作者宫崎骏特意将千寻置身于这样一个环境中。千寻因为父母“贪吃”的原因，无人依靠，而被迫提前的融入这个社会。在这样一个物欲横流社会环境中，勿忘自我，逐渐成长自强、坚毅的小女孩。凭着自己的努力，做出正确的抉择，最终救会自己的父母。现在很多人为了融入这个社会，迎合这个时代的体制和规则。而忘了初心，忘了自我，不知自己最初来的目的。<br>　　人不能不劳而获，沉迷于享乐之中。千寻的父母就因为这一原因变成了“猪”。因贪图美食而一发不可收拾，自己虽说吃完了再付钱，但是未经主人同意，擅拿他人财物本身就是错误的！人一旦被欲望锁左右，就会慢慢地失去了勤奋，思想开始沦陷、堕落。没有得到的自省和控制，一旦变成“猪”后，后悔也来不及了。<br>　　做人要独立！勇敢！自强！。在误入神明之地之前，千寻和大多数孩童一样，是一个娇气的城里人。当父亲决定走进那个漆黑的洞口时，千寻表现出是一种害怕、无助的神情。刚开始时，极力反抗，走回车旁。最后，看到身旁的雕像后，还是不自觉的走向自己的父母。在父母都变成“猪”后，身边唯一可以依赖的人已经不能依赖了。此时在“白龙”的帮助下，找锅炉爷爷、汤婆婆索要工作，一步步走向独立。再见过各种各样的妖魔鬼怪之后，逐渐提升与人交往的能力，达到勇敢。<br>　　朋友的力量可以在需要的时候指引你。当发现自己的父母亲忽然变成了“猪”的时候，在像大多数孩子只能坐在地方大哭、万念俱灰的时候，故事合情合理，没有将小千寻神化，而是安排“白龙”的出现，让失望的人不要绝望。相较于父母亲，你获得社会的认可，并交到合适的朋友在你的一生中起到的作用要比你父母亲来得更有帮助！千寻在朋友的帮助下，没有绝望，而是将悲痛隐在心里，勇敢地面对现实。<br>　　在物欲横流的社会中，勿忘自我，勿忘初心。就像影片中白龙所说：“汤婆婆通过夺取他人的名字来控制你。”可能在汤屋里面的很多为汤婆婆做事的人，也是因为这个原因。而被汤婆婆控制，无法离开这个地方。当无脸男给了她很多可以减轻她工作量的热水令牌时，她拒绝了。当无脸男想通过钱财来讨千寻喜欢时，她也拒绝了。无脸男在其中就是一个被世俗污染的典型例子。就像千寻所说：“那个人是因为在汤屋中才变坏的，让他离开那里比较好。”<br>　　千寻在汤屋中并不随从流俗，那是因为她知道她不属于这个世界，她的财宝也不在这里，千寻最大的愿望不过只是带着她的父母脱离这个世界，回到真正属于他们的家。<br>　　除了这些，影片中还有涉及礼貌，勤奋，环保等诸多方面。一部好电影并不在于它的画面，声音有多么震撼。不在于是否请了一些明星大腕来参与演出。即使是一部成本很低的、面向孩子的动画，当剧中透出“人”性之美，许多“正能量”，引人深思。它就是一部好电影。
	</p>
<h1 id="经典台词"><a href="#经典台词" class="headerlink" title="经典台词"></a>经典台词</h1><ol>
<li>不管信用卡或现金我都有。（有些东西是钱买不到的）</li>
<li>吃了不会变成猪的。</li>
<li>我是站在你这边的。</li>
<li>连门都不会先敲一下。</li>
<li>为什么你想要工作我就要雇用你！</li>
<li>不能吃太胖哦，会被杀掉的！</li>
<li>哭出来就好了。</li>
<li>不跟我玩儿，我就哭给你看。</li>
<li>用魔法做的（护身符）一点用都没有。（真心的祝福远远比魔法做的有用）</li>
<li>客人也不能无礼。（即使你是上帝）</li>
<li>名子一但被夺走就再也找不到回家的路了。（不能忘记自我）</li>
<li>我们两个是双胞胎，却一点儿都合不来。（外在一样，内在不同，却是天壤之别）</li>
<li>我永远不会雇佣你们这群好吃懒做的人类！</li>
<li>曾经发生的事不可能忘记，只是想不起来而已。</li>
<li>虽然我很想救你，但是我什么都做不到，因为这是这个世界的规则，你的父母也好，你的男朋友龙也好，只能靠你自己去救。</li>
<li>一直向前走。千万别向后看。否则就永远回不去那个世界了。</li>
<li>很奇怪，我忘记了我自己的名字，但是千寻的名字我却一直都记得</li>
<li>这个世界上，你可以碰到机遇，而绝不可能碰到“神”，自己的路，还是得自己走!</li>
<li>人生就是一列开往坟墓的列车，路途上会有很多站，很难有人可以自始至终陪着走完。当陪你的人要下车时，即使不舍也该心存感激，然后挥手道别。</li>
<li>那个人是因为在汤屋中才变坏的，让他离开那里比较好。</li>
</ol>
<h1 id="收集"><a href="#收集" class="headerlink" title="收集"></a>收集</h1><p>著作权归作者所有。<br>商业转载请联系作者获得授权，非商业转载请注明出处。<br>作者：风雨骑<br>链接：<a href="https://www.zhihu.com/question/22799802/answer/22715069">https://www.zhihu.com/question/22799802/answer/22715069</a><br>来源：知乎</p>
<p>3.《千与千寻》中间讲的最重要的内容是什么？不要忘记自我。千寻从迷失在汤屋，到最后想起自己的名字。这是什么母题？自我救赎。这是全世界电影都在探索与表达的内容。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://zh.wikipedia.org/wiki/%E5%8D%83%E4%B8%8E%E5%8D%83%E5%AF%BB">维基百科</a></p>
<p><a href="http://baike.baidu.com/link?url=mBcbbCUXDGhJEr7S1KvCE0MLSfOfQXRmcWySbyvn9v08zIYjbMgmXk9inhrPRLDftaaF51i5VKuHBnw6WjDaN_">百度百科</a></p>
<p><a href="http://movie.douban.com/subject/1291561/?source=new_aladdin">豆瓣</a></p>
<p><a href="https://www.zhihu.com/topic/19573889">知乎</a></p>
<p><a href="http://tieba.baidu.com/p/2072958245">台词来源</a></p>
<p>百度百科中各任务简介，豆瓣影评或问题<a href="http://movie.douban.com/review/1190905/">[1]</a><a href="http://movie.douban.com/subject/1291561/questions/2319/?from=subject_questions">[2]</a><a href="http://movie.douban.com/review/1018421/">[3]</a><a href="http://movie.douban.com/review/1560179/">[4]</a></p>
]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>读后感</tag>
        <tag>电影</tag>
      </tags>
  </entry>
  <entry>
    <title>离散数学主析取范式及主合取范式</title>
    <url>/2018/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E4%B8%BB%E6%9E%90%E5%8F%96%E8%8C%83%E5%BC%8F%E5%8F%8A%E4%B8%BB%E5%90%88%E5%8F%96%E8%8C%83%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
      <categories>
        <category>互联网</category>
        <category>转载</category>
      </categories>
      <tags>
        <tag>link</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>红米3S玩机系列</title>
    <url>/2016/%E7%BA%A2%E7%B1%B33S%E7%8E%A9%E6%9C%BA%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>红米1S提前退休，对于我这种喜旧厌新的人来说，多少还是有点感情的。(毕竟是第一部智能机)对于选手机这件事，品牌只能是小米(<del>一入MIUI深似海，谁叫我已经入坑了呢</del>)。因为至今，我也没有找到更好的系统来替代MIUI。为了及时获得MIUI的系统更新，我只能选择小米手机啦。因此，重要的事情说三遍</p>
<p> - <strong>我是去买系统的</strong>  </p>
<p> - <strong>我是去买系统的</strong>  </p>
<p> - <strong>我是去买系统的</strong>  </p>
<p>再加上小米手机价格屠夫的称号，那是相当的划算。(除耳机外，我所用过的小米系列产品品控都不错。)</p>
<p>9月16日拿到的新机，整体感觉还不错。</p>
<p>这部机子虽然性能不算强，(比前代红米3略差)但是主打续航。4100mah的电池容量，相比之前我的手机红米1S来说电池容量翻了倍。在屏幕尺寸有所提升的情况下，耗电速度与红米1S相当。GPU相比红米3有所提升，但对于我这种不玩游戏的人来说，并无卵用。CPU也从联发科的换成了高通。配备有指纹解锁功能。<br>为了紧扣题目，下面就是有关红米3S的玩机教程啦。</p>
<h1 id="手机信息"><a href="#手机信息" class="headerlink" title="手机信息"></a>手机信息</h1><p>手机刚拿到手，预装的就是当时最新MIUI7.5稳定版，安卓版本6.0。由于第一次用这种不可拆卸型的手机，刚开始装卡时遇到了些麻烦。原来是要用撞针用力捅进去，卡槽才会弹出来。(<del>毕竟是乡下人</del>)卡槽类型为双卡+单卡与micro sd卡。</p>
<h1 id="BL锁"><a href="#BL锁" class="headerlink" title="BL锁"></a>BL锁</h1><p>要想顺畅的玩机，最先做的就是解BL锁，现在市面上大部分的安卓机型都加上了BL锁。这个可以上小米官网申请解锁。<br>打开申请解锁的网址，申请时要求填写申请理由，随便写写凑够字数就行了(据说审核是机审)。官网说将在10个工作日处理。然而实际上3天就受理成功了。<br>下载解锁工具后，解锁工具将会联网验证手机上对应的小米账号是否解锁。解锁工具使用一次就失效了。至于如何上锁，我就不清楚了。<br>BL锁是为了防止手机被第三方软件执行刷机，root等操作。保证系统不被其他非官方ROM破坏。(比如之前的360雷电OS系统系列)这样做后包括电脑端与手机端在内的各种各样的刷机软件与ROOT都将失效。<br>也无法使用与刷入Recovery。好处就是能够保障手机不被其他流氓软件侵扰。MIUI在抗流氓软件上还是非常有效的。</p>
<h1 id="卡刷TWRP-Recovery"><a href="#卡刷TWRP-Recovery" class="headerlink" title="卡刷TWRP(Recovery)"></a>卡刷TWRP(Recovery)</h1><p>TWRP(Teamwork Recovery Project)一款相当强大的Android Recovery软件。可视化触屏操作，多语言支持，多插件支持。简直就是一款强大的Windows PE。<br>完成BL解锁后，接着应当刷入第三方的Recovery，本身自带的Recovery因为没有界面而无法使用。自带的Recovery往往只能刷入官方包，而不能刷入修改定制后的包，所以换Recovery就显得至关重要了。<br>刷入TWRP方法还是相当的简单。首先保证电脑与手机的正常连接，手机进入fastboot模式，电脑中与手机相关的驱动运行正常。具备这些前提条件后，执行一下相应的批处理命令即可。这里有批处理命令相关代码:<br>&lt;!- 批处理命令相关代码，以及相关命令解释&gt;<br>一般只需要1-2s就可刷入Recovery。对于小米官方ROM，需要在高级菜单下，执行删除DM效验，否则将无法通过手机启动到TWRP。这样就造成每次刷完官方包后都需要执行一次以上的操作。<br>TWRP除了具备普通Recovery中基本的擦除数据，以及刷入zip包。还具有MTP功能，将文件(刷机包)从电脑传入到手机中，虽然对外部sd卡中文支持不佳。这个MTP<br>好像有容量判断上的问题，要确保拷入的文件大小不超过本身设备的可用容量。对于一般拷ROM包还是没问题的。拥有小型的文件管理，可以通过刷入插件变得更强。对于条件允许的机型可以刷双系统(然而，我在网上并没有找到红米3S的解决方案)。刷入aroma插件后，可以刷入具有可视化界面的刷机包。(功能强大到令人发指)<br>可以说只要TWRP还在，就不怕救转不成功。</p>
<h1 id="线刷"><a href="#线刷" class="headerlink" title="线刷"></a>线刷</h1><p>一般情况下都不需要执行这种刷机方式。当然也有特例。比如说Recovery挂了(我还没试过)，Recovery功能不齐全(MI recovery 2.0.1)，Recovery无法执行刷机操作(某次卸载系统更新)。一般都是很作死的情况下，才需要此般折腾。<br>首先当然是下载先刷工具啦，网上有很多相关教程。但我还是更相信并依赖于小米官方。从小米官网上下载刷机工具以及对应机型的线刷包，后缀一般都是tar.gz(Linux压缩包格式)。解压压缩包，手机进入fastboot界面，刷机工具选择解压后的目录。因为小米没有提供不清空\sdcard目录的线刷脚本，所以要勾选清楚内部存储器的选择框。执行三清后刷机。我在线刷时，刷机工具并没有显示完成的对话框，不用担心，只要没有报错，耐心等待就行，直到手机自动重启即可。(大概需要500s)<br>线刷是相当全面的刷机，包括Recovery也会被替换。如果想要一个干净的官方系统可以试试。</p>
<h1 id="ROOT"><a href="#ROOT" class="headerlink" title="ROOT"></a>ROOT</h1><p>折腾了这么多，最终就是为了ROOT而做准备。之前红米1S，我一直都是用的都是KingRoot。然而，这次KingRoot并不支持红米3S。也用过类似奇兔刷机等其他ROOT工具，都无效。之前听说过有一个很强的ROOT授权管理工具(SuperSU)。之前在龙哥的平板上见过，因为界面比较丑陋，然后懒得折腾就没用。<br>对于MIUI系统来说，其实不用那么麻烦刷第三方ROOT。默认都可以通过刷开发版来获取ROOT。但是，红米3S开发版的ROOT有被阉割，就算是给钛备份授权了ROOT，依旧无法恢复数据。而且官方ROOT有25s授权验证。并且每次OTA升级或者重刷系统会掉ROOT，每次又要重新下载ROOT包并授权。还是相当的繁琐的。<br>因为SuperSU的zip包是全机型通用的，直接上网下刷机包刷入就好了(无需双清)为了确保能够成功刷入，最好使用第三方的Recovery。刷完之后默认就会使用SuperSU进行授权管理，新版的SuperSU已经不在丑陋了，并且非常的干净，无广告。</p>
<h1 id="Xposed框架"><a href="#Xposed框架" class="headerlink" title="Xposed框架"></a>Xposed框架</h1><p>Xposed框架通过修改一些基础的系统软件，达到其他基于Xposed框架的模组能够更容易的对系统进行定制或修改。<br>在Android5.0以前版本的系统可以直接安装Xposed Installer获取ROOT权限后替换系统文件即可安装成功。<br>Android5.0以上的只能通过刷Xposed包完成安装，在官网上提供机型的Android版本与处理器平台后，找到对应版本下载。因为MIUI的特殊性直接刷入官网的Xposed并没有用，需要安装某个大神定制的Xposed by MIUI才行。<br>安装这个框架后就可以使用各种强悍的功能了。</p>
<h1 id="ROM包"><a href="#ROM包" class="headerlink" title="ROM包"></a>ROM包</h1><p>好不容易换手机了，为何不使用一些非MIUI的包呢？之前用过刷机精灵提供的ROM包，但里面太多内置推广了，还不如官方包。<br>所以，最好去环境相对好的论坛，比如说MIUI论坛。在里面我已经看到了大神制作的AOSP,CM，RR等ROM。试用了一下CM，感觉还不错。系统贴近原生，干净，没有乱七八糟的软件，省流量，系统后台基本无流量消耗。缺点也很明显，开源嘛，所以没有云服务咯。但是，我还是习惯了使用小米全家桶。而CM作为一个开源社区，来源软件，本身并不提供云服务，而我还是过于依赖小米的云服务。所以，没用几天就用回去了。另外CM还是比较耗电的。加了绿色守护之后，明显好了超多。<br>AOSP没用过，不置评。<br>最后，为了长期使用，还是得用回MIUI，在MIUI论坛上，我看到了一些人，对MIUI进行定制修改，其中我看中了两个人的ROM。一个是基于稳定版的极光ROM，一个是基于开发版的bbk520ROM。但我还是更喜欢后者。以至于到写这篇博文为止，还在使用这个ROM包。<br>极光提供的包，功能不太多，因为设置界面太丑了，所以没用。<br>bbk520提供的包(去除推广后)功能很多，自带了ROOT,Xposed,音效软件。还提供了多种基于Xposed的模组。</p>
<h1 id="去除系统更新"><a href="#去除系统更新" class="headerlink" title="去除系统更新"></a>去除系统更新</h1><p>不得不提，一直以来我都解决不了该死的系统更新问题。<br>两次线刷都是系统更新的锅。<br>第一次在用红米1S使用KingRoot中的卸载系统应用功能，卸载之后重启手机，就卡白米了，虽然MI-recovery还是可以用，但是这是一个阉割功能的Recovery，因为必须将ROM包拷贝到内部存储根目录下，并改名为update.zip，但我现在压根传不了文件进去。<br>第二次在用红米3S，因为冻结了系统更新，卡白米。在启动的时候疯狂的优化应用程序，最后强制重启进去TWRP，但是TWRP写不了\system。所以…<br>除此之外，还有更改版本号，关闭通知等各种作死行为。</p>
]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>线段(segment)</title>
    <url>/2015/%E7%BA%BF%E6%AE%B5-segment/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>数轴上有很多单位线段，一开始时所有单位线段的权值都是1。有两种操作，第一种操作将某一区间内的单位线段权值乘以w，第二种操作将某一区间内的单位线段权值取w次幂。并且你还需要回答一些询问，每个询问需要求出某一区间的单位线段权值之积。由于答案可能很大，你只需要求出答案 mod (10^9+7)的值。</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>第一行一个整数n，表示操作数量。</p>
<p>接下来n行，每行第一个整数表示操作类型，0表示第一种操作，1表示第二种操作，2表示询问，如果第一个数是0或1，则接下来3个数，表示操作区间和w，否则接下来两个数，表示询问区间。</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>对于每组询问，输出一行，表示所求答案。</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7</span><br><span class="line">0 0 2 3</span><br><span class="line">1 1 3 2</span><br><span class="line">2 1 3</span><br><span class="line">0 0 3 2</span><br><span class="line">1 1 3 2</span><br><span class="line">2 1 3</span><br><span class="line">2 0 3</span><br></pre></td></tr></table></figure>

<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">9</span><br><span class="line">1296</span><br><span class="line">7776</span><br></pre></td></tr></table></figure>

<h2 id="Data-Constraint"><a href="#Data-Constraint" class="headerlink" title="Data Constraint"></a>Data Constraint</h2><h2 id="下表中的“线段权值”表示“单位线段经过各种w处理后的权值范围”Analysis"><a href="#下表中的“线段权值”表示“单位线段经过各种w处理后的权值范围”Analysis" class="headerlink" title="下表中的“线段权值”表示“单位线段经过各种w处理后的权值范围”Analysis"></a>下表中的“线段权值”表示“单位线段经过各种w处理后的权值范围”<br><img data-src="/images/%E7%BA%BF%E6%AE%B5/0.png" alt="下表中的“线段权值”表示“单位线段经过各种w处理后的权值范围”"><br>Analysis</h2><h2 id="看完标题和题目，就给人一种提醒，此题要用线段树。仔细观察可以发现这题类似于线段树维护区间和。所以同理能用线段树解决。只是将这道题改成了区间积和增加了对区间取幂次方的修改。因为有两种修改，所以我们要维护两个下传标记。但是区间的范围却非常大，这显然是要爆空间的节奏啊！！细心的我们发现，此题n很小，可是区间范围却很大，我们何不考虑一下离散化呢？这样子整个线段的长度就只有2n了。在做乘积的时候还需要用到快速幂。接下来就是怎么实现的问题了。实现过程还是挺复杂的！！首先我们把读入的数据离线掉，并将各个区间的值排序后塞入hash表中，在hash表中存入旧位置及新位置对应的匹配。这样我们就能很快的从旧的位置找到新的位置。剩下的问题就是如何去维护标记。我打了两个标记，一个是标记第一种操作在区间中乘了多少个w（没有他的L次幂，因为每个区间的L都有可能不同）。第二个标记是记录第二个操作（即这个区间乘了多少次方）。只用了这两个标记。剩下的就是线段树的实现了。Code"><a href="#看完标题和题目，就给人一种提醒，此题要用线段树。仔细观察可以发现这题类似于线段树维护区间和。所以同理能用线段树解决。只是将这道题改成了区间积和增加了对区间取幂次方的修改。因为有两种修改，所以我们要维护两个下传标记。但是区间的范围却非常大，这显然是要爆空间的节奏啊！！细心的我们发现，此题n很小，可是区间范围却很大，我们何不考虑一下离散化呢？这样子整个线段的长度就只有2n了。在做乘积的时候还需要用到快速幂。接下来就是怎么实现的问题了。实现过程还是挺复杂的！！首先我们把读入的数据离线掉，并将各个区间的值排序后塞入hash表中，在hash表中存入旧位置及新位置对应的匹配。这样我们就能很快的从旧的位置找到新的位置。剩下的问题就是如何去维护标记。我打了两个标记，一个是标记第一种操作在区间中乘了多少个w（没有他的L次幂，因为每个区间的L都有可能不同）。第二个标记是记录第二个操作（即这个区间乘了多少次方）。只用了这两个标记。剩下的就是线段树的实现了。Code" class="headerlink" title="看完标题和题目，就给人一种提醒，此题要用线段树。仔细观察可以发现这题类似于线段树维护区间和。所以同理能用线段树解决。只是将这道题改成了区间积和增加了对区间取幂次方的修改。因为有两种修改，所以我们要维护两个下传标记。但是区间的范围却非常大，这显然是要爆空间的节奏啊！！细心的我们发现，此题n很小，可是区间范围却很大，我们何不考虑一下离散化呢？这样子整个线段的长度就只有2n了。在做乘积的时候还需要用到快速幂。接下来就是怎么实现的问题了。实现过程还是挺复杂的！！首先我们把读入的数据离线掉，并将各个区间的值排序后塞入hash表中，在hash表中存入旧位置及新位置对应的匹配。这样我们就能很快的从旧的位置找到新的位置。剩下的问题就是如何去维护标记。我打了两个标记，一个是标记第一种操作在区间中乘了多少个w（没有他的L次幂，因为每个区间的L都有可能不同）。第二个标记是记录第二个操作（即这个区间乘了多少次方）。只用了这两个标记。剩下的就是线段树的实现了。Code"></a>看完标题和题目，就给人一种提醒，此题要用线段树。仔细观察可以发现这题类似于线段树维护区间和。所以同理能用线段树解决。只是将这道题改成了区间积和增加了对区间取幂次方的修改。因为有两种修改，所以我们要维护两个下传标记。但是区间的范围却非常大，这显然是要爆空间的节奏啊！！<br>细心的我们发现，此题n很小，可是区间范围却很大，我们何不考虑一下离散化呢？这样子整个线段的长度就只有2n了。在做乘积的时候还需要用到快速幂。接下来就是怎么实现的问题了。<br>实现过程还是挺复杂的！！首先我们把读入的数据离线掉，并将各个区间的值排序后塞入hash表中，在hash表中存入旧位置及新位置对应的匹配。这样我们就能很快的从旧的位置找到新的位置。<br>剩下的问题就是如何去维护标记。我打了两个标记，一个是标记第一种操作在区间中乘了多少个w（没有他的L次幂，因为每个区间的L都有可能不同）。第二个标记是记录第二个操作（即这个区间乘了多少次方）。只用了这两个标记。剩下的就是线段树的实现了。<br>Code</h2><figure class="highlight pascal"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span>	maxn=<span class="number">20000</span>+<span class="number">2</span>;mo=<span class="number">1000000007</span>;hamo=<span class="number">200000</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">type</span>	node=<span class="keyword">record</span></span><br><span class="line">		v,ad,ad2:longint;</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line">	arr=<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">2</span>*maxn] <span class="keyword">of</span> longint;</span><br><span class="line"><span class="keyword">var</span>	i,n,sum,ret,x,y,z,t,kk:longint;</span><br><span class="line">	q:<span class="keyword">array</span>[<span class="number">1</span>..maxn,<span class="number">1</span>..<span class="number">4</span>] <span class="keyword">of</span> longint;</span><br><span class="line">	h:<span class="keyword">array</span>[<span class="number">1</span>..hamo] <span class="keyword">of</span> node;</span><br><span class="line">	a:arr;</span><br><span class="line">	len,d:<span class="keyword">array</span>[<span class="number">1</span>..hamo] <span class="keyword">of</span> longint;</span><br><span class="line">	hash:<span class="keyword">array</span>[<span class="number">0</span>..hamo,<span class="number">1</span>..<span class="number">2</span>] <span class="keyword">of</span> longint;</span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">times</span><span class="params">(<span class="keyword">var</span> x:longint;y:longint)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	x:=(int64(x) * (y <span class="keyword">mod</span> mo)) <span class="keyword">mod</span> mo;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pow</span><span class="params">(x:int64;y:longint)</span>:</span>int64;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	pow:=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> y&lt;&gt;<span class="number">0</span> <span class="keyword">do</span> <span class="keyword">begin</span></span><br><span class="line">		<span class="keyword">if</span> odd(y) <span class="keyword">then</span> pow:=(pow*x) <span class="keyword">mod</span> mo;</span><br><span class="line">		x:=(x*x) <span class="keyword">mod</span> mo;</span><br><span class="line">		y:=y&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">qsort</span><span class="params">(<span class="keyword">var</span> a1:arr;l,r:longint)</span>;</span></span><br><span class="line"><span class="keyword">var</span>	m,i,j,t:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	m:=a1[(l+r) <span class="keyword">div</span> <span class="number">2</span>];</span><br><span class="line">	i:=l;j:=r;</span><br><span class="line">	<span class="keyword">repeat</span></span><br><span class="line">		<span class="keyword">while</span> a1[i]&lt;m <span class="keyword">do</span> inc(i);</span><br><span class="line">		<span class="keyword">while</span> a1[j]&gt;m <span class="keyword">do</span> dec(j);</span><br><span class="line">		<span class="keyword">if</span> i&lt;=j <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">			t:=a1[i];</span><br><span class="line">			a1[i]:=a1[j];</span><br><span class="line">			a1[j]:=t;</span><br><span class="line">			inc(i);dec(j);</span><br><span class="line">		<span class="keyword">end</span>;</span><br><span class="line">	<span class="keyword">until</span> i&gt;j;</span><br><span class="line">	<span class="keyword">if</span> l&lt;j <span class="keyword">then</span> qsort(a1,l,j);</span><br><span class="line">	<span class="keyword">if</span> i&lt;r <span class="keyword">then</span> qsort(a1,i,r);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">maketree</span><span class="params">(x,l,r:longint)</span>;</span></span><br><span class="line"><span class="keyword">var</span>	mid:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">if</span> (l=r) <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">		h[x].v:=<span class="number">1</span>;</span><br><span class="line">		h[x].ad:=<span class="number">1</span>;</span><br><span class="line">		h[x].ad2:=<span class="number">1</span>;</span><br><span class="line">		d[x]:=len[l];</span><br><span class="line">	<span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">		mid:=(l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		maketree(x*<span class="number">2</span>,l,mid);</span><br><span class="line">		maketree(x*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">		h[x].v:=<span class="number">1</span>;</span><br><span class="line">		d[x]:=d[x*<span class="number">2</span>]+d[x*<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line">		h[x].ad:=<span class="number">1</span>;</span><br><span class="line">		h[x].ad2:=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">change</span><span class="params">(x,l,r:longint)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">        h[x*<span class="number">2</span>].v	:=pow(h[x*<span class="number">2</span>].v,h[x].ad2);</span><br><span class="line">        h[x*<span class="number">2</span>+<span class="number">1</span>].v	:=pow(h[x*<span class="number">2</span>+<span class="number">1</span>].v,h[x].ad2);</span><br><span class="line">        h[x*<span class="number">2</span>].ad	:=pow(h[x*<span class="number">2</span>].ad,h[x].ad2);</span><br><span class="line">        h[x*<span class="number">2</span>+<span class="number">1</span>].ad	:=pow(h[x*<span class="number">2</span>+<span class="number">1</span>].ad,h[x].ad2);</span><br><span class="line">        h[x*<span class="number">2</span>].ad2	:=(int64(h[x*<span class="number">2</span>].ad2) * h[x].ad2) <span class="keyword">mod</span> (mo-<span class="number">1</span>);</span><br><span class="line">        h[x*<span class="number">2</span>+<span class="number">1</span>].ad2	:=(int64(h[x*<span class="number">2</span>+<span class="number">1</span>].ad2) * h[x].ad2) <span class="keyword">mod</span> (mo-<span class="number">1</span>);</span><br><span class="line">        h[x].ad2	:=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        times(h[x*<span class="number">2</span>].v,pow(h[x].ad,d[x*<span class="number">2</span>]));</span><br><span class="line">        times(h[x*<span class="number">2</span>].ad,h[x].ad);</span><br><span class="line">	times(h[x*<span class="number">2</span>+<span class="number">1</span>].v,pow(h[x].ad,d[x*<span class="number">2</span>+<span class="number">1</span>]));</span><br><span class="line">        times(h[x*<span class="number">2</span>+<span class="number">1</span>].ad,h[x].ad);</span><br><span class="line">        h[x].ad := <span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">modify1</span><span class="params">(x,l,r,st,en,w:longint)</span>;</span></span><br><span class="line"><span class="keyword">var</span>	mid:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">if</span> (st&lt;=l) <span class="keyword">and</span> (r&lt;=en) <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">		times(h[x].v,pow(w,d[x]));</span><br><span class="line">		times(h[x].ad,w);</span><br><span class="line">	<span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">		change(x,l,r);</span><br><span class="line">		mid:=(l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> en&lt;=mid <span class="keyword">then</span> modify1(x*<span class="number">2</span>,l,mid,st,en,w)</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> st&gt;mid <span class="keyword">then</span> modify1(x*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,st,en,w)</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">			modify1(x*<span class="number">2</span>,l,mid,st,mid,w);</span><br><span class="line">			modify1(x*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,en,w);</span><br><span class="line">		<span class="keyword">end</span>;</span><br><span class="line">		h[x].v:=(int64(h[x*<span class="number">2</span>].v) * h[x*<span class="number">2</span>+<span class="number">1</span>].v) <span class="keyword">mod</span> mo;</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">modify2</span><span class="params">(x,l,r,st,en,w:longint)</span>;</span></span><br><span class="line"><span class="keyword">var</span>	mid:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">if</span> (st&lt;=l) <span class="keyword">and</span> (r&lt;=en) <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">                h[x].v := pow(h[x].v,w);</span><br><span class="line">                h[x].ad := pow(h[x].ad,w);</span><br><span class="line">                h[x].ad2 := (int64(h[x].ad2) * w) <span class="keyword">mod</span> (mo-<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">		change(x,l,r);</span><br><span class="line">		mid:=(l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> en&lt;=mid <span class="keyword">then</span> modify2(x*<span class="number">2</span>,l,mid,st,en,w)</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> st&gt;mid <span class="keyword">then</span> modify2(x*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,st,en,w)</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">			modify2(x*<span class="number">2</span>,l,mid,st,mid,w);</span><br><span class="line">			modify2(x*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,en,w);</span><br><span class="line">		<span class="keyword">end</span>;</span><br><span class="line">		h[x].v:=(int64(h[x*<span class="number">2</span>].v) * h[x*<span class="number">2</span>+<span class="number">1</span>].v) <span class="keyword">mod</span> mo;</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">query</span><span class="params">(x,l,r,st,en:longint)</span>;</span></span><br><span class="line"><span class="keyword">var</span>	mid:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">if</span> (st&lt;=l) <span class="keyword">and</span> (r&lt;=en) <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">		times(ret,h[x].v);</span><br><span class="line">	<span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">		change(x,l,r);</span><br><span class="line">		mid:=(l+r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> en&lt;=mid <span class="keyword">then</span> query(x*<span class="number">2</span>,l,mid,st,en)</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> st&gt;mid <span class="keyword">then</span> query(x*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,st,en)</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">			query(x*<span class="number">2</span>,l,mid,st,mid);</span><br><span class="line">			query(x*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,en);</span><br><span class="line">		<span class="keyword">end</span>;</span><br><span class="line">		h[x].v:=(int64(h[x*<span class="number">2</span>].v) * h[x*<span class="number">2</span>+<span class="number">1</span>].v) <span class="keyword">mod</span> mo;</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">enter</span><span class="params">(x,i:longint)</span>;</span></span><br><span class="line"><span class="keyword">var</span>	y:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	y:=abs(x) <span class="keyword">mod</span> hamo;</span><br><span class="line">	<span class="keyword">while</span> hash[y,<span class="number">1</span>]&lt;&gt;<span class="number">0</span> <span class="keyword">do</span> y:=(y+<span class="number">1</span>) <span class="keyword">mod</span> hamo;</span><br><span class="line">	hash[y,<span class="number">1</span>]:=i;</span><br><span class="line">	hash[y,<span class="number">2</span>]:=x</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ha</span><span class="params">(x:longint)</span>:</span>longint;</span><br><span class="line"><span class="keyword">var</span>	y:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	y:=abs(x) <span class="keyword">mod</span> hamo;</span><br><span class="line">	<span class="keyword">while</span> hash[y,<span class="number">2</span>]&lt;&gt;x <span class="keyword">do</span> y:=(y+<span class="number">1</span>) <span class="keyword">mod</span> hamo;</span><br><span class="line">	<span class="keyword">exit</span>(hash[y,<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	readln(n);</span><br><span class="line">	<span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span> <span class="keyword">begin</span></span><br><span class="line">		<span class="keyword">read</span>(q[i,<span class="number">1</span>],q[i,<span class="number">2</span>],q[i,<span class="number">3</span>]);</span><br><span class="line">		<span class="keyword">if</span> q[i,<span class="number">1</span>]&lt;&gt;<span class="number">2</span> <span class="keyword">then</span> <span class="keyword">read</span>(q[i,<span class="number">4</span>]);</span><br><span class="line">		inc(t); a[t]:=q[i,<span class="number">2</span>];</span><br><span class="line">		inc(t); a[t]:=q[i,<span class="number">3</span>];</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line">	qsort(a,<span class="number">1</span>,t);</span><br><span class="line">	kk:=a[<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span> i:=<span class="number">2</span> <span class="keyword">to</span> t <span class="keyword">do</span> <span class="keyword">begin</span></span><br><span class="line">		<span class="keyword">if</span> kk&lt;&gt;a[i] <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">			inc(sum);</span><br><span class="line">			enter(kk,sum);</span><br><span class="line">			len[sum]:=a[i]-kk;</span><br><span class="line">			kk:=a[i];</span><br><span class="line">		<span class="keyword">end</span>;</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line">	inc(sum); enter(a[t],sum); dec(sum);</span><br><span class="line">	maketree(<span class="number">1</span>,<span class="number">1</span>,sum);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span> <span class="keyword">begin</span></span><br><span class="line">		x:=ha(q[i,<span class="number">2</span>]);</span><br><span class="line">		y:=ha(q[i,<span class="number">3</span>])-<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">case</span> q[i,<span class="number">1</span>] <span class="keyword">of</span></span><br><span class="line">			<span class="number">0</span>:<span class="keyword">begin</span></span><br><span class="line">				z:=q[i,<span class="number">4</span>];</span><br><span class="line">				modify1(<span class="number">1</span>,<span class="number">1</span>,sum,x,y,z);</span><br><span class="line">			<span class="keyword">end</span>;</span><br><span class="line">			<span class="number">1</span>:<span class="keyword">begin</span></span><br><span class="line">				z:=q[i,<span class="number">4</span>];</span><br><span class="line">				modify2(<span class="number">1</span>,<span class="number">1</span>,sum,x,y,z);</span><br><span class="line">			<span class="keyword">end</span>;</span><br><span class="line">			<span class="number">2</span>:<span class="keyword">begin</span></span><br><span class="line">				ret:=<span class="number">1</span>;</span><br><span class="line">				query(<span class="number">1</span>,<span class="number">1</span>,sum,x,y);</span><br><span class="line">				writeln(ret);</span><br><span class="line">			<span class="keyword">end</span>;</span><br><span class="line">		<span class="keyword">end</span>;</span><br><span class="line">	<span class="keyword">end</span>; </span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>信息学</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>线段树</tag>
        <tag>hash</tag>
        <tag>快速幂</tag>
      </tags>
  </entry>
  <entry>
    <title>网盘的那些事</title>
    <url>/2016/%E7%BD%91%E7%9B%98%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="契机"><a href="#契机" class="headerlink" title="契机"></a>契机</h1><p>因为受到了一万点来自快盘的伤害，所以我决定要写篇博文记录，并回忆这些年来与各种各样的网盘发生形形色色的事。</p>
<h1 id="早期"><a href="#早期" class="headerlink" title="早期"></a>早期</h1><p>早在小学时期，我就曾经用过最早期的163网易邮箱网盘。当时的口号还挺厉害的：2GB的存储空间，抛弃U盘。</p>
<p>在当时其实挺不现实的，家里还用着512k的网速，但相较于U盘有着无可比拟的优势。不需要带着U盘到处跑，也不用担心U盘中的病毒，只要在任何能够联网的电脑都可以拿到文件。</p>
<p>于是我在小学时期就通过网易的邮箱网盘收集了许多资料，这些资料也跟着我不断的换网盘，而不断的转移。</p>
<p>在这段时间，我好像见过中国电信的同步盘，但并没有用过。</p>
<h1 id="快盘"><a href="#快盘" class="headerlink" title="快盘"></a>快盘</h1><p><img data-src="http://wap.yesky.com/uploadImages/2014/008/I5WU2VK8AH3S.png" alt="快盘"></p>
<h2 id="契机-1"><a href="#契机-1" class="headerlink" title="契机"></a>契机</h2><p>遇到金山快盘源于黑基网的一篇文章。最初只有免费的5G容量，但可以不断的使用增加容量。最开始只有同步盘的客户端，是为了配合WPS的使用。金山做软件我还是很放心的，没有怎么令我失望过。(话说，我也是大概在这个时候认识的雷军和傅盛)金山的软件界面美观，运行速度也快。所以，至今我仍在用很多他们出品的软件，尽管现在已经落寞了。(也是因此让我对小米的软件miui放心)</p>
<h2 id="使用体验"><a href="#使用体验" class="headerlink" title="使用体验"></a>使用体验</h2><p>体验是相当不错的，并且金山也挺重视。论坛上讨论的人也很多。对于很多需要用U盘传输文件的商业人士，帮助确实很大。</p>
<p>诸如各式各样的图标状态显示，历史记录查询，同步目录选择，极速秒传…</p>
<p>但是便捷式网盘就做得非常差了，有时对一些大型的文件夹重命名都不可以。</p>
<h2 id="波折"><a href="#波折" class="headerlink" title="波折"></a>波折</h2><p>当快盘刚起步时，国内的网盘商还是相当少的。本来可以好好的继续改进产品，增加用户粘性的。却没有抓住这个机会。被后来居上的百度云，360，微盘所超过。</p>
<p>后面也是觉得快盘开始力不从心，加之存储式的网盘做得不好，通过多层比较最后确定了使用百度云。</p>
<h2 id="关停"><a href="#关停" class="headerlink" title="关停"></a>关停</h2><p>2015年4.28号宣布停止个人存储业务。6,30开始删数据。对于这条消息，完全在我的意料之内，但是，没想到这一天来的实在是太快了。让我没有一个充足的准备。</p>
<p>更无语的是，除了官网上的那个小小的公告，竟然在其他地方没有任何关停的消息。客户端好歹也可以弹个窗啊！搞得很没事人一样，要不是我突然在知乎上看到其他网盘关停的消息，我还不一定会去官网。后来证实给我的邮箱发了封邮件。</p>
<h1 id="金山T盘"><a href="#金山T盘" class="headerlink" title="金山T盘"></a>金山T盘</h1><p><img data-src="http://i4.qhimg.com/dr/270_500_/t0151275064d04b10fe.png"></p>
<p>在我用快盘不到1年的时间，金山(珠海)又做出了一个T盘，功能跟快盘一模一样，就是空间加到了1T。就连应用都是一模一样的，就改了个名字。</p>
<p>刚开始使用时还需要强邀请码，第一次体会到邀请码是多么的难强。凭着我家的弱网速，花费了3分钟才抢到了一个。6分钟就抢光了！</p>
<p>所以我就着手快盘到T盘的迁移工作。事实是，不过1年，金山就宣布停止服务了，提供工具给我们将数据转向快盘。说好的1T就这样的没了。因为在T盘使用容量没超过20G，所以就以最低20G打发了我到快盘。</p>
<p>当时就感觉我被骗了，说好的永久免费的1TB呢…</p>
<h1 id="115网盘"><a href="#115网盘" class="headerlink" title="115网盘"></a>115网盘</h1><p><img data-src="http://img.wdjimg.com/mms/icon/v1/3/5f/1d95777932387dfcfde37f6a75b265f3_256_256.png"></p>
<p>115网盘也算是一个极为早期的网盘，现在(2016)也还在，但随着分享功能的失效，使用的人数越来越少。</p>
<p>我最初用的时候,好像并没有同步盘的功能,软件页面像是一个下载器。空间上也没有什么竞争力。偶尔传些数据也就没多大用处了。</p>
<h1 id="Dbank华为网盘"><a href="#Dbank华为网盘" class="headerlink" title="Dbank华为网盘"></a>Dbank华为网盘</h1><p><img data-src="http://techdoc.fd.zol-img.com.cn/g4/M0A/0E/0F/Cg-4WVIUoUeIYoZGAABP5_AUvcEAAK7EAGPhvwAAE__925.jpg"></p>
<p>这是我使用的第一个华为的软件服务。很早以前，就用过华为做得modern,虽然坏过很多次，但好歹也是全球500强公司，公司页面也够简洁，低调。虽说华为做得UI，确实叫人着。</p>
<p>因为华为网盘的网页端对同步盘与非同步盘有明显的分割，并且能够很方便的转移。其他功能又和快盘差不多。为了能够达成文件的统一，我又一次的将文件从快盘搬了过去。</p>
<p>最后，也逃不过我的放弃。然而放弃的原因我已经忘记了</p>
<h1 id="360云盘"><a href="#360云盘" class="headerlink" title="360云盘"></a>360云盘</h1><p><img data-src="http://p5.qhimg.com/dr/250_500_/t015be054f817a3449f.png"></p>
<p>听说360要出云盘了，而且还是36T哦！听到这，我就没敢用，因为我坚信360这样做吃枣药丸。<br>然而我好像打脸了，因为到2016它还是正常运营的，反而快盘挂了。360还是有其他优势的，他的网盘支持离线下载，分享的外链也很简洁。速度也很快。当时就当作为我的cc软件集发布工具用了。</p>
<h1 id="百度云"><a href="#百度云" class="headerlink" title="百度云"></a>百度云</h1><p><img data-src="http://img1.cache.netease.com/catchpic/4/4D/4DDF86F2214B871BB16FE5C4290884A2.jpg"><br>百度三大良心产品之一啊！！第一就要颁给百度云啦！搜索和贴吧只能排到后面。<br>彻底刷新了我对网盘的认知。<br>百度云初期那是相当的业界良心啊！！<br>也正式因此使他后来居上，成为网盘界的佼佼者。<br>每个账号都可以获得2T的空间，他的同步功能虽然不如Dropbox，但在其他方面还是很有优势的。不用担心被墙的问题。离线下载支持很多协议，如果先前有人离线过了，就可以直接存在网盘里，初期的分享是不限速的。虽然客户端做的比较差，卡的不行！网页端做的还是相当可以，无论是建立，删除，移动，重命名速度都很快！还有得益于百度的强大搜索功能。当然这些只是网盘的基础服务，只是百度云将这些服务做得更好罢了。<br>百度云的强大在于它将数据用活了起来。压缩包可以直接在云端解压查看，office系列文件，可以直接在网页上浏览。视频也可以直接观看，选择不同的画质。<br>在国内，也只有百度云将网盘做成这样的方便。虽然，国外也有很多类似的网盘，但都逃不过速度慢，被墙，空间小这些缺陷。</p>
<h1 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h1><p><img data-src="http://pic.baike.soso.com/p/20130515/20130515150325-379335333.jpg"><br>良心网站啊，空间无上限，还不怕被墙。(虽然随时有要墙掉的风险)<br>然而他并不是真正的网盘！！！<br>但用他来存一些开放的小文件还是可行的！而且有直链哦！加上IDM多线程加速，速度不是问题！<br>总之现在是被我用来存放信息学程序，翻墙工具及博客网站数据的地方。</p>
<h1 id="七牛云存储"><a href="#七牛云存储" class="headerlink" title="七牛云存储"></a>七牛云存储</h1><p><img data-src="http://b12.cn/v2/pc/img/footer/qn.png"><br>空间只有1个G，用来存网站的静态数据绰绰有余了，速度很快，毕竟国内CDN加速。还支持其他的文件处理服务。<br>现在已弃用，国家管的严了，存数据都需要实名制，而我不想在这么多的平台上实名制，所以就将博客静态数据转移到博客自身的网站中。</p>
<h1 id="坚果云"><a href="#坚果云" class="headerlink" title="坚果云"></a>坚果云</h1><p>坚果云也是有点历史的网盘了，只不过，我认识它比较晚。在360网盘倒了之后，了解到的。比较吸引我的时他的收费方式，是按流量计费的，并且空间无上限。<br>试用了一段时间，发现具备金山快盘所拥有的一切功能，甚至比金山快盘在速度，分析变动上面还要好。<br>唯一缺点就是免费用户限制的有点死，1G上传，3G下载…<br>大一寒假时买了一年的坚果云会员，觉得还是有点贵，主要是我需要同步的文件也不太多，主要的程序代码都通过git管理，上传到GitHub，Gitee这些Git托管网站了。本来买会员就是为了能顺带当网盘用，总的还不错，但是不能满足我在线点播WebDAV视频的需求。最后，决定不再续费了。<br>点播需求就交由阿里云学生机完成了。</p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>我也记不得还用过哪些网盘啦！总之，上面的都是那些我用了有一段时间，让我还有记忆的网盘。<br>国外的网盘还真的没用过，但因为我不能时刻保证都可以越过GFW。所以，就算是体验再好，关键时刻用不了也是很影响体验的！</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>因为现在已经有很多家网盘商，放弃了个人网盘，这种拖后腿不赚钱的业务。而我的网盘数据又众多，我又不想存在本地磁盘上占用空间。又不想突然间挂了，还要搬来搬去。还好，现在在学校，网速够快，要不然100G的文件要我搬多久啊！！<br>这次，众多网盘关闭，让我不再敢相信国内的网盘服务了！万一哪天数据说没就没了呢！承担不起啊！！<br>但是国外的网盘又不能保证时时刻刻都能用，所以经过我的深思熟虑的得到了一下对策！</p>
<h1 id="对策"><a href="#对策" class="headerlink" title="对策"></a>对策</h1><p>同步盘：坚果云，小米云<br>资源盘：百度云<br>备份盘：移动硬盘<br>程序： Github，Gitee<br>图片与视频：Google Photos</p>
<p>手机上的数据就交给小米云了。<del>(&gt;_&lt;)</del>呜呜，谁叫我上了miui这条贼船呢！<br>当然小米云还是很贴心的，各种数据都能备份。妈妈再也不用担心我刷机后丢数据啦！网速好的状态下，半个小时新手机就能变成旧手机。<br>坚果云，还没怎么用，除了界面丑了点，限制上传下载数据量坑了点，其他还好！知乎众多用户的推荐，你值得拥有！据说是国内学Dropbox学的最像的。<br>剩下的那种又大又笨拙，还不经常用的数据只好放在百度云了，毕竟有百度靠着。比什么360靠谱多了！<br>因为Csdn Code能够免费创建私密仓库，所以我才用。要不然才不会用这么脑残的东西。还因为我有个CSDN博客在这上面。<br>因为本人是拍照狂魔，然后通过大数据研究发现，本人大部分数据还是照片视频。之前听说Yahoo Flickr可以存照片，有1TB的存储空间，又听说2015 Google I&#x2F;O大会上发布了一个新产品Google photos。无限存储照片视频，而且还有autotag功能。可能以后还会更强大！毕竟，今年(2016)AlphaGo可是赢了人类啊！所以最终我选择了Google。<br>这样我的照片终于有了一个归宿了。</p>
<p>现在我会在本地也留一份文件！不再那么相信网盘了！文件又不是他们的，他们才没心思管你呢！！</p>
]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>荣誉学院申请表三问</title>
    <url>/2018/%E8%8D%A3%E8%AA%89%E5%AD%A6%E9%99%A2%E7%94%B3%E8%AF%B7%E8%A1%A8%E4%B8%89%E9%97%AE/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ol>
<li>您认为的自主学习</li>
<li>您的人生方向</li>
<li>您对荣誉学院理念的理解。</li>
</ol>
<p>我认为自主学习是作为现代人都应具备的品质。而自主学习与传统的学习不同，他需要你对自己有清晰的认知并有足够的自律性，明确自己需要学习些什么，然后通过各种可行的手段（如阅读，搜索，询问，探讨等方式）自行安排计划学习。从实践的角度出发，我认为我是具备一定的自主学习能力。高中时期，我参加过信息学竞赛，因为每个人的进度不同，所以我们的教练会给我们提供各种资源，引导我们自主学习。而我主要通过与同年级的同学讨论，自己上网查找（博文，维基百科）资料来解决我所遇到的问题。<br>至于人生方向，就目前而言，一方面是继续学习基础知识，大学阶段是最后能有大片时间静下学习的时期，争取考研。另一方面是充实自己的大学校园生活，为融入社会做准备。至于长远的方向，我觉得应当做好自己，适应社会，并为人类社会尽自己微薄之力。<br>荣誉学院能提供一个更广阔的国际化的平台，让我们有机会接触到中国以外的教育，与各国学生一道交流学习。除此之外，荣誉学院对学生的自主学习，自主探讨研究能力有着很高的要求。能够锻炼自身能力，开阔自己的视野，增长自己的见识。</p>
]]></content>
      <categories>
        <category>个人</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>基于区块链的共享计费平台的跨链可信声誉方案</title>
    <url>/2022/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E4%B9%8B%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%85%B1%E4%BA%AB%E8%AE%A1%E8%B4%B9%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%B7%A8%E9%93%BE%E5%8F%AF%E4%BF%A1%E5%A3%B0%E8%AA%89%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="原文标题"><a href="#原文标题" class="headerlink" title="原文标题"></a>原文标题</h1><p>A Cross-Chain Trusted Reputation Scheme for a Shared Charging Platform Based on Blockchain<br>发表于 IEEE 物联网期刊，第 9 卷，第 11 期，2022 年 6 月 1 日<br><a href="https://ieeexplore.ieee.org/abstract/document/9495937/?casa_token=XWkeFAyn7_gAAAAA:8PehYuLHIj20fWmrMj4iB6R_DMPbhqCcMgKV6UpHh_nIQPZnHj6QSq4GZDJxxPxYjd9gOIzXDrB9iw">阅读链接</a></p>
<h2 id="为啥选择看这篇文章"><a href="#为啥选择看这篇文章" class="headerlink" title="为啥选择看这篇文章"></a>为啥选择看这篇文章</h2><ol>
<li>与当前研究方向（跨域数据跨链解决方向）契合。</li>
<li>选取顶会顶刊来看，IEEE Internet of Things Journal是SCI I区的。</li>
<li>最近几年的文章</li>
<li>页数（12页）不多，看起来不费劲</li>
</ol>
<h1 id="文章中名词解释"><a href="#文章中名词解释" class="headerlink" title="文章中名词解释"></a>文章中名词解释</h1><p>Electric Vehicle (EV)：电动车<br>Charging Pile (CP)：充电桩</p>
<h1 id="摘要部分"><a href="#摘要部分" class="headerlink" title="摘要部分"></a>摘要部分</h1><p>电动汽车的快速发展使得充电桩不足的问题显露。<br>为了解决充电桩不足的问题，充电桩的运营商（国家电网）将私人充电桩纳入共享充电系统。<br>这面临两个问题</p>
<ol>
<li>由于加入共享收费的私人充电桩缺乏维护人员，使用者往往面临充电桩损坏和充电桩拥有者服务态度差的问题</li>
<li>基于第三方平台的声誉解决方案面临单点故障的问题，基于区块链的声誉解决方案面临存储和查询效率的问题。</li>
</ol>
<p>本文做了什么：<br>本文提出了一个多链收费模型，在不同的区块链上存储不同类型的信息<br>（用户认证、收费记录和评级信息，为了提高存储和查询效率）<br>本文提出了一种跨链可信的智能合同(C2T智能合同)。<br>（用于保证跨链信息的真实性、实时性和链间写互斥锁）</p>
<h2 id="个人解读："><a href="#个人解读：" class="headerlink" title="个人解读："></a>个人解读：</h2><p>声誉其实我的理解就类似于推荐系统，给每个充电桩评定一个声誉，声誉好的价钱高的同时服务好。</p>
<h1 id="引言部分"><a href="#引言部分" class="headerlink" title="引言部分"></a>引言部分</h1><h2 id="新能源汽车发展现状及前景"><a href="#新能源汽车发展现状及前景" class="headerlink" title="新能源汽车发展现状及前景"></a>新能源汽车发展现状及前景</h2><p>简单介绍了下国内外新能源汽车的保有量。以及未来新能源汽车的发展<br>根据相关研究数据得出，私营充电桩规模远胜公共充电桩，并且私人充电桩也更便宜，技术更成熟。<br>新能源汽车用户对充电体验满意度最低。<br>为了改善用户的充电体验，提出了一种声誉机制，该机制根据用户评分计算充电桩的声誉，这样高声誉CP更容易被用户选中，从而获得更多的收费奖励。<br>问题：<br>各大 CP 运营商推出的私有 CP 共享平台都采用第三方平台，信誉计算依赖于第<br>三方平台收集的用户评分信息。虽然这种方法是有效的，但是它很容易受到单点故障和集中欺骗的影响。<br>解决方案：<br>因此，提出了一种基于区块链的声誉机制，它记录了区块链上的声誉以防止篡改<br>为了获得准确的声誉，需要用户认证和收费记录来过滤虚假评级<br>为了提高存储和搜索信息的效率，我们提出了一个多链收费模型。<br>（用户认证、收费记录和评级信息）</p>
<h2 id="现有跨链解决方案"><a href="#现有跨链解决方案" class="headerlink" title="现有跨链解决方案"></a>现有跨链解决方案</h2><p>简单介绍现有的跨链技术：<br>	1. 公正方案<br>	2. 侧链&#x2F;中继<br>	3. 哈希锁定<br>然而，这些跨链技术的大多数应用程序都集中在资产转移上，而不是信息调用。</p>
<p>受跨链技术的启发，我们提出了一种跨链可信智能契约(C2T 智能契约)<br>跨链思想的引入带来了以下三个重要挑战。<br>	1. 很难验证信息的真实性。<br>	2. 很难验证信息的实时性<br>	3. 计算的声誉可能与区块链中记录的信息不一致</p>
<p>C2T 智能契约，该契约部署在评价信息链上，可以调用身份信息链中的信息和收费信息链中的信息来计算声誉。该智能契约使用了数据互信机制、数据结构和哈希互斥体来<br>保证信息的安全性。<br>做出了以下贡献：<br>	1. 为了解决多链收费模型中信誉度的计算问题，我们设计了一个 C2T 智能契约来实现不同区块链之间的信息调用。<br>	2. 为了验证不同区块链之间调用信息的真实性，我们提出了一种基于 Merkle 证明的数据互信机制。在互信机制中，一方可以快速证明其他区块链上特定数据的真实性，而无需获得完整数据。<br>	3. 考虑到块大小限制问题，为了实现跨链信息的实时验证，我们提出了一种新的数据结构——VerRealTime，该结构由多个计数Bloom过滤器	(MCBFs)组成，可以保证跨链信息的实时性和节省空间。<br>	4. 为了确保信誉与区块链上的信息一致，本文使用了散列互斥锁定用于计算声誉的信息资源。在计算声誉之后，C2T 智能契约解锁锁定的信息，以确保强烈的声誉一致性。<br>	5. 我们从理论上分析了 C2T 智能合同的安全性。此外，我们还对消费进行了实验 C2T 智能合同的影响。</p>
<h1 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h1><p>介绍前人做的工作，与目前研究的工作的异同点。有无可借鉴的地方。<br>目前的跨链工作主要集中在资产交换和跨链沟通。<br>很少有研究，研究在信息交换过程中的真实性、实时性和互斥锁写互斥。<br><img data-src="/images/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%85%B1%E4%BA%AB%E8%AE%A1%E8%B4%B9%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%B7%A8%E9%93%BE%E5%8F%AF%E4%BF%A1%E5%A3%B0%E8%AA%89%E6%96%B9%E6%A1%88/%E8%B7%A8%E9%93%BE%E6%8A%80%E6%9C%AF%E6%AF%94%E8%BE%83%E8%A1%A8.png" alt="跨链技术比较表"></p>
<h1 id="模型构造和设计要求"><a href="#模型构造和设计要求" class="headerlink" title="模型构造和设计要求"></a>模型构造和设计要求</h1><h2 id="多链收费模型"><a href="#多链收费模型" class="headerlink" title="多链收费模型"></a>多链收费模型</h2><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><p>身份信息链 c1：负责存储数字证书及相关操作，例如电动车和保安员的创建和撤销;<br>收费信息链 c2：负责存储收费信息;<br>评估信息链 c3：负责存储保安员的服务质量评级。</p>
<h3 id="收费模型"><a href="#收费模型" class="headerlink" title="收费模型"></a>收费模型</h3><p><img data-src="/images/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%85%B1%E4%BA%AB%E8%AE%A1%E8%B4%B9%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%B7%A8%E9%93%BE%E5%8F%AF%E4%BF%A1%E5%A3%B0%E8%AA%89%E6%96%B9%E6%A1%88/%E5%A4%9A%E9%93%BE%E6%94%B6%E8%B4%B9%E6%A8%A1%E5%9E%8B.png" alt="多链收费模型"><br>在我们的收费模型中，有多个实体: 共享收费服务平台、CPs、 EVs 和多个链，如图所示。<br>共享收费服务平台负责 CPs，EVs 和多个链之间的交互。<br>充电完成后，可评估相应的指标，并将评级结果上载至评估报告信息链 C3。<br>充电完成后，充电交易会上传至充电信息链 C2。<br>多条信息链分别用于存储各类信息:<br>由于每个区块链的记账员和应用场景是不同的，每个区块链可以采用适合自己的应用场景的共识机制。<br>虽然第三方平台也可以用来创建、存储和撤销数字证书，但它们很容易成为许多攻击的目标，如单点攻击、恶意 CA。因此，本文引入 c1 来消除中央 CA 的局限性，确保信息安全。</p>
<h3 id="电动车充电流程"><a href="#电动车充电流程" class="headerlink" title="电动车充电流程"></a>电动车充电流程</h3><pre class="mermaid">graph LR
	subgraph 充电过程
		D[电动车] <--> E[共享充电服务平台]
		E[共享充电服务平台] -- 选取声誉最优--> G(充电桩) --检验合法性--> F[身份信息链]
		F[身份信息链] -- 返回认证结果并开始收费 --> E[共享充电服务平台]
		E[共享充电服务平台] -- 充电完成 --> H[收费信息链]
		E[共享充电服务平台] -- 评价充电桩声誉 --> I[评估信息链]
	end
	subgraph 使用系统前
		A(CPs) -- 注册 --> C[身份信息链]
		B(EVs) -- 注册 --> C[身份信息链]
	end</pre>

<p>具体来说，在<code>CPs</code>和<code>EVs</code>进入系统之前，他们首先需要在<code>身份信息链</code>上注册。<br>然后，当电动汽车需要充电时，电动汽车应用到共享充电服务平台进行充电。<br>服务平台根据<code>CPs</code>的声誉选择最优的<code>CP</code>，并将需要认证的信息发送给<code>身份信息链</code>。<br><code>身份信息链</code>不仅记录<code>CP</code>和<code>EV</code>的证书信息，还记录 用户注册、证书颁发、证书查询和证书撤销。<br>尽管新用户注册的可能性相对较小，但证书查询和证书撤销的操作需要经常更新。<br>验证后，结果返回到平台，然后平台授权对选定的<code>CPs</code>进行收费。<br>之后充电完成后，充电交易会上载至<code>收费信息链</code>。然后，充电电动车评估充电服务质量水平，并上传评级信息到<code>评估信息链</code>。<br>这里有一点值得注意: 在计算声誉的过程中，其他区块链的信息需要跨链调用。因此，我们设计了一个C2T智能契约，以确保真实性、实时性和链间写互斥锁的跨链信息。</p>
<h2 id="威胁模型"><a href="#威胁模型" class="headerlink" title="威胁模型"></a>威胁模型</h2><p>在计算 CP 信誉的过程中，涉及到不同区块链的信息。<br>一般来说，有三种形式的跨链攻击。</p>
<ol>
<li>真实性攻击: 在C2T智能契约调用信息的过程中，对手会伪造或篡改信息，使得智能契约获得的跨链信息不真实。</li>
<li>实时攻击: 在跨链调用信息的过程中，对手可能发出将区块链上的过时信息作为最新信息发送给C2T智能契约，导致计算相关信誉过期。</li>
<li>互斥锁写入互斥攻击: C2T智能契约调用所需信息后，如果对手通过写入方式改变被调用的信息，最终计算的信誉与块链上的信息不匹配。</li>
</ol>
<h2 id="设计目标"><a href="#设计目标" class="headerlink" title="设计目标"></a>设计目标</h2><ol>
<li>真实性:通过基于 Merkle 证明的数据互信机制，C2T智能契约可以快速地证明其他区块链上特定数据的真实性，而无需获取区块链上的所有数据。</li>
<li>实时:块链可以在有限的块空间内记录最新的实时信息。特别是，当信息被跨链调用时，信息的实时性可以通过携带少量的验证信息来验证。</li>
<li>互链写互斥锁:当C2T智能契约计算信誉时，被调用的信息需要被锁定。计算完成后，解锁。</li>
</ol>
<h1 id="跨链可信智能合同（C2T）"><a href="#跨链可信智能合同（C2T）" class="headerlink" title="跨链可信智能合同（C2T）"></a>跨链可信智能合同（C2T）</h1><p>区块链基于协商一致机制和密码技术，建立了一套内部安全机制。跨链调度信息将突破区块链的内部安全边界，因为<br>区块链不参与其他区块链的共识过程。在共享计费模型中，涉及到不同区块链之间的信息，因此有必要重建一个安全机<br>制来保证跨链信息的安全性。因此，我们设计了一个 C2T 智能契约，以确保真实性、实时性和链间写互斥锁的跨链信息。</p>
<h2 id="C2T智能合同的过程"><a href="#C2T智能合同的过程" class="headerlink" title="C2T智能合同的过程"></a>C2T智能合同的过程</h2><p>在计算声誉的过程中，涉及到多个链上信息的调用。为了确保跨链信息的真实性和可靠性，设计了一个 C2T 智能合同。具体过程如图 2 所示。<br><img data-src="/images/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%85%B1%E4%BA%AB%E8%AE%A1%E8%B4%B9%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%B7%A8%E9%93%BE%E5%8F%AF%E4%BF%A1%E5%A3%B0%E8%AA%89%E6%96%B9%E6%A1%88/C2T%E6%99%BA%E8%83%BD%E5%90%88%E5%90%8C.png" alt="C2T智能合同"><br>充电完成后，EVs 根据 CPs 的服务质量水平进行评分并签署 CPs。<br>记账员收集电动汽车在 CPs 上的评级，然后向评价信息链 c3 发送上传请求，以激活 C2T 智能合同。<br>为了防止CPs 和 EVs 的身份被伪造，C2T 智能合同将 CPs 和 EVs 的id 发送到身份信息链 c1 并请求它们的身份信息。<br>C1 接收到由共享计费服务平台签署的请求后，验证已签署的请求，并在区块链上搜索相关 CPs 和 EVs 的身份信息证书。查询的身份信息证书被发送到 C2T 智能合同进行验证。<br>如果 EV 和CP 的身份是真实的，C2T 智能合同将把 CP 的 ID 发送到收费信息链 C2。C2 会查询并将最新的充电信息返回给 C2T 智能合同。<br>在验证收费信息的真实性后，C2T 智能契约将收费信息上传到 C3，然后计算 CP 的信誉，并将计算的信誉存储在 c3 上，以便下次选择最优 CP。</p>
<h2 id="跨链真实性方案"><a href="#跨链真实性方案" class="headerlink" title="跨链真实性方案"></a>跨链真实性方案</h2><h3 id="名词解释-1"><a href="#名词解释-1" class="headerlink" title="名词解释"></a>名词解释</h3><p>C2T（CROSS-CHAIN TRUSTED）合约：跨链信任合约<br>Mv：在每个Cv(v ∈{1,2,3}上设置的一个用于证明数据真实性的证明模块。<br>Q &#x3D; (ID, c) ：Q表示QueReq（查询请求）用于在区块链上进行Merkle树查询<br>q {Cj,Q}：CallReq(调用请求)，其中两个参数表示区块链Ci，查询请求Q。<br>α：表示授权标识符<br>Sig(q,α): 签名函数<br>ID:表示 EV 或 CP 的 ID<br>c:表示查询请求的具体内容(在Merkle树上对应的c位置)<br>MP：查询进程<br>Info In： 查询信息<br><img data-src="/images/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%85%B1%E4%BA%AB%E8%AE%A1%E8%B4%B9%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%B7%A8%E9%93%BE%E5%8F%AF%E4%BF%A1%E5%A3%B0%E8%AA%89%E6%96%B9%E6%A1%88/%E6%95%B0%E6%8D%AE%E4%BA%92%E4%BF%A1%E6%9C%BA%E5%88%B6%E8%BF%87%E7%A8%8B.png" alt="数据互信机制过程"><br>由于区块链的可信环境只在区块链平台内生效，不能被其他区块链平台信任，因此需要引入额外的证明信息 p 来实现跨区块链平台的可信交互。因此，我们设计了一个基于Merkle证明的数据互信机制来验证跨链数据的真实性。</p>
<h3 id="查询过程"><a href="#查询过程" class="headerlink" title="查询过程"></a>查询过程</h3><p>当c3上的C2T智能契约向c1或c2发送调用请求CallReq &#x3D; { Cj，q }(j ∈{1,2} ，q &#x3D; (ID，c))时，<br>c3上的m3是对 q &#x3D; (ID，c)进行签名操作得到 Sig (q，α)，将 q 和 Sig (q，α)发送到 Cj，由 Cj 上的 Mj 将验证合法性。<br>在认证通过后，q 中的查询请求 QueReq Q &#x3D; (ID，c’)被发送到区块链进行信息查询。<br>将信息查询的结果 Info In (ID，c)和 c 发送到查询进程 MP(Que Info In (ID，c)，MP返回 Merkle 证明<br>给 c3 上的 C2T 智能契约。<br>MP (Que Info In (ID，c))被用作额外的证明信息 p，以确保跨链数据的真实性。<br>以图 3 中c 的查询过程为例，如果您想验证c的真实性，MP(QueInfoIn (ID，c))只需要包括验证C 的路径，即 Hd、 Hab 和 Habcd。<br>Merkle树验证过程：略</p>
<h2 id="跨链实时方案"><a href="#跨链实时方案" class="headerlink" title="跨链实时方案"></a>跨链实时方案</h2><p>Bloom 过滤器<br>一种实时方法是使用最新的块来存储实时信息列表，但该信息列表的存储空间将随着实时信息的增加而线性增加。<br>由于块的空间是有限的，Bloom 过滤器(BF)可以用来节省空间。<br>解释BF是啥？<br>介绍CBF<br>因为BF会用到多次哈希函数，耗时长！<br>为了减少多次哈希函数值转换所造成的运行时间，本文设计了一种数据结构VerRealTime 来解决这一问题。<br>在这个解决方案中，字符串只需要转换一次，然后使用多个 mod 函数来获取剩余的值，从而减少了多个 hash 函数值转换引起的运行时间。<br>具体来说，VerRealTime 使用 MCBFs 来表示一个多维集合的单属性域。MCBF 共同完成元素的表示，并判断一个<br>元素是否属于集合。换句话说，所有的 CBFs 都代表了信息的实时性。当执行实时验证时，VerRealTime 中的所有<br>CBFs 确定信息是否是一起的实时信息。跨链信息的实时验证原理如图 4 所示。<br><img data-src="/images/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%85%B1%E4%BA%AB%E8%AE%A1%E8%B4%B9%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%B7%A8%E9%93%BE%E5%8F%AF%E4%BF%A1%E5%A3%B0%E8%AA%89%E6%96%B9%E6%A1%88/%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%E5%88%9D%E5%A7%8B%E5%8C%96.png" alt="实时数据初始化"></p>
<h3 id="实时信息初始化"><a href="#实时信息初始化" class="headerlink" title="实时信息初始化"></a>实时信息初始化</h3><p>首先，初始化了一个包含 kcbfs 的数据结构 VerRealTime，其中所有元素都为零，存储在 kcbfs 中的内容分别对应于kmod 函数的映射结果。当块链上的实时信息 r 存储在 MCBF 中时，需要经过以下步骤: 首先对 r 进行哈希运算，通过哈希码函数获得相应的哈希值 hc。然后，选取 hc K 大素数的 Mod 函数的余数。Modi 获得的剩余 mi 被映射到对应于 CBFi 的相对位置，并且该位置的值增加一。将 r 中的所有元素按照上述步骤加入到 MCBF 中，最终生成可用于实时信息验证的 MCBF。<br><img data-src="/images/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%85%B1%E4%BA%AB%E8%AE%A1%E8%B4%B9%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%B7%A8%E9%93%BE%E5%8F%AF%E4%BF%A1%E5%A3%B0%E8%AA%89%E6%96%B9%E6%A1%88/%E5%AE%9E%E6%97%B6%E4%BF%A1%E6%81%AF%E5%88%9D%E5%A7%8B%E5%8C%96%E7%AE%97%E6%B3%95.png" alt="实时信息初始化算法"></p>
<h3 id="实时信息查询算法"><a href="#实时信息查询算法" class="headerlink" title="实时信息查询算法"></a>实时信息查询算法</h3><p><img data-src="/images/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%85%B1%E4%BA%AB%E8%AE%A1%E8%B4%B9%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%B7%A8%E9%93%BE%E5%8F%AF%E4%BF%A1%E5%A3%B0%E8%AA%89%E6%96%B9%E6%A1%88/%E5%AE%9E%E6%97%B6%E4%BF%A1%E6%81%AF%E6%9F%A5%E8%AF%A2%E7%AE%97%E6%B3%95.png" alt="实时信息查询算法"></p>
<h3 id="实时信息更新算法"><a href="#实时信息更新算法" class="headerlink" title="实时信息更新算法"></a>实时信息更新算法</h3><p><img data-src="/images/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%85%B1%E4%BA%AB%E8%AE%A1%E8%B4%B9%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%B7%A8%E9%93%BE%E5%8F%AF%E4%BF%A1%E5%A3%B0%E8%AA%89%E6%96%B9%E6%A1%88/%E5%AE%9E%E6%97%B6%E4%BF%A1%E6%81%AF%E6%9B%B4%E6%96%B0%E7%AE%97%E6%B3%95.png" alt="实时信息更新算法"></p>
<h2 id="跨链写互斥锁方案"><a href="#跨链写互斥锁方案" class="headerlink" title="跨链写互斥锁方案"></a>跨链写互斥锁方案</h2><p>在计算声誉的过程中，如果更新了计算声誉的CP或EV的相关信息，则计算的声誉是非实时的。与 CP 和 EV 的信息不匹配，导致计算无效。<br>因此，我们使用哈希互斥锁来锁定计算信誉的区块链信息资源，实现链间写互斥。<br>与传统的互斥锁相比，哈希互斥锁使用随机数 sj 和 hash(sj) 来解锁和锁定信誉计算资源 ωγ ∈ (所有区块链上的资源)。具体的解锁和锁定资源过程如算法4所示。<br>C2T智能合约在验证身份和交易的过程中产生随机数s1和s2。 s1 和 s2 被存储和散列，h1 &#x3D; hash(s1), h2 &#x3D; hash(s2)。<br>然后，将散列值hj分别发送给Cj。然后身份资源ωid∈ID和计费资源ωch∈CH分别在收到h1和h2后锁定，收到s1和s2时解锁。<br>ID是C1的所有资源，CH是C2的所有资源。<br>锁定 ωγ 后，将其发送到 C2T 智能合同进行验证。在计算出信誉后，sj被发送给 Cj 以解锁 ωγ。<br>这个过程保证了链间写互斥。<br><img data-src="/images/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%85%B1%E4%BA%AB%E8%AE%A1%E8%B4%B9%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%B7%A8%E9%93%BE%E5%8F%AF%E4%BF%A1%E5%A3%B0%E8%AA%89%E6%96%B9%E6%A1%88/%E9%94%81%E4%BA%92%E6%96%A5%E7%AE%97%E6%B3%95.png" alt="锁互斥算法"></p>
<h1 id="安全性分析和实验评估"><a href="#安全性分析和实验评估" class="headerlink" title="安全性分析和实验评估"></a>安全性分析和实验评估</h1><h2 id="安全分析"><a href="#安全分析" class="headerlink" title="安全分析"></a>安全分析</h2><p>为了解决信息的跨链安全问题，本文提出了一种C2T智能合约方案，实现信息的跨链交互。该方案由三种基本方法组成：1. Merkle证明算法实现真实性方案；<br>2. 实现实时方案的VerRealTime数据结构；<br>3. 哈希互斥体实现链间写入互斥方案。<br>在本节中，我们列出一些证明来证明真实性方案可以抵抗真实性攻击，实时方案可以抵抗实时攻击，链间写互斥方案可以抵抗链间写互斥攻击。<br>综上所述，C2T智能合约在威胁模型中可以抵抗真实性攻击、实时攻击、链间写互斥攻击，达到安全目的。</p>
<ol>
<li>真实性攻击：C2T 智能合约调用其他区块链上的信息时，使用 Merkle 证明算法作为其基本算法来保证信息的真实性。基于Merkle证明的数据互信机制，使C2T智能合约无需获取区块全量数据，即可快速证明调用信息的真实性，(类似于比特币快速支付验证SPV)</li>
<li>实时攻击：由 MCBF 组成的 VerRealTime 可以查询信息的实时性。当数据实时校验时，如果攻击者在调用信息的过程中将过期信息n作为实时信息r传递给C2T智能合约，则HashCode(n) &#x3D; HashCode(r), Modi(HashCode(n ) &#x3D; Modi(HashCode(r)) (1 ≤ i ≤ k). 数据结构找不到n的实时性，说明n是非实时信息。</li>
<li>跨链写入互斥攻击：在跨链过程中，C2T智能合约使用哈希互斥锁来锁定和解锁ωγ，以保证多链共享数据操作的完整性。当在 Cj 上调用 ωγ 计算信誉时，C2T 智能合约将 hj 发送给 Cj 以锁定 ωγ 。如果攻击者想要修改 ωγ ，资源已经被锁定，无法访问。</li>
</ol>
<h2 id="实验评估"><a href="#实验评估" class="headerlink" title="实验评估"></a>实验评估</h2><p>在这一部分中，我们得到了 C2T 智能合约的 gas 消耗以及 C2T 智能合约在该收费场景下威胁模型中对抗各种攻击的效果。<br>此外，我们还比较和分析了真实性方案中使用的 MCBF 与其他过滤器之间的区别。<br>同时，在跨链真实性方案中也测试了不同函数数量对误报率（FP）的影响。</p>
<p>C2T 智能合约的开销：C2T 智能合约涉及多条链之间的信息调用。我们在本地构建三个区块链：<br>1）身份信息链；<br>2）计费信息链；<br>3）评估信息链；<br>通过solidity编程语言编写智能合约。在 C2T 智能合约中，CP 的整个信誉计算过程包括跨链信息验证和信誉计算。跨链信息验证的重点主要是验证信息的真实性和实时性以及占用资源的不可篡改。因此，为了简单起见，我们直接将CP的声誉计算所需的信息保存到本地，由C2T智能合约调用。</p>
<h3 id="C2T-智能合约的开销："><a href="#C2T-智能合约的开销：" class="headerlink" title="C2T 智能合约的开销："></a>C2T 智能合约的开销：</h3><p>我们将 C2T 智能合约部署到 Remix IDE 以测量其 gas 消耗。 C2T 智能合约的主要 gas 消耗如图5和6。<br>图5显示了跨链验证过程中的主要gas消耗。但是在验证信息的真实性时，区块信息的多少和在Merkle树中的位置对gas消耗有很大的影响。因此，我们在不同的 Merkle 树上验证不同位置信息的真实性，并记录 gas 消耗量。结果如图6所示。由于信息验证和信誉计算过程涉及大量交互，消耗大量gas，因此占据了智能合约的主要消耗。<br><img data-src="/images/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%85%B1%E4%BA%AB%E8%AE%A1%E8%B4%B9%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%B7%A8%E9%93%BE%E5%8F%AF%E4%BF%A1%E5%A3%B0%E8%AA%89%E6%96%B9%E6%A1%88/%E4%B8%BB%E8%A6%81%E6%B0%94%E4%BD%93%E6%B6%88%E8%80%97.png" alt="主要气体消耗"><br><img data-src="/images/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%85%B1%E4%BA%AB%E8%AE%A1%E8%B4%B9%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%B7%A8%E9%93%BE%E5%8F%AF%E4%BF%A1%E5%A3%B0%E8%AA%89%E6%96%B9%E6%A1%88/%E4%B8%8D%E5%90%8C%E6%83%85%E5%86%B5%E4%B8%8B%E6%B0%94%E4%BD%93%E6%B6%88%E8%80%97.png" alt="不同情况下气体消耗"></p>
<h3 id="跨链真实性方案评估："><a href="#跨链真实性方案评估：" class="headerlink" title="跨链真实性方案评估："></a>跨链真实性方案评估：</h3><p>在没有真实性验证的情况下，攻击者可能会发起两种真实性攻击：</p>
<ol>
<li>是CP运营商或私人桩主雇佣有偿拥护者对自己的CP进行刷评价，以提高自己CP的声誉值；</li>
<li>是CP运营商在与其他运营商竞争时，雇佣付费支持者对CP进行恶意打分。（恶意竞争）<br>在这一部分，我们进行了两组实验。</li>
<li>实验测试了当评级服从具有不同方差的正态分布时对声誉计算的影响。</li>
<li>实验验证了 C2T 智能合约中的跨链真实性方案对两次真实性攻击的效果。<br>在第一组实验中，我们假设真实性方案验证后评分服从N(2, σ 2)；第一次攻击后评级服从 N(3, σ 2)；第二次攻击后评分服从 N(1, σ 2)。<br>第一组实验包括三个实验：<br>1）第一个实验测试不同方差的正态分布对高估评分声誉的影响；<br>2）第二个实验测试了不同方差的正态分布对正态评级声誉的影响；<br>3）第三个实验测试了不同方差的正态分布对低估评级声誉的影响。<br>具体效果如图7所示。<br>观察这组实验的结果可以看出，正态分布的方差σ2对首次真实性攻击和正态评级的信誉计算几乎没有影响。对于第二次真实性攻击，波动幅度在可控范围内，趋势一致。<br><img data-src="/images/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%85%B1%E4%BA%AB%E8%AE%A1%E8%B4%B9%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%B7%A8%E9%93%BE%E5%8F%AF%E4%BF%A1%E5%A3%B0%E8%AA%89%E6%96%B9%E6%A1%88/%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83%E5%AF%B9%E7%9C%9F%E5%AE%9E%E6%80%A7%E6%94%BB%E5%87%BB%E7%9A%84%E5%BD%B1%E5%93%8D.png" alt="正态分布对真实性攻击的影响"><br>因此，在第二组实验中，我们假设真实性方案验证后评分服从 N(2, 0.6)，第一次真实性攻击后评分服从 N(3, 0.6)，评分服从 N( 1, 0.6) 在第二次真实性攻击之后。该组实验包括两个实验。第一个实验包括两个遭受第一次真实性攻击的 CP：一个 CP 的真实性已经过验证，另一个没有。效果对比如图8(a)所示。第二个实验包括两个遭受第二次真实性攻击的 CP：一个 CP 已通过真实性验证，另一个未通过真实性验证。效果对比如图8(b)所示。<br><img data-src="/images/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%85%B1%E4%BA%AB%E8%AE%A1%E8%B4%B9%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%B7%A8%E9%93%BE%E5%8F%AF%E4%BF%A1%E5%A3%B0%E8%AA%89%E6%96%B9%E6%A1%88/%E7%9C%9F%E5%AE%9E%E6%80%A7%E6%96%B9%E6%A1%88%E5%AF%B9%E5%90%84%E7%A7%8D%E6%94%BB%E5%87%BB%E7%9A%84%E5%BD%B1%E5%93%8D.png" alt="真实性方案对各种攻击的影响"></li>
</ol>
<h3 id="跨链实时方案评估"><a href="#跨链实时方案评估" class="headerlink" title="跨链实时方案评估"></a>跨链实时方案评估</h3><p>在这一部分，我们首先比较一下MCBF、BF、CBF的区别。具体比较见表二。<br><img data-src="/images/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%85%B1%E4%BA%AB%E8%AE%A1%E8%B4%B9%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%B7%A8%E9%93%BE%E5%8F%AF%E4%BF%A1%E5%A3%B0%E8%AA%89%E6%96%B9%E6%A1%88/%E8%A1%A82.png" alt="表2"><br>BF中的位类型是bool类型，只存储0和1两个值。 BF为了不影响集合中已经存在的元素，只能添加元素不能删除，FP（false positive）率高。与BF相比，CBF中的bit类型为int类型，增加了删除操作，减少了FP。本文VerRealTime中使用的MCBF是由MCBF组成的。信息一次转换成值，然后用多个Mod取值的余数，可以减少hash函数转换带来的运行时间。<br>此外，在这种跨链实时方案中，实时信息的FPs与Mod函数的数量有关。我们将在MCBF中查询去重后的1亿条数据。最大可用内存为1G。实验结果如表 III 所示，其中显示了 Mod 函数的数量与 FP 率之间的关系。<br><img data-src="/images/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%85%B1%E4%BA%AB%E8%AE%A1%E8%B4%B9%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%B7%A8%E9%93%BE%E5%8F%AF%E4%BF%A1%E5%A3%B0%E8%AA%89%E6%96%B9%E6%A1%88/%E8%A1%A83.png" alt="表3"></p>
<h3 id="跨链写入互斥方案评估"><a href="#跨链写入互斥方案评估" class="headerlink" title="跨链写入互斥方案评估"></a>跨链写入互斥方案评估</h3><p>实验验证有效评分率δ为100%、80%、50%时链间写互斥的延迟时间。跨链写入互斥的延迟是C2T智能合约计算信誉时其他区块链的锁定时间，由信誉计算时间决定。信息跨链传输时，有效评分率表示参与信誉计算的传输信息的评分比例。<br>从图10可以看出，有效评级率越高，时延越大；反之亦然。<br><img data-src="/images/%E5%9F%BA%E4%BA%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%85%B1%E4%BA%AB%E8%AE%A1%E8%B4%B9%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%B7%A8%E9%93%BE%E5%8F%AF%E4%BF%A1%E5%A3%B0%E8%AA%89%E6%96%B9%E6%A1%88/%E5%9B%BE10.png" alt="图10"></p>
<h1 id="结论和未来的工作"><a href="#结论和未来的工作" class="headerlink" title="结论和未来的工作"></a>结论和未来的工作</h1><p>为保证C3、C1、C2之间信息的准确传输，我们提出了C2T智能合约调用多个区块链上的信息并进行信誉计算。<br>特别地，我们提出了一种数据互信机制，该机制使用 Merkle 证明作为底层算法来确保信息的真实性。此外，我们提出了一种数据结构VerRealTime，以保证信息的实时性。为了保证信息的链间写入互斥，我们提出了一种利用哈希互斥锁锁定区块资源的算法。安全分析和实验结果表明，C2T 智能合约实际上是可行的。<br>本文提出的解决方案也有一定的局限性。不同区块链之间的交互太多，造成大量的资源消耗。因此，在未来的研究工作中，我们会在每条区块链上部署一个智能合约，负责其所在区块链的计算过程。计算完成后，我们只需要在部署在不同区块链的智能合约之间传递计算结果即可。这种改进节省了传输资源消耗。</p>
<h1 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h1><p>文章好长，没我之前看的比特币简洁。<br>逻辑清晰，明确表明了现有的问题，自己的想法和解决方案。<br>关于<code>新能源汽车用户对充电体验满意度最低</code>部分在《2019年新能源汽车消费者市场调查报告》中找不到相关数据。<br>文章提出了个大致想法和一个智能合约，并尽可能的从多个角度来验证想法的可行性，文章中没有完整的实现。</p>
<h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><p>C2T合约是部署到哪个区块链上的？</p>
]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>论文</tag>
      </tags>
  </entry>
  <entry>
    <title>走进吉卜力的奇幻世界</title>
    <url>/2016/%E8%B5%B0%E8%BF%9B%E5%90%89%E5%8D%9C%E5%8A%9B%E7%9A%84%E5%A5%87%E5%B9%BB%E4%B8%96%E7%95%8C/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><h2 id="标题的命名"><a href="#标题的命名" class="headerlink" title="标题的命名"></a>标题的命名</h2><p>在此之前，我想了很久在这篇博文的命名上。首先我是想在命名中包含宫崎骏的名字。但总觉的这样不太好，原因如下:</p>
<ul>
<li>我所喜欢的已经从宫崎骏的作品中，渐渐延伸开来，到了整个吉卜力的作品</li>
<li>一部好的作品不仅仅只是一个人的功劳。(尽管宫崎骏是一个控制狂，但是没有像铃木敏夫这样的协调，推动，支持者，也就不会有现在的宫崎骏)</li>
<li>宫崎骏的名字貌似已经被用烂了(很多人不分黑白的，把吉卜力的作品往宫崎骏头上套)</li>
</ul>
<p>基于这些原因，我打消了使用宫崎骏名字的念头。因为出于对吉卜力和宫崎骏作品风格的喜爱，我觉得有必要加入吉卜力的名字。(尽管这个名字是宫崎骏胡乱从一架飞机名字中取来的)。这个标题也是在一个纪录片的名字中看到的，觉得还不错，就暂且取来用了。</p>
<h2 id="写作内容"><a href="#写作内容" class="headerlink" title="写作内容"></a>写作内容</h2><p>在这里，我会详细描述，这一个月以来，接触宫崎骏动画，到喜欢并沉迷于他的动画的过程中的所思所想。以及爱屋及乌的喜欢他这个人的具体评价。当然，这其中我是有参考许多其他人对他的作品或他本人的评价。这篇博文也主要偏向于宫崎骏的作品。</p>
<h2 id="温馨提示"><a href="#温馨提示" class="headerlink" title="温馨提示"></a>温馨提示</h2><p>这篇博文会比较冗长!!<br>这篇博文包含剧透!!</p>
<hr>
<h1 id="作品排行"><a href="#作品排行" class="headerlink" title="作品排行"></a>作品排行</h1><p><strong>(以下纯属个人观点)</strong></p>
<h2 id="宫崎骏"><a href="#宫崎骏" class="headerlink" title="宫崎骏"></a>宫崎骏</h2><ol>
<li>风之谷</li>
<li>天空之城</li>
<li>千与千寻</li>
<li>魔女宅急便</li>
<li>龙猫</li>
<li>幽灵公主</li>
<li>崖上的波妞</li>
<li>红猪</li>
<li>哈尔的移动城堡</li>
<li>起风了</li>
</ol>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol>
<li>萤火虫之墓</li>
<li>借东西的小人阿莉埃蒂</li>
<li>红花坂上的海</li>
<li>侧耳倾听</li>
<li>回忆中的玛妮</li>
<li>百变狸猫</li>
<li>地海战记</li>
<li>猫的报恩</li>
</ol>
<!--此处可以有视频链接-->
<hr>
<h1 id="配乐排行"><a href="#配乐排行" class="headerlink" title="配乐排行"></a>配乐排行</h1><h2 id="宫崎骏-1"><a href="#宫崎骏-1" class="headerlink" title="宫崎骏"></a>宫崎骏</h2><ol>
<li>天空之城</li>
<li>风之谷</li>
<li>龙猫</li>
<li>哈尔的移动城堡</li>
<li>千与千寻</li>
<li>魔女宅急便</li>
<li>幽灵公主</li>
<li>崖上的波妞</li>
<li>红猪</li>
<li>起风了</li>
</ol>
<h2 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h2><!--
3. 红花坂上的海
1. 萤火虫之墓
2. 借东西的小人阿莉埃蒂
4. 侧耳倾听
5. 回忆中的玛妮
6. 百变狸猫
7. 地海战记
8. 猫的报恩
-->
<hr>
<h1 id="未看过"><a href="#未看过" class="headerlink" title="未看过"></a>未看过</h1><ul>
<li>岁月的童话</li>
<li>我的领居山田君</li>
<li>辉夜姬物语</li>
</ul>
<p>因为高畑勋特殊的水彩画风，我比较难以接受，所以只看了两部他导演的作品。<br>(原谅我的双重标准……)</p>
<hr>
<h1 id="风之谷"><a href="#风之谷" class="headerlink" title="风之谷"></a>风之谷</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为宫崎骏第一部成名之作。(亦是第二部担任动画电影导演的作品)，在这之前他就已经参与过许多的动画电影的制作。已经有了丰富的经验。经过他千辛万苦的努力所争取到的动画电影制作机会。<br>这部宫老的作品是我眼中最好的最大气的一部。在这部电影和漫画中，倾泻了很多宫崎骏对人与自然的思考。<br>风之谷和天空之城一样，与之前宫崎骏的TV版动画《未来少年柯南》存在很大的相似性。</p>
<ul>
<li>都有一个拥有与大自然交流能力的女主</li>
<li>都有一个拥有着至上权利的女性角色，而且都改邪归正了！</li>
</ul>
<p>据说，庵野秀明将制作「风之谷」第2部，我认为这部作品出续集，我还是可以接受的。毕竟动画版的内容实在是太短，跟原版漫画思想上差了好几个台阶。<br>风之谷漫画版连载至1994年，而动画版1984年就已经完成并上映了。正因如此，才有更大的发挥空间去完成续集。</p>
<h3 id="作品主题"><a href="#作品主题" class="headerlink" title="作品主题"></a>作品主题</h3><h4 id="动画版"><a href="#动画版" class="headerlink" title="动画版"></a>动画版</h4><p>动画版在情节上是漫画版的精简，主要人物出场了1&#x2F;3。<br>尽管如此，宫崎骏通过自己的改编，以人与环境的关系问题为主题，以娜乌西卡善良且拥有着与虫类及其他动物沟通能力的人物形象为特征，呼吁我们去尊重、保护自然。人与自然，人与人应当和谐相处。<br>腐海产生的原因，正是为了要进化这个被人类污染了的世界。人类对大自然的污染越大，腐海的面积也会越大。而愚蠢的人类却对自然地态度却还停留在“七日之火”那场战役中，想通过巨神兵等具有强大杀伤力的武器征服自然。</p>
<h4 id="漫画版"><a href="#漫画版" class="headerlink" title="漫画版"></a>漫画版</h4><p>同动画版一样,娜乌西卡发现了腐海的秘密,是为了净化这个被人类污染的世界。而她的设定正好是救世主的存在。他拥有着与自然和人类沟通的能力。最后，她用自己的真诚，和坚定的反对战争。让几乎所有不同国家、不同种族、不同信仰的人相信了她，正因为她的存在，人类才得以和平相处一段时间。将所有的憎恶暂时的抛弃掉。<br>修瓦之墓才是这个世界的真正控制者。他们是“火之七日”中，最后的科学家，看到这个世界已经无法在短时间内恢复其自然的状态。而想到将一切推导重来，为此而设计了一个长达千年的净化程序。<br>腐海，王虫都是被人类基因改造过的生物。恶魔出现的原因正是因为这个陵墓，为了自身利益，不顾当今世界的其他生物，为了能够得到一个干净的世界，通过设定好的程序，而重新复活原人类。最后被向往生命自由的娜乌西卡用巨神兵给销毁了。<br>最后留给我们这样一个问题：在所有科技都已丢失，“心”的力量能否帮助人类渡过厄运？<br>（漫画版很好的打了环保主义的脸，最终人类就应当是一个被灭亡的族群。）</p>
<h3 id="漫画版剧情梗概"><a href="#漫画版剧情梗概" class="headerlink" title="漫画版剧情梗概"></a>漫画版剧情梗概</h3><p><a href="http://tieba.baidu.com/p/3460334387">漫画版剧情梗概</a></p>
<h3 id="观后感"><a href="#观后感" class="headerlink" title="观后感"></a>观后感</h3><p>第一次看这部作品,是在机房里…第一部让我看到落泪的电影。尤其是那段回忆，娜乌西卡小时候为了保护一个弱小的王虫。但是大人们不管王虫是否做过什么坏事，固执的认为人与昆虫是不能生存在同一个世界中的。<br>故事设定的背景是在工业文明消失于7日之火之后的第1000年。在这样的背景下，人类苟延残喘的活着。在这1000年中，虽说战争不像”七日之火”那样剧烈，但人与人依旧战争不断。不仅如此，世界的很多地方和国家都被腐海这一人类几乎无法生存的生态系统所控制。<br>（未完待续）</p>
<h3 id="收集"><a href="#收集" class="headerlink" title="收集"></a>收集</h3><ul>
<li>一次又一次被他的作品惊到。我不停的想象，那个总是爱用女孩做主角的男人在生活里是一个什么样的人，到底是什么赋予了他那么惊奇的想象力，如洪水般波涛汹涌，如雨露般永不枯竭。是什么让他的心中充满了童爱，让他的眼睛紧紧的盯着这个世界仅剩的纯净，以及用不同的方式来表达对这个世界的思索与关爱┅<br>(能看宫崎俊的动画就是幸福)[<a href="https://movie.douban.com/review/1479935/]">https://movie.douban.com/review/1479935/]</a><br>((蓝光风云)《风之谷》日A蓝光碟截图点评)[<a href="http://movie.mtime.com/10606/reviews/5775122.html]">http://movie.mtime.com/10606/reviews/5775122.html]</a><blockquote>
<p>我希望再活30年。我想看到东京被大海淹没，NTV(日本电视公司)的电视塔成为孤岛。我想看到曼哈顿成为水下之城……我对这一切感到兴奋。(因为)金钱和欲望，所有这一切会走向崩溃，绿色的杂草将接管(世界)。<br>—宫崎骏</p>
</blockquote>
</li>
</ul>
<h2 id="经典台词"><a href="#经典台词" class="headerlink" title="经典台词"></a>经典台词</h2><ol>
<li>人类，就是一直在重复过去的道路。每个人都认为自己是对的，然后就由罪恶衍生出更多的罪恶，悲哀衍生出更多的悲哀，永远找不到出路。</li>
<li>火在一天之内把森林烧成灰烬，水和风却需要一百年以上的时间来造林。</li>
<li>在我心中，也存在黑暗，如果这是我内在的森林，那这沙漠也是我内在的东西……若真是如此的话，他也便是我的一部分。</li>
<li>如果只是把世界分为清净和污浊两者，是不是就反而看不到真相了呢？</li>
<li>你们也喝井里的水吧?你们知道是谁在替你们净化那些水源?湖泊与河流中的水，都被人类污染了，是腐海中的树木，一直在净化被污染的水!绝不能烧掉腐海的森林，一切都错在你们发现了巨神兵!</li>
<li>憎恨蒙蔽了我的双眼，让我失去了理智。</li>
</ol>
<!-- ## 配乐 -->

<hr>
<h1 id="天空之城"><a href="#天空之城" class="headerlink" title="天空之城"></a>天空之城</h1><hr>
<h1 id="龙猫"><a href="#龙猫" class="headerlink" title="龙猫"></a>龙猫</h1><hr>
<h1 id="魔女宅急便"><a href="#魔女宅急便" class="headerlink" title="魔女宅急便"></a>魔女宅急便</h1><hr>
<h1 id="红猪"><a href="#红猪" class="headerlink" title="红猪"></a>红猪</h1><hr>
<h1 id="幽灵公主"><a href="#幽灵公主" class="headerlink" title="幽灵公主"></a>幽灵公主</h1><hr>
<h1 id="千与千寻"><a href="#千与千寻" class="headerlink" title="千与千寻"></a>千与千寻</h1><hr>
<h1 id="哈尔的移动城堡"><a href="#哈尔的移动城堡" class="headerlink" title="哈尔的移动城堡"></a>哈尔的移动城堡</h1><hr>
<h1 id="崖上的波妞"><a href="#崖上的波妞" class="headerlink" title="崖上的波妞"></a>崖上的波妞</h1><hr>
<h1 id="起风了"><a href="#起风了" class="headerlink" title="起风了"></a>起风了</h1><hr>
<h1 id="红花坂上的海"><a href="#红花坂上的海" class="headerlink" title="红花坂上的海"></a>红花坂上的海</h1><h2 id="一句话总结"><a href="#一句话总结" class="headerlink" title="一句话总结:"></a>一句话总结:</h2><p>精美的画面，积极活泼的海，沉重却不失浪漫的剧情，打动着我的心。</p>
<h2 id="观影前"><a href="#观影前" class="headerlink" title="观影前"></a>观影前</h2><p>看到是宫崎吾郎的作品。因为先前看到过他导演的地海战记，被世人吐槽许多。而且这是他第二部担任导演的剧场版电影。所以对这部片子颇有些担心。</p>
<h2 id="观影中"><a href="#观影中" class="headerlink" title="观影中"></a>观影中</h2><h2 id="开头就是一片自然环境的渲染，很不错！画面刻画的很细腻，在配上简单乐器弹奏的音乐，给人一种轻松、愉悦之感。很快就见到本片的女主角了松崎海。"><a href="#开头就是一片自然环境的渲染，很不错！画面刻画的很细腻，在配上简单乐器弹奏的音乐，给人一种轻松、愉悦之感。很快就见到本片的女主角了松崎海。" class="headerlink" title="开头就是一片自然环境的渲染，很不错！画面刻画的很细腻，在配上简单乐器弹奏的音乐，给人一种轻松、愉悦之感。很快就见到本片的女主角了松崎海。"></a>开头就是一片自然环境的渲染，很不错！画面刻画的很细腻，在配上简单乐器弹奏的音乐，给人一种轻松、愉悦之感。很快就见到本片的女主角了松崎海。</h2><h1 id="Tags"><a href="#Tags" class="headerlink" title="Tags"></a>Tags</h1><p>核阴影</p>
]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>未完成</tag>
      </tags>
  </entry>
  <entry>
    <title>趣写算法系列之--匈牙利算法</title>
    <url>/2016/%E8%B6%A3%E5%86%99%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97%E4%B9%8B-%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css">]]></content>
      <categories>
        <category>信息学</category>
        <category>转载</category>
      </categories>
      <tags>
        <tag>link</tag>
        <tag>二分图</tag>
        <tag>匹配</tag>
      </tags>
  </entry>
  <entry>
    <title>边缘计算之Cloudflare Workers</title>
    <url>/2019/%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97%E4%B9%8BCloudflare-Workers/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>一如既往的良心cloudflare，推出了新的Workers边缘计算服务，Serverless架构，并且提供二级域名<code>workers.dev</code>，从此告别复杂的服务器部署，维护。<br>这项服务很具有吸引力，尤其是像我这种轻量使用者，有时只是需要小部分计算资源，帮助我完成一些简单的事。</p>
<h1 id="jsproxy"><a href="#jsproxy" class="headerlink" title="jsproxy"></a>jsproxy</h1><p>借助Cloudflare全球的边缘节点，我们可以实现更高效的网页代理。<br><a href="https://51.ruyo.net/13487.html">利用CloudFlare Worker 免费部署 JSProxy 服务</a></p>
<h1 id="GoIndex"><a href="#GoIndex" class="headerlink" title="GoIndex"></a>GoIndex</h1><p>使用rcloud的Google Drive目录索引程序。<br><a href="https://www.moerats.com/archives/1001/">GoIndex：一个无需服务器的Google Drive目录索引程序</a></p>
]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>铺砖问题</title>
    <url>/2015/%E9%93%BA%E7%A0%96%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>用1×2的 砖头铺满N*M的区域，不能有重叠，一共有多少种方案？如下图所示：<br><img data-src="/images/%E9%93%BA%E7%A0%96%E9%97%AE%E9%A2%98/0.png" alt="方式"></p>
<h1 id="Data-Constraint"><a href="#Data-Constraint" class="headerlink" title="Data Constraint"></a>Data Constraint</h1><p>20%的数据满足1&lt;&#x3D;N,M&lt;&#x3D;6<br>50%的数据满足1&lt;&#x3D;N&lt;&#x3D;100,1&lt;&#x3D;M&lt;&#x3D;11<br>另外50%的数据满足1&lt;&#x3D;N&lt;&#x3D;10^200,1&lt;&#x3D;M&lt;&#x3D;5</p>
<h1 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h1><p><strong>对于此题的前50%的数据</strong><br>可以参照此位大神的解析：<br><a href="http://blog.csdn.net/yan_____/article/details/8719748">http://blog.csdn.net/yan_____/article/details/8719748</a><br>我的程序前50%就是参考了这篇文章</p>
<p><strong>对于100%的数据</strong></p>
<ol>
<li>我们发现N很大，但是M却很小。</li>
<li>前50%的数据我们都是通过不同的二进制状态转移并累加得到的。这种转移就显然就是矩阵自乘的结果。而他的答案就是$a[(1 shl m)-1,(1 shl m)-1]$,表示从(1 shl m)-1转移到(1 shl m)-1的方案数。</li>
<li>那么我们可以将前50%数据得到的st数组中的对应值映射到[0..1 shl m,0..1 shl m]的矩阵中，然后将这个矩阵自乘n次即可得到答案。</li>
<li>矩阵自乘可以用快速幂进行优化。</li>
<li>因为做一次矩阵乘法的时间复杂度为$O(N^3)$。所以整体的时间复杂度为$O((2^m)^3*log(10^100)&#x2F;log(2))$。</li>
<li>因为n极其的庞大所以在做快速幂时我们需要用到单精除。</li>
<li>可能很多人会不理解为什么用矩阵乘法和为什么答案是$a[(1 shl m)-1,(1 shl m)-1]$。(懂得人可以忽略此部分内容)</li>
</ol>
<p>对于每一层来说，因为st数组中$st[i][0] $都可以到$st[i][1]$ 。所以我们首先想想最简单的情况:<br>当n&#x3D;1时，他的答案就是从$dp[0][1 shl m-1]$ 到$dp[1][1 shl m-1] $。就是 $base[1 shl m -1] [1 shl m-1]$。<br>当n&#x3D;2 时，我们可以看看矩阵乘法的工作原理 对于答案$ans[i,j] +&#x3D; a[i,k]*a[k,j]$，他是通过枚举k将第i行和第j列一一对应相乘并累加的道德结果。而在我们的基础矩阵base存放的就是第i行的状态可以转移到哪j个状态。当你要从i这个状态到j这个状态，我们可以枚举一个中间点k让i先到k，再从k到j<br>,这样恰好进行了两次转移所以这个ans矩阵，就代表从第i个状态经过了n次转移(看你乘了多少次)到达第j个状态的方案数。<br>其实矩阵乘法可以类比floyd求最短路的算法。</p>
<h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><p>因为代码比较丑，所以不要见怪</p>
<figure class="highlight pascal"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span>	maxn=<span class="number">100</span>+<span class="number">5</span>;maxm=<span class="number">10</span>+<span class="number">5</span>;</span><br><span class="line">		mo=<span class="number">1000000007</span>;len=<span class="number">17</span>;size=(<span class="number">1</span> <span class="keyword">shl</span> <span class="number">5</span>);jw=<span class="number">100000000000000000</span>;</span><br><span class="line"><span class="keyword">type</span>	bignum=<span class="keyword">array</span>[<span class="number">0</span>..<span class="number">15</span>] <span class="keyword">of</span> int64;</span><br><span class="line">		matrix=<span class="keyword">array</span>[<span class="number">0</span>..size,<span class="number">0</span>..size] <span class="keyword">of</span> int64;</span><br><span class="line"><span class="keyword">var</span>	i,j,m,n,tot,tmp:longint;</span><br><span class="line">	st:<span class="keyword">array</span>[<span class="number">0</span>..(<span class="number">1</span> <span class="keyword">shl</span> maxm),<span class="number">0</span>..<span class="number">1</span>] <span class="keyword">of</span> longint;</span><br><span class="line">	dp:<span class="keyword">array</span>[<span class="number">0</span>..maxn,<span class="number">0</span>..(<span class="number">1</span> <span class="keyword">shl</span> maxm)] <span class="keyword">of</span> int64;</span><br><span class="line">	s,nn,mm:<span class="keyword">string</span>;</span><br><span class="line">	base,ans:matrix;</span><br><span class="line">	n1:bignum;</span><br><span class="line">	sum:int64;</span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">dfs</span><span class="params">(n,from,next:longint)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">if</span> (n&gt;m) <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">		<span class="keyword">exit</span>;</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line">	<span class="keyword">if</span> (n=m) <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">		st[tot][<span class="number">0</span>]:=from;</span><br><span class="line">		st[tot][<span class="number">1</span>]:=next;</span><br><span class="line">		inc(tot);</span><br><span class="line">		<span class="keyword">exit</span>;</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line">	dfs(n+<span class="number">2</span>,(from&lt;&lt;<span class="number">2</span>)+<span class="number">3</span>,(next&lt;&lt;<span class="number">2</span>)+<span class="number">3</span>);</span><br><span class="line">	dfs(n+<span class="number">1</span>,(from&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>,(next&lt;&lt;<span class="number">1</span>));</span><br><span class="line">	dfs(n+<span class="number">1</span>,(from&lt;&lt;<span class="number">1</span>),(next&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">div2</span><span class="params">(<span class="keyword">var</span> x:bignum)</span>;</span></span><br><span class="line"><span class="keyword">var</span>	i,t:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	t:=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> i:=x[<span class="number">0</span>] <span class="keyword">downto</span> <span class="number">1</span> <span class="keyword">do</span> <span class="keyword">begin</span></span><br><span class="line">		x[i]:=t*jw+x[i];</span><br><span class="line">		t:=x[i] <span class="keyword">mod</span> <span class="number">2</span>;</span><br><span class="line">		x[i]:=x[i] <span class="keyword">div</span> <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span> x[i]=<span class="number">0</span> <span class="keyword">then</span> x[<span class="number">0</span>]:=i-<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">stom</span><span class="params">(<span class="keyword">var</span> s:<span class="keyword">string</span>;<span class="keyword">var</span> num:bignum)</span>;</span></span><br><span class="line"><span class="keyword">var</span>	ts:<span class="keyword">string</span>[len];</span><br><span class="line">	i:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	fillchar(num,sizeof(num),<span class="number">0</span>);</span><br><span class="line">	ts:=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">	<span class="keyword">for</span> i:=length(s) <span class="keyword">downto</span> <span class="number">1</span> <span class="keyword">do</span> <span class="keyword">begin</span></span><br><span class="line">		ts:=s[i]+ts;</span><br><span class="line">		<span class="keyword">if</span> length(ts)=len <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">			inc(num[<span class="number">0</span>]);</span><br><span class="line">			val(ts,num[num[<span class="number">0</span>]]);</span><br><span class="line">			ts:=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">		<span class="keyword">end</span>;</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line">	<span class="keyword">if</span> ts&lt;&gt;<span class="string">&#x27;&#x27;</span> <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">		inc(num[<span class="number">0</span>]);</span><br><span class="line">		val(ts,num[num[<span class="number">0</span>]]);</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mul</span><span class="params">(x,y:matrix)</span>:</span>matrix;<span class="comment">//矩阵乘法</span></span><br><span class="line"><span class="keyword">var</span>     i,j,k,size1:integer;</span><br><span class="line">	z:matrix;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	size1:=(<span class="number">1</span>&lt;&lt;m);</span><br><span class="line">        fillchar(z,sizeof(z),<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> i:=<span class="number">0</span> <span class="keyword">to</span> size1 <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">for</span> j:=<span class="number">0</span> <span class="keyword">to</span> size1 <span class="keyword">do</span></span><br><span class="line">	<span class="keyword">for</span> k:=<span class="number">0</span> <span class="keyword">to</span> size1 <span class="keyword">do</span> <span class="keyword">begin</span></span><br><span class="line">		z[i,j]:=(z[i,j]+x[i,k]*y[k,j])<span class="keyword">mod</span> mo;</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line">	<span class="keyword">exit</span>(z);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">work</span><span class="params">(y:bignum)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	fillchar(ans,sizeof(ans),<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> i:=<span class="number">0</span> <span class="keyword">to</span> (<span class="number">1</span>&lt;&lt;m) <span class="keyword">do</span> ans[i][i]:=<span class="number">1</span>;</span><br><span class="line">	<span class="comment">//单位矩阵，就是实数中的1</span></span><br><span class="line">	<span class="keyword">while</span> (y[<span class="number">0</span>]&lt;&gt;<span class="number">0</span>) <span class="keyword">do</span> <span class="keyword">begin</span></span><br><span class="line">		<span class="keyword">if</span> odd(y[<span class="number">1</span>]) <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">			ans:=mul(ans,base);</span><br><span class="line">		<span class="keyword">end</span>;</span><br><span class="line">		base:=mul(base,base);</span><br><span class="line">		div2(y);</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	readln(s);</span><br><span class="line">	tmp:=pos(<span class="string">&#x27; &#x27;</span>,s);</span><br><span class="line">	nn:=copy(s,<span class="number">1</span>,tmp-<span class="number">1</span>);</span><br><span class="line">	mm:=copy(s,tmp + <span class="number">1</span>,length(s) - tmp);val(mm,m);</span><br><span class="line"></span><br><span class="line">	tot:=<span class="number">0</span>;</span><br><span class="line">	dfs(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (length(nn)&lt;=<span class="number">2</span>) <span class="keyword">or</span> (nn=<span class="string">&#x27;100&#x27;</span>) <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">		<span class="comment">//前50%的做法</span></span><br><span class="line">		val(nn,n);</span><br><span class="line">		<span class="keyword">if</span> odd(n*m) <span class="keyword">then</span> <span class="keyword">begin</span></span><br><span class="line">			writeln(<span class="number">0</span>);</span><br><span class="line">			<span class="keyword">exit</span>;</span><br><span class="line">		<span class="keyword">end</span>;	</span><br><span class="line"></span><br><span class="line">		dp[<span class="number">0</span>][(<span class="number">1</span>&lt;&lt;m)-<span class="number">1</span>]:=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span> </span><br><span class="line">			<span class="keyword">for</span> j:=<span class="number">0</span> <span class="keyword">to</span> tot-<span class="number">1</span> <span class="keyword">do</span> <span class="keyword">begin</span></span><br><span class="line">				dp[i][st[j][<span class="number">1</span>]]:=(dp[i][st[j][<span class="number">1</span>]]+dp[i-<span class="number">1</span>][st[j][<span class="number">0</span>]]) <span class="keyword">mod</span> mo;</span><br><span class="line">			<span class="keyword">end</span>;</span><br><span class="line">		writeln(dp[n][(<span class="number">1</span>&lt;&lt;m)-<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">		fillchar(base,sizeof(base),<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">for</span> j:=<span class="number">0</span> <span class="keyword">to</span> tot-<span class="number">1</span> <span class="keyword">do</span> <span class="keyword">begin</span></span><br><span class="line">			base[st[j][<span class="number">0</span>]][st[j][<span class="number">1</span>]]:=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">end</span>;</span><br><span class="line">		<span class="comment">//初始化基础对应矩阵</span></span><br><span class="line">		stom(nn,n1);<span class="comment">//将nn这个字符串转化为高精度数组</span></span><br><span class="line">		work(n1);<span class="comment">//快速幂做矩阵乘法</span></span><br><span class="line">		sum:=ans[(<span class="number">1</span>&lt;&lt;m)-<span class="number">1</span>][(<span class="number">1</span>&lt;&lt;m)-<span class="number">1</span>];</span><br><span class="line">		writeln(sum <span class="keyword">mod</span> mo);</span><br><span class="line">	<span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>
<h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>此题源自：zoj1100<br><a href="http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1100">http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1100</a><br>据说此题有通项公式，具体请看维基百科<br><a href="https://en.wikipedia.org/wiki/Domino_tiling">https://en.wikipedia.org/wiki/Domino_tiling</a></p>
]]></content>
      <categories>
        <category>信息学</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>矩阵乘法</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云函数自建无污染递归DoH解析</title>
    <url>/2021/%E9%98%BF%E9%87%8C%E4%BA%91%E5%87%BD%E6%95%B0%E8%87%AA%E5%BB%BA%E6%97%A0%E6%B1%A1%E6%9F%93%E9%80%92%E5%BD%92DoH%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于众所周知的原因，DNS污染日趋花哨。正常的污染也就随意污染到一个海外地址，但现在污染到回环地址或直接不响应的情况都有发生。<br>而且境内想要直连无污染的公共DNS也越来越难。DoT，DoH都有不同程度的干扰。例：DoH会通过SNI检测直接Reset掉。<br>Clash的fallback是走直连线路的，所以需要我们选择一个境内直连可用的DNS解析器。<br>因此，有了自建无污染DNS解析器的想法，但是传统的53端口解析，明文不安全，<br>剩下的加密DNS方案中，DoH能更好的利用WEB技术，使DNS解析像访问网站一样常见。正好阿里云函数有HTTP解析器，可以方便低成本的搭建，不需要自己有一台海外的服务器。</p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul>
<li>一个不在黑名单的域名</li>
<li>一个开通阿里云函数计算功能的阿里云账号</li>
<li>一个开通容器镜像服务功能的阿里云账号</li>
</ul>
<h1 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h1><p>由于阿里云函数计算已经支持Docker镜像部署，而docker镜像部署也更为方便一些，所以这里选择使用容器镜像创建。<br>为了方便，我们选择一个Github上现成的<a href="https://github.com/m13253/dns-over-https">DoH服务软件</a>，该软件支持Google与IETF的两种标准，并且支持ESC，能根据源IP地址，获取更精确的解析结果。<br>阿里云函数计算使用容器创建需要自己先把Docker镜像做好，然后上传做好的容器到阿里云的容器镜像服务中。<br>所以我们找一台linux，先在本地clone上面的项目，然后使用项目中的Dockerfile文件在本地构建好镜像，然后再上传到自己的阿里云账号下。<br>在阿里云的控制台——容器镜像服务中，新建个人实例。在镜像仓库中选择创建镜像仓库，仓库名称可以填doh，创建完毕后，就可以尝试在本地构建并上传镜像了，执行下面的代码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:m13253/dns-over-https.git</span><br><span class="line"><span class="built_in">cd</span> dns-over-https</span><br><span class="line"><span class="built_in">mv</span> Dockerfile.server Dockerfile</span><br><span class="line">docker build .</span><br><span class="line">docker login --username=******* registry.cn-hongkong.aliyuncs.com</span><br><span class="line">docker tag [ImageId] registry.cn-hongkong.aliyuncs.com/***/doh:[镜像版本号]</span><br><span class="line">docker push registry.cn-hongkong.aliyuncs.com/***/doh:[镜像版本号]</span><br></pre></td></tr></table></figure>
<p>上传好镜像后，后面的工作就很简单了<br>在阿里云函数中，选择香港地域后，先随便创建一个服务，然后在创建一个函数，选择使用容器镜像创建。<br>这时候要求你选择一个容器镜像，选刚才上传的容器镜像，可能还需要授权一下阿里云函数计算访问容器镜像服务。<br>创建完后就可以测试了，可以按一下测试函数，如果返回404等Http客户端错误，基本上运行服务器软件就没什么问题了。<br>然后就是去绑定自定义域名，添加一个路径<code>/dns-query</code>,选择刚才创建的服务和函数名就好了。<br>可以自己实验一下，能否正常解析。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -H &#x27;accept: application/dns-json&#x27; &#x27;https://&#123;自定义域名&#125;/dns-query?name=www.google.com&amp;type=A&#x27; | jq</span><br></pre></td></tr></table></figure>
<p>阿里云函数每月免费额度100万，个人使用基本上是够了的。</p>
]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>高考古诗文背诵64篇</title>
    <url>/2016/%E9%AB%98%E8%80%83%E5%8F%A4%E8%AF%97%E6%96%87%E8%83%8C%E8%AF%B564%E7%AF%87/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>高考古诗文背诵篇目(64篇)</p>
<h1 id="《孔子语录》"><a href="#《孔子语录》" class="headerlink" title="《孔子语录》"></a>《孔子语录》</h1><p>①子曰：“学而时习之，不亦说乎？有朋自远方来，不亦乐乎？人不知而不愠，不亦君子乎？” ②曾子曰：“吾日三省吾身：为人谋而不忠乎？与朋友交而不信乎？传不习乎？”<br>②子曰：“温故而知新，可以为师矣。”<br>③子曰：“学而不思则罔，思而不学则殆。”<br>④子曰：“由，诲女知之乎！知之为知之，不知为不知，是知也。”<br>⑤子贡问曰：“孔文子何以为‘文’也?”子曰:“敏而好学,不耻下问,是以谓之‘文’也”<br>⑥子曰：“默而识之,学而不厌,诲人不倦,何有于我哉!”<br>⑦子曰：“三人行，必有我师焉。择其善者而从之，其不善者而改之。”<br>⑧子曰：“知之者不如好之者,好之者不如乐之者。”<br>⑨子在川上，曰：“逝者如斯夫,不舍昼夜。”<br>⑩子曰：“吾尝终日不食，终夜不寝，以思，无益，不如学也。”</p>
<h1 id="《鱼我所欲也》"><a href="#《鱼我所欲也》" class="headerlink" title="《鱼我所欲也》"></a>《鱼我所欲也》</h1><p>　　鱼，我所欲也，熊掌，亦我所欲也，二者不可得兼，舍鱼而取熊掌者也。生，亦我所欲也，义，亦我所欲也，二者不可得兼，舍生而取义者也。生亦我所欲，所欲有甚于生者，故不为苟得也。死亦我所恶，所恶有甚于死者，故患有所不避也。如使人之所欲莫甚于生，则凡可以得生者何不用也。使人之所恶莫甚于死者，则凡可以避患者何不为也！由是则生而有不用也；由是则可以避患而有不为也。是故所欲有甚于生者，所恶有甚于死者。非独贤者有是心也，人皆有之，贤者能勿丧耳。<br>　　一箪食，一豆羹，得之则生，弗得则死。呼尔而与之，行道之人弗受；蹴尔而与之，乞人不屑也。万钟则不辨礼义而受之，万钟于我何加焉！为宫室之美，妻妾之奉，所识穷乏者得我欤？乡为身死而不受，今为宫室之美为之；乡为身死而不受，今为妻妾之奉为之；乡为身死而不受，今为所识穷乏者得我而为之：是亦不可以已乎？此之谓失其本心。 </p>
<h1 id="《生于忧患死于安乐》-孟子"><a href="#《生于忧患死于安乐》-孟子" class="headerlink" title="《生于忧患死于安乐》 孟子"></a>《生于忧患死于安乐》 孟子</h1><p>　　舜发于畎亩之中，傅说举于版筑之中，胶鬲举于鱼盐之中，管夷吾举于士，孙叔敖举于海，百里奚举于市。<br>　　故天将降大任于斯人也，必先苦其心志，劳其筋骨，饿其体肤，空乏其身，行拂乱其所为，所以动心忍性，曾益其所不能。<br>　　人恒过，然后能改；困于心，衡于虑，而后作；征于色，发于声，而后喻。入则无法家拂士，出则无敌国外患者，国恒亡。 然后知生于忧患，而死于安乐也。</p>
<h1 id="《曹刿论战》-左传"><a href="#《曹刿论战》-左传" class="headerlink" title="《曹刿论战》 左传"></a>《曹刿论战》 左传</h1><p>　　十年春，齐师伐我。公将战。曹刿请见。其乡人曰：“肉食者谋之，又何间焉？”刿曰：“肉食者鄙，未能远谋。”乃入见。问：“何以战？”公曰：“衣食所安，弗敢专也，必以分人。”对曰：“小惠未徧，民弗从也。”公曰：“牺牲玉帛，弗敢加也，必以信。”对曰：“小信未孚，神弗福也。”公曰：“小大之狱，虽不能察，必以情。”对曰：“忠之属也。可以一战。战则请从。”<br>　　公与之乘。战于长勺。公将鼓之。刿曰：“未可。”齐人三鼓。刿曰：“可矣。”齐师败绩。公将驰之。刿曰：“未可。”下视其辙，登轼而望之，曰：“可矣。”遂逐齐师。<br>　　既克，公问其故。对曰：“夫战，勇气也。一鼓作气，再而衰，三而竭。彼竭我盈，故克之，夫大国，难测也，惧有伏焉。吾视其辙乱，望其旗靡，故逐之。”</p>
<h1 id="《邹忌讽齐王纳谏》-战国策"><a href="#《邹忌讽齐王纳谏》-战国策" class="headerlink" title="《邹忌讽齐王纳谏》 战国策"></a>《邹忌讽齐王纳谏》 战国策</h1><p>　　邹忌修八尺有余，形貌昳丽。朝服衣冠，窥镜，谓其妻曰：“我孰与城北徐公美？”其妻曰：“君美甚，徐公何能及公也！”城北徐公，齐国之美丽者也。忌不自信，而复问其妾曰：“吾孰与徐公美？”妾曰：“徐公何能及君也！”旦日，客从外来，与坐谈，问之客曰：“吾与徐公孰美？”客曰：“徐公不若君之美也！”明日，徐公来。孰视之，自以为不如；窥镜而自视，又弗如远甚。暮寝而思之曰：“吾妻之美我者，私我也；妾之美我者，畏我也；客之美我者，欲有求于我也。”<br>　　于是入朝见威王曰：“臣诚知不如徐公美，臣之妻私臣，臣之妾畏臣，臣之客欲有求于臣，皆以美于徐公。今齐地方千里，百二十城，宫妇左右，莫不私王；朝廷之臣，莫不畏王；四境之内，莫不有求于王。由此观之，王之蔽甚矣！”<br>　　王曰：“善。”乃下令：“群臣吏民，能面刺寡人之过者，受上赏；上书谏寡人者，受中赏；能谤议于市朝，闻寡人之耳者，受下赏。” 令初下，群臣进谏，门庭若市。数月之后，时时而间进。期年之后，虽欲言，无可进者。燕、赵、韩、魏闻之，皆朝于齐。此所谓战胜于朝廷 </p>
<h1 id="《出师表》-诸葛亮"><a href="#《出师表》-诸葛亮" class="headerlink" title="《出师表》 诸葛亮"></a>《出师表》 诸葛亮</h1><p>　　臣亮言：先帝创业未半，而中道崩殂；今天下三分，益州疲弊，此诚危急存亡之秋也。然侍卫之臣，不懈于内；忠志之士，忘身于外者：盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。<br>　　宫中府中，俱为一体；陟罚臧否，不宜异同：若有作奸犯科，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之理；不宜偏私，使内外异法也。<br>　　侍中、侍郎郭攸之、费祎、董允等，此皆良实，志虑忠纯，是以先帝简拔以遗陛下：愚以为宫中之事，事无大小，悉以咨之，然后施行，必能裨补阙漏，有所广益。<br>　　将军向宠，性行淑均，晓畅军事，试用之于昔日，先帝称之曰“能”，是以众议举宠为督：愚以为营中之事，悉以咨之，必能使行阵和睦，优劣得所也。<br>　　亲贤臣，远小人，此先汉所以兴隆也；亲小人，远贤臣，此后汉所以倾颓也。先帝在时，每与臣论此事，未尝不叹息痛恨于桓、灵也！侍中、尚书、长史、参军，此悉贞亮死节之臣也，愿陛下亲之、信之，则汉室之隆，可计日而待也。<br>　　臣本布衣，躬耕南阳，苟全性命于乱世，不求闻达于诸侯。先帝不以臣卑鄙，猥自枉屈，三顾臣于草庐之中，咨臣以当世之事，由是感激，遂许先帝以驱驰。后值倾覆，受任于败军之际，奉命于危难之间,尔来二十有一年矣。<br>　　先帝知臣谨慎，故临崩寄臣以大事也。受命以来，夙夜忧叹，恐付托不效，以伤先帝之明；故五月渡泸，深入不毛。今南方已定，兵甲已足，当奖率三军，北定中原，庶竭驽钝，攘除奸凶，兴复汉室，还于旧都：此臣所以报先帝而忠陛下之职分也。至于斟酌损益，进尽忠言，则攸之、祎、允等之任也。<br>　　愿陛下托臣以讨贼兴复之效，不效则治臣之罪，以告先帝之灵；若无兴德之言，则责攸之、祎、允等之慢，以彰其咎。陛下亦宜自谋，以谘诹善道，察纳雅言，深追先帝遗诏。臣不胜受恩感激！<br>　　今当远离，临表涕零，不知所言。</p>
<h1 id="《桃花源记》-陶渊明"><a href="#《桃花源记》-陶渊明" class="headerlink" title="《桃花源记》 陶渊明"></a>《桃花源记》 陶渊明</h1><p>　　晋太元中，武陵人捕鱼为业，缘溪行，忘路之远近。忽逢桃花林，夹岸数百步，中无杂树，芳草鲜美，落英缤纷，渔人甚异之。 复前行，欲穷其林。<br>　　林尽水源，便得一山，山有小口，仿佛若有光，便舍船从口入。 初极狭，才通人，复行数十步，豁然开朗。土地平旷，屋舍俨然，有良田美池桑竹之属。 阡陌交通，鸡犬相闻。其中往来种作，男女衣著，悉如外人。黄发垂髫，并怡然自乐。<br>　　见渔人，乃大惊，问所从来。具答之。便要还家，设酒杀鸡作食。村中闻有此人，咸 来问讯。自云先世避秦时乱，率妻子邑人来此绝境，不复出焉，遂与外人间隔。问今是何 世，乃不知有汉，无论魏晋。此人一一为具言所闻，皆叹惋。 余人各复延至其家，皆出酒食。停数日，辞去。此中人语云，不足为外人道也。<br>　　既出，得其船，便扶向路，处处志之。及郡下，诣太守说如此。太守即遣人随其往，寻向所志， 遂迷不复得路。<br>　　南阳刘子骥，高尚士也，闻之，欣然规往，未果。寻病终。后遂无问津者。</p>
<h1 id="《三峡》-郦道元"><a href="#《三峡》-郦道元" class="headerlink" title="《三峡》 郦道元"></a>《三峡》 郦道元</h1><p>　　自三峡七百里中，两岸连山，略无阙处；重岩叠嶂，隐天蔽日，自非亭午夜不见曦月。<br>　　至于夏水襄陵，沿溯阻绝。或王命急宣，有时朝发白帝，暮到江陵，其间千二百里，虽乘奔御风不以疾也。<br>　　春冬之时，则素湍绿潭，回清倒影。绝巘多生怪柏，悬泉瀑布，飞漱其间。清荣峻茂，良多趣味。<br>　　每至晴初霜旦，林寒涧肃，常有高猿长啸，属引凄异，空谷传响，哀转久绝。故渔者歌曰：“巴东三峡巫峡长，猿鸣三声泪沾裳！” </p>
<h1 id="《马说》-韩愈"><a href="#《马说》-韩愈" class="headerlink" title="《马说》 韩愈"></a>《马说》 韩愈</h1><p>　　世有伯乐，然后有千里马。千里马常有，而伯乐不常有。故虽有名马，祗辱于奴隶人之手，骈死于槽枥之间，不以千里称也。<br>　　马之千里者，一食或尽粟一石。食马者，不知其能千里而食也。是马也，虽有千里之能，食不饱，力不足，才美不外见，且欲与常马等不可得，安求其能千里也。<br>　　策之不以其道，食之不能尽其材，鸣之而不能通其意，执策而临之，曰：“天下无马。”呜呼！其真无马邪？其真不知马也！ </p>
<h1 id="《陋室铭》-刘禹锡"><a href="#《陋室铭》-刘禹锡" class="headerlink" title="《陋室铭》 刘禹锡"></a>《陋室铭》 刘禹锡</h1><p>　　山不在高，有仙则名。水不在深，有龙则灵。斯是陋室，惟吾德馨。苔痕上阶绿，草色入帘青。谈笑有鸿儒，往来无白丁。可以调素琴，阅金经。无丝竹之乱耳，无案牍之劳形。南阳诸葛庐，西蜀子云亭。孔子云：“何陋之有？” </p>
<h1 id="《小石潭记》-柳宗元"><a href="#《小石潭记》-柳宗元" class="headerlink" title="《小石潭记》 柳宗元"></a>《小石潭记》 柳宗元</h1><p>　　从小丘西行百二十步，隔篁竹，闻水声，如鸣佩环，心乐之。伐竹取道，下见小潭，水尤清冽。全石以为底，近岸，卷石底以出，为坻，为屿，为嵁，为岩。青树翠蔓，蒙络摇缀，参差披拂。<br>　　潭中鱼可百许头，皆若空游无所依。日光下澈，影布石上，佁然不动;俶尔远逝，往来翕忽，似与游者相乐。<br>　　潭西南而望，斗折蛇行，明灭可见。其岸势犬牙差互，不可知其源。<br>　　坐潭上，四面竹树环合，寂寥无人，凄神寒骨，悄怆幽邃。以其境过清，不可久居，乃记之而去。<br>　　同游者：吴武陵，龚古，余弟宗玄。隶而从者，崔氏二小生：曰恕己，曰奉壹。</p>
<h1 id="《岳阳楼记》-范仲淹"><a href="#《岳阳楼记》-范仲淹" class="headerlink" title="《岳阳楼记》 范仲淹"></a>《岳阳楼记》 范仲淹</h1><p>　　庆历四年春，滕子京谪守巴陵郡。越明年，政通人和，百废具兴。乃重修岳阳楼，增其旧制，刻唐贤今人诗赋于其上。属予作文以记之。<br>　　予观夫巴陵胜状，在洞庭一湖。衔远山，吞长江，浩浩汤汤，横无际涯；朝晖夕阴，气象万千。此则岳阳楼之大观也。前人之述备矣。然则北通巫峡，南极潇湘，迁客骚人，多会于此，览物之情，得无异乎？<br>　　若夫霪雨霏霏，连月不开，阴风怒号，浊浪排空；日星隐耀，山岳潜形；商旅不行，樯倾楫摧；薄暮冥冥，虎啸猿啼。登斯楼也，则有去国怀乡，忧谗畏讥，满目萧然，感极而悲者矣。<br>　　至若春和景明，波澜不惊，上下天光，一碧万顷；沙鸥翔集，锦鳞游泳；岸芷汀兰，郁郁青青。而或长烟一空，皓月千里，浮光跃金，静影沉璧，渔歌互答，此乐何极！登斯楼也，则有心旷神怡，宠辱偕忘，把酒临风，其喜洋洋者矣。<br>　　嗟夫！予尝求古仁人之心，或异二者之为，何哉？不以物喜，不以己悲；居庙堂之高则忧其民；处江湖之远则忧其君。是进亦忧，退亦忧。然则何时而乐耶？其必曰“先天下之忧而忧，后天下之乐而乐”乎。噫！微斯人，吾谁与归？<br>　　时六年九月十五日。 </p>
<h1 id="《醉翁亭记》-欧阳修"><a href="#《醉翁亭记》-欧阳修" class="headerlink" title="《醉翁亭记》 欧阳修"></a>《醉翁亭记》 欧阳修</h1><p>　　环滁皆山也。其西南诸峰，林壑尤美。望之蔚然而深秀者，琅琊也。山行六七里，渐闻水声潺潺，而泄出于两峰之间者，酿泉也。峰回路转，有亭翼然临于泉上者，醉翁亭也。作亭者谁？山之僧智仙也。名之者谁？太守自谓也。太守与客来饮于此，饮少辄醉，而年又最高，故自号曰“醉翁”也。醉翁之意不在酒，在乎山水之间也。山水之乐，得之心而寓之酒也。<br>　　若夫日出而林霏开，云归而岩穴暝，晦明变化者，山间之朝暮也。野芳发而幽香，佳木秀而繁阴，风霜高洁，水落而石出者，山间之四时也。朝而往，暮而归，四时之景不同，而乐亦无穷也。<br>　　至于负者歌于途，行者休于树，前者呼，后者应，伛偻提携，往来而不绝者，滁人游也。临溪而渔，溪深而鱼肥；酿泉为酒，泉香而酒冽；山肴野蔌，杂然而前陈者，太守宴也。宴酣之乐，非丝非竹，射者中，弈者胜，觥筹交错，起坐而喧哗者，众宾欢也。苍颜白发，颓然乎其间者，太守醉也。<br>　　已而夕阳在山，人影散乱，太守归而宾客从也。树林阴翳，鸣声上下，游人去而禽鸟乐 也。然而禽鸟知山林之乐，而不知人之乐；人知从太守游而乐，而不知太守之乐其乐也。醉能同其乐，醒能述其文者，太守也。太守谓谁？庐陵欧阳修也。 </p>
<h1 id="《爱莲说》-周敦颐"><a href="#《爱莲说》-周敦颐" class="headerlink" title="《爱莲说》 周敦颐"></a>《爱莲说》 周敦颐</h1><p>　　水陆草木之花，可爱者甚蕃。晋陶渊明独爱菊；自李唐来，世人盛爱牡丹；予独爱莲之出淤泥而不染，濯清涟而不妖，中通外直，不蔓不枝，香远益清，亭亭净植，可远观而不可亵玩焉。<br>　　予谓菊，花之隐逸者也；牡丹，花之富贵者也；莲，花之君子者也。噫！菊之爱，陶后鲜有闻；莲之爱，同予者何人；牡丹之爱，宜乎众矣。</p>
<h1 id="《记承天寺夜游》-苏轼"><a href="#《记承天寺夜游》-苏轼" class="headerlink" title="《记承天寺夜游》 苏轼"></a>《记承天寺夜游》 苏轼</h1><p>　　元丰六年十月十二日夜，解衣欲睡，月色入户，欣然起行。 念无与为乐者，遂至承天寺，寻张怀民，怀民未寝，相与步于中庭。<br>　　庭下如积水空明，水中藻荇交横，盖竹柏影也。何夜无月，何处无松柏，但少闲人如吾两人者耳。 </p>
<h1 id="《送东阳马生序》宋濂"><a href="#《送东阳马生序》宋濂" class="headerlink" title="《送东阳马生序》宋濂"></a>《送东阳马生序》宋濂</h1><p>　　余幼时即嗜学。家贫，无从致书以观，每假借于藏书之家，手自笔录，计日以还。天大寒，砚冰坚，手指不可屈伸，弗之怠。录毕，走送之，不敢稍逾约。以是人多以书假余，余因得遍观群书。既加冠，益慕圣贤之道。又患无硕师名人与游，尝趋百里外从乡之先达执经叩问。先达德隆望尊，门人弟子填其室，未尝稍降辞色。余立侍左右，援疑质理，俯身倾耳以请；或遇其叱咄，色愈恭，礼愈至，不敢出一言以复；俟其欣悦，则又请焉。故余虽愚，卒获有所闻。当余之从师也，负箧曳屣，行深山巨谷中，穷冬烈风，大雪深数尺，足肤皲裂而不知。至舍，四支僵劲不能动，媵人持汤沃灌，以衾拥覆，久而乃和。寓逆旅主人，日再食，无鲜肥滋味之享。同舍生皆被绮绣，戴朱缨宝饰之帽，腰白玉之环，左佩刀，右备容臭，烨然若神人；余则緼袍敝衣处其间，略无慕艳意，以中有足乐者，不知口体之奉不若人也。盖余之勤且艰苦此。<br>　　今诸生学于太学，县官日有禀销之供，父母岁有裘葛之遗，无冻馁之患矣；坐大厦之下而诵《诗》《书》，无奔走之劳矣；有司业、博士为之师，未有问而不告，求而不得者也；凡所宜有之书皆集于此，不必若余之手录，假诸人而后见也。其业有不精，德有不成者，非天质之卑，则心不若余之专耳，岂他人之过哉？<br>　　东阳马生君则在太学已二年，流辈甚称其贤。余朝京师，生以乡人子谒余。撰长书以为贽，辞甚畅达。与之论辨，言和而色夷。自谓少时用心于学甚劳。是可谓善学者矣。其将归见其亲也，余故道为学之难以告之。 </p>
<h1 id="《关睢》-诗经"><a href="#《关睢》-诗经" class="headerlink" title="《关睢》 诗经"></a>《关睢》 诗经</h1><p>关关雎鸠，在河之洲。窈窕淑女，君子好逑。<br>参差荇菜，左右流之。窈窕淑女，寤寐求之。<br>求之不得，寤寐思服。悠哉悠哉。辗转反侧。<br>参差荇菜，左右采之。窈窕淑女，琴瑟友之。<br>参差荇菜，左右毛之。窈窕淑女。钟鼓乐之。</p>
<h1 id="《蒹葭》-诗经"><a href="#《蒹葭》-诗经" class="headerlink" title="《蒹葭》 诗经"></a>《蒹葭》 诗经</h1><p>蒹葭苍苍，白露为霜。所谓伊人，在水一方。溯洄从之，道阻且长；溯游从之，宛在水中央<br>蒹葭凄凄，白露未晞。所谓伊人，在水之湄。溯洄从之，道阻且跻；溯游从之，宛在水中坻<br>蒹葭采采，白露未已，所谓伊人，在水之涘。溯洄从之，道阻且右；溯游从之，宛在水中沚</p>
<h1 id="《山坡羊-潼关怀古-》-张养浩"><a href="#《山坡羊-潼关怀古-》-张养浩" class="headerlink" title="《山坡羊(潼关怀古)》 张养浩"></a>《山坡羊(潼关怀古)》 张养浩</h1><p>峰峦如聚，波涛如怒，山河表里潼关路。望西都。意踌躇，伤心秦汉经行处。<br>宫阙万间都做了土。兴，百姓苦。亡，百姓苦。</p>
<h1 id="《相间欢》-李虞"><a href="#《相间欢》-李虞" class="headerlink" title="《相间欢》 李虞"></a>《相间欢》 李虞</h1><p>无言独上西楼，月如钩，寂寞梧桐、深院锁清秋。剪不断， 理还乱，是离愁。<br>别是一番、滋味在心头。</p>
<h1 id="《江城子》-乙卯正月二十夜记梦-苏轼"><a href="#《江城子》-乙卯正月二十夜记梦-苏轼" class="headerlink" title="《江城子》  乙卯正月二十夜记梦 苏轼"></a>《江城子》  乙卯正月二十夜记梦 苏轼</h1><p>老夫聊发少年狂，左牵黄，右擎苍。锦帽貂裘，千骑卷平冈。欲报倾城随太守，亲射虎，看孙郎。 酒酣胸胆尚开张，鬓微霜，又何妨！持节云中，何日遣冯唐？会挽雕弓如满月，西北望，射天狼。</p>
<h1 id="《水调歌头》-苏轼"><a href="#《水调歌头》-苏轼" class="headerlink" title="《水调歌头》 苏轼"></a>《水调歌头》 苏轼</h1><p>明月几时有，把酒问青天。不知天上宫阙，今夕是何年。我欲乘风归去, 又恐琼楼玉宇，高处不胜寒，起舞弄清影，何似在人间。<br>转朱阁，低绮户，照无眠。不应有恨，何事长向别时圆。人有悲欢离合，月有阴晴圆缺，此事古难全。但愿人长久，千里共婵娟。 </p>
<h1 id="《观刈麦》-白居易"><a href="#《观刈麦》-白居易" class="headerlink" title="《观刈麦》 白居易"></a>《观刈麦》 白居易</h1><p>田家少闲月，五月人倍忙。<br>夜来南风起，小麦覆陇黄。<br>妇姑荷箪食，童稚携壶浆。<br>相随饷田去，丁壮在南冈。<br>足蒸暑土气，背灼炎天光。<br>力尽不知热，但惜夏日长。<br>复有贫妇人，抱子在其旁。<br>右手秉遗穗，左臂悬敝筐。<br>听其相顾言，闻者为悲伤。<br>家田输税尽，拾此充饥肠。<br>今我何功德，曾不事农桑。<br>吏禄三百石，岁晏有馀粮。<br>念此私自愧，尽日不能忘。</p>
<h1 id="《观沧海》-曹操"><a href="#《观沧海》-曹操" class="headerlink" title="《观沧海》 曹操"></a>《观沧海》 曹操</h1><p>东临碣石，以观沧海。<br>水何澹澹，山岛竦峙。<br>树木丛生，百草丰茂。<br>秋风萧瑟，洪波涌起。<br>日月之行，若出其中；<br>星汉灿烂，若出其里。<br>幸甚至哉！歌以咏志。</p>
<h1 id="《饮酒》-陶渊明"><a href="#《饮酒》-陶渊明" class="headerlink" title="《饮酒》 陶渊明"></a>《饮酒》 陶渊明</h1><p>结庐在人境，而无车马喧。<br>问君何能尔，心远地自偏。<br>采菊东篱下，悠然见南山。<br>山气日夕佳，飞鸟相与还。<br>此中有真意，欲辨已忘言。</p>
<h1 id="《送杜少府之任蜀州》-王勃"><a href="#《送杜少府之任蜀州》-王勃" class="headerlink" title="《送杜少府之任蜀州》 王勃"></a>《送杜少府之任蜀州》 王勃</h1><p>城阙辅三秦，风烟望五津。<br>与君离别意，同是宦游人。<br>海内存知己，天涯若比邻。<br>无为在歧路，儿女共沾巾。</p>
<h1 id="《次北固山下》王湾"><a href="#《次北固山下》王湾" class="headerlink" title="《次北固山下》王湾"></a>《次北固山下》王湾</h1><p>客路青山外， 行舟绿水前。<br>潮平两岸阔， 风正一帆悬。<br>海日生残夜， 江春入旧年。<br>乡书何处达， 归雁洛阳边。</p>
<h1 id="《使至塞上》-王维"><a href="#《使至塞上》-王维" class="headerlink" title="《使至塞上》 王维"></a>《使至塞上》 王维</h1><p>单车欲问边，属国过居延。<br>征蓬出汉塞，归雁入胡天。<br>大漠孤烟直，长河落日圆。<br>萧关逢候骑，都护在燕然。</p>
<h1 id="《闻王昌龄左迁龙标遥有此寄》-李白"><a href="#《闻王昌龄左迁龙标遥有此寄》-李白" class="headerlink" title="《闻王昌龄左迁龙标遥有此寄》 李白"></a>《闻王昌龄左迁龙标遥有此寄》 李白</h1><p>杨花落尽子规啼，<br>闻到龙标过五溪。<br>我寄愁心与明月，<br>随君直到夜郎西。</p>
<h1 id="《行路难》-李白"><a href="#《行路难》-李白" class="headerlink" title="《行路难》 李白"></a>《行路难》 李白</h1><p>金樽清酒斗十千，玉盘珍馐值万钱。<br>停杯投箸不能食，拔剑四顾心茫然。<br>欲渡黄河冰塞川，将登太行雪满山。<br>闲来垂钓碧溪上，忽复乘舟梦日边。<br>行路难，行路难！多歧路，今安在？<br>长风破浪会有时，直挂云帆济沧海。</p>
<h1 id="《望岳》-杜甫"><a href="#《望岳》-杜甫" class="headerlink" title="《望岳》  杜甫"></a>《望岳》  杜甫</h1><p>岱宗夫如何，齐鲁青未了。<br>造化钟神秀，阴阳割昏晓。<br>荡胸生层云，决眦入归鸟。<br>会当凌绝顶，一览众山小。</p>
<h1 id="《早春呈水部张十八员外》-韩愈"><a href="#《早春呈水部张十八员外》-韩愈" class="headerlink" title="《早春呈水部张十八员外》 韩愈"></a>《早春呈水部张十八员外》 韩愈</h1><p>天街小雨润如酥，草色遥看近却无。<br>最是一年春好处，绝胜烟柳满皇都。</p>
<h1 id="《己亥杂诗》-龚自珍"><a href="#《己亥杂诗》-龚自珍" class="headerlink" title="《己亥杂诗》 龚自珍"></a>《己亥杂诗》 龚自珍</h1><p>浩荡离愁白日斜，吟鞭东指即天涯。<br>落红不是无情物，化作春泥更护花。</p>
<h1 id="《酬乐天扬州初逢席上见赠》-刘禹锡"><a href="#《酬乐天扬州初逢席上见赠》-刘禹锡" class="headerlink" title="《酬乐天扬州初逢席上见赠》 刘禹锡"></a>《酬乐天扬州初逢席上见赠》 刘禹锡</h1><p>巴山楚水凄凉地，二十三年弃置身。<br>怀旧空吟闻笛赋，到乡翻似烂柯人。<br>沉舟侧畔千帆过，病树前头万木春。<br>今日听君歌一曲，暂凭杯酒长精神。</p>
<h1 id="《钱塘湖春行》-白居易"><a href="#《钱塘湖春行》-白居易" class="headerlink" title="《钱塘湖春行》 白居易"></a>《钱塘湖春行》 白居易</h1><p>孤山寺北贾亭西，水面初平云脚低。<br>几处早莺争暖树，谁家新燕啄春泥。<br>乱花渐欲迷人眼，浅草才能没马蹄。<br>最爱湖东行不足，绿杨阴里白沙堤。</p>
<h1 id="《雁门太守行》-李贺"><a href="#《雁门太守行》-李贺" class="headerlink" title="《雁门太守行》 李贺"></a>《雁门太守行》 李贺</h1><p>黑云压城城欲摧，甲光向日金鳞开。<br>角声满天秋色里，塞上燕脂凝夜紫。<br>半卷红旗临易水，霜重鼓寒声不起。<br>报君黄金台上意，提携玉龙为君死。</p>
<h1 id="《无题》-李商隐"><a href="#《无题》-李商隐" class="headerlink" title="《无题》 李商隐"></a>《无题》 李商隐</h1><p>相见时难别亦难，东风无力百花残。<br>春蚕到死丝方尽，蜡炬成灰泪始干。<br>晓镜但愁云鬓改，夜吟应觉月光寒。<br>蓬山此去无多路，青鸟殷勤为探看。</p>
<h1 id="《赤壁》-杜牧"><a href="#《赤壁》-杜牧" class="headerlink" title="《赤壁》 杜牧"></a>《赤壁》 杜牧</h1><p>折戟沉沙铁未销，自将磨洗认前朝。<br>东风不与周郎便，铜雀春深锁二乔。</p>
<h1 id="《泊秦淮》-杜牧"><a href="#《泊秦淮》-杜牧" class="headerlink" title="《泊秦淮》 杜牧"></a>《泊秦淮》 杜牧</h1><p>烟笼寒水月笼沙，夜泊秦淮近酒家。<br>商女不知亡国恨， 隔江犹唱《后庭花》。</p>
<h1 id="《夜雨寄北》-李商隐"><a href="#《夜雨寄北》-李商隐" class="headerlink" title="《夜雨寄北》 李商隐"></a>《夜雨寄北》 李商隐</h1><p>君问归期未有期，巴山夜雨涨秋池。<br>何当共剪西窗烛，却话巴山夜雨时。</p>
<h1 id="《登飞来峰》-王安石"><a href="#《登飞来峰》-王安石" class="headerlink" title="《登飞来峰》 王安石"></a>《登飞来峰》 王安石</h1><p>飞来山上千寻塔，闻说鸡鸣见日升。<br>不畏浮云遮望眼，自缘身在最高层。</p>
<h1 id="《渔家傲》-范仲淹"><a href="#《渔家傲》-范仲淹" class="headerlink" title="《渔家傲》 范仲淹"></a>《渔家傲》 范仲淹</h1><p>塞下秋来风景异，衡阳雁去无留意。<br>四面边声连角起，千嶂里，长烟落日孤城闭。<br>浊酒一杯家万里，燕然未勒归无计，<br>羌管悠悠霜满地。人不寐，将军白发征夫泪。</p>
<h1 id="《春望》-杜甫"><a href="#《春望》-杜甫" class="headerlink" title="《春望》 杜甫"></a>《春望》 杜甫</h1><p>国破山河在，城春草木深。<br>感时花溅泪，恨别鸟惊心。<br>烽火连三月，家书抵万金。<br>白头搔更短，浑欲不胜簪。</p>
<h1 id="《浣溪沙》-晏殊"><a href="#《浣溪沙》-晏殊" class="headerlink" title="《浣溪沙》 晏殊"></a>《浣溪沙》 晏殊</h1><p>一曲新词酒一杯，去年天气旧亭台，夕阳西下几时回。<br>无可奈何花落去，似曾相识燕归来。小园香径独徘徊。</p>
<h1 id="《游山西村》-陆游"><a href="#《游山西村》-陆游" class="headerlink" title="《游山西村》 陆游"></a>《游山西村》 陆游</h1><p>莫笑农家腊酒浑，丰年留客足鸡豚。<br>山重水复疑无路，柳暗花明又一村。<br>萧鼓追随春社近，衣冠简朴古风存。<br>从今若许闲乘月，拄杖无时夜叩门。</p>
<h1 id="《破阵子》-辛弃疾"><a href="#《破阵子》-辛弃疾" class="headerlink" title="《破阵子》 辛弃疾"></a>《破阵子》 辛弃疾</h1><p>醉里挑灯看剑，梦回吹角连营。<br>八百里分麾下灸，五十弦翻塞外声。沙场点秋兵。<br>马作的卢飞快，弓如霹雳弦惊。<br>了却君王天下事，嬴得生前身后名。可怜白发生！</p>
<h1 id="《过零丁洋》-文天祥"><a href="#《过零丁洋》-文天祥" class="headerlink" title="《过零丁洋》 文天祥"></a>《过零丁洋》 文天祥</h1><p>辛苦遭逢起一经，干戈寥落四周星。<br>山河破碎风飘絮，身世沉浮雨打萍。<br>惶恐滩头说惶恐，零丁洋里叹零丁。<br>人生自古谁无死，留取丹心照汗青。</p>
<h1 id="《天净沙-秋思》-马致远"><a href="#《天净沙-秋思》-马致远" class="headerlink" title="《天净沙?秋思》 马致远"></a>《天净沙?秋思》 马致远</h1><p>枯藤老树昏鸦。小桥流水人家。<br>古道西风瘦马。 夕阳西下，断肠人在天涯。 </p>
<h1 id="《白雪歌送武判官归京-》-岑参"><a href="#《白雪歌送武判官归京-》-岑参" class="headerlink" title="《白雪歌送武判官归京 》 岑参"></a>《白雪歌送武判官归京 》 岑参</h1><p>北风卷地白草折，胡天八月即飞雪。<br>忽如一夜春风来，千树万树梨花开。<br>散入珠帘湿罗幕，狐裘不暖锦衾薄。<br>将军角弓不得控，都护铁衣冷难著。<br>瀚海阑干百丈冰，愁云惨淡万里凝。<br>中军置酒饮归客，胡琴琵琶与羌笛。<br>纷纷暮雪下辕门，风掣红旗冻不翻。<br>轮台东门送君去，去时雪满天山路。<br>山回路转不见君，雪上空留马行处。</p>
<h1 id="《茅屋为秋风所破歌》-杜甫"><a href="#《茅屋为秋风所破歌》-杜甫" class="headerlink" title="《茅屋为秋风所破歌》 杜甫"></a>《茅屋为秋风所破歌》 杜甫</h1><pre><code>八月秋高风怒号，卷我屋上三重茅。茅飞度江洒江郊，高者挂罥长林梢，下者飘转沉塘坳。
南村群童欺我老无力，忍能对面为盗贼。公然抱茅入竹去，唇焦口燥呼不得，归来倚杖自叹息。俄顷风定云墨色，秋天漠漠向昏黑。布衾多年冷似铁，娇儿恶卧踏里裂。床头屋漏无干处，
雨脚如麻未断绝。自经丧乱少睡眠，长夜沾湿何由彻！安得广厦千万间，大庇天下寒士俱欢颜，风雨不动安如山！呜呼，何时眼前突兀见此屋，吾庐独破受冻死亦足！ 
</code></pre>
<h1 id="《劝学》-荀子"><a href="#《劝学》-荀子" class="headerlink" title="《劝学》 荀子"></a>《劝学》 荀子</h1><p>　　君子曰：学不可以已。青，取之于蓝，而青于蓝；冰，水为之，而寒于水。木 直中绳，揉以为轮，其曲中规，虽有槁暴，不复挺者，輮使之然也。故木受 绳则直，金就砾则利。君子博学而日参省乎己，则知明而行无过矣。<br>　　吾尝终日而思矣，不如须臾之所学也。吾尝跂而望矣，不如登高之博见 也。登高而招，臂非加长也，而见者远。顺风而呼，声非加疾也，而闻者彰。假舆 马者，非利足也，而致千里。假舟辑者，非能水也，而绝江河。君子生非异也，善假于物也。<br>　　积土成山，风雨兴焉。积水成渊，蛟龙生焉。积善成德，而神明自得，圣心备 焉。故不积跬步，无以至千里；不积小流，无以成江海。骐骥一跃，不能十步；驽 马十驾，功在不舍。锲而舍之，朽木不折；锲而不舍，金石可镂。蚓无爪牙之利， 筋骨之强，上食埃土，下饮黄泉，用心一也。蟹六跪而二螯，非蛇鳝之穴无可寄托者，用心躁也。</p>
<h1 id="《逍遥游》-庄子"><a href="#《逍遥游》-庄子" class="headerlink" title="《逍遥游》 庄子"></a>《逍遥游》 庄子</h1><p>　　北冥有鱼，其名曰鲲。鲲之大，不知其几千里也；化而为鸟，其名为鹏。鹏之背，不知其几千里也；怒而飞，其翼若垂天之云。是鸟也，海运则将徙于南冥。南冥者，天池也。<br>　　齐谐者，志怪者也。谐之言曰：“鹏之徙于南冥也，水击三千里，抟扶摇而上者九万里，去以六月息者也。”野马也，尘埃也，生物之以息相吹也。天之苍苍，其正色邪？其远而无所至极邪？其视下也，亦若是则已矣。<br>　　且夫水之积也不厚，则其负大舟也无力。覆杯水于坳堂之上，则芥为之舟；置杯焉则胶，水浅而舟大也。风之积也不厚，则其负大翼也无力，故九万里则风斯在下矣。而后乃今培风，背负青天而莫之夭阏者，而后乃今将图南。<br>　　蜩与学鸠笑之曰：“我决起而飞，抢榆枋而止，时则不至，而控于地而已矣；奚以之九万里而南为？”适莽苍，三餐而反，腹犹果然；适百里者，宿舂粮；适千里者，三月聚粮。之二虫又何知？<br>　　小知不及大知，小年不及大年。奚以知其然也？朝菌不知晦朔，蟪蛄不知春秋，此小年也。楚之南有冥灵者，以五百岁为春，五百岁为秋；上古有大椿者，以八千岁为春，八千岁为秋，此大年也。而彭祖乃今以久特闻，众人匹之，不亦悲乎？<br>　　汤之问棘也是已：“穷发之北有冥海者，天池也。有鱼焉，其广数千里，未有知其修者，其名曰鲲。有鸟焉，其名为鹏，背若泰山，翼若垂天之云；抟扶摇、羊角而上者九万里，绝云气，负青天，然后图南，且适南冥也。斥鴳笑之曰：‘彼且奚适也？我腾跃而上，不过数仞而下，翱翔蓬蒿之间，此亦飞之至也。而彼且奚适也？’”此小大之辩也。<br>　　故夫知效一官、行比一乡、德合一君、而征一国者，其自视也亦若此矣。而宋荣子犹然笑之。且举世而誉之而不加劝，举世而非之而不加沮，定乎内外之分，辩乎荣辱之境，斯已矣。彼其于世，未数数然也。虽然，犹有未树也。夫列子御风而行，泠然善也，旬有五日而后反。彼于致福者，未数数然也。此虽免乎行，犹有所待者也。若夫乘天地之正，而御六气之辩，以游无穷者，彼且恶乎待哉？故曰：至人无己，神人无功，圣人无名。</p>
<h1 id="《师说》韩愈"><a href="#《师说》韩愈" class="headerlink" title="《师说》韩愈"></a>《师说》韩愈</h1><p>　　古之学者必有师。师者，所以传道受业解惑也。人非生而知之者，孰能无惑？惑而不从师，其为惑也，终不解矣。生乎吾前，其闻道也固先乎吾，吾从而师之；生乎吾后，其闻道也亦先乎吾，吾从而师之。吾师道也，夫庸知其年之先后生于吾乎！是故无贵无贱无长无少，道之所存，师之所存也。<br>　　嗟乎！师道之不传也久矣，欲人之无惑也难矣。古之圣人，其出人也远矣，犹且从师而问焉；今之众人，其下圣人也亦远矣，而耻学于师。是故圣益圣，愚益愚。圣人之所以为圣，愚人之所以为愚，其皆出于此乎？爱其子，择师而教之，于其身也，则耻师焉，惑焉。彼童子之师，授之书而习其句读者，非吾所谓传其道、解其惑者也。句读之不知，惑之不解，或师焉，或不焉，小学而大遗，吾未见其明也。巫医、乐师、百工之人不耻相师，士大夫之族曰“师”曰“弟子”云者，则群聚而笑之。问之，则曰：彼与彼年相若也，道相似也，位卑则足羞，官盛则近谀。呜呼！师道之不复，可知矣。巫医、乐师、百工之人。君子不齿，今其智乃反不能及，其可怪也欤！<br>　　圣人无常师。孔子师郯子、苌子、师襄、老聃。郯子之徒，其贤不及孔子。孔子曰：“三人行，必有我师。”是故弟子不必不如师，师不必贤于弟子。闻道有先后，术业有专攻，如是而已。<br>　　李氏子蟠，年十七，好古文、六艺，经传皆通习之，不拘于时，学于余。余嘉其能行古道，作师说以贻之。</p>
<h1 id="《阿房宫赋》杜牧"><a href="#《阿房宫赋》杜牧" class="headerlink" title="《阿房宫赋》杜牧"></a>《阿房宫赋》杜牧</h1><p>　　六王毕，四海一。蜀山兀，阿房出。覆压三百余里，隔离天日。骊山北构而西折，直走咸阳。二川溶溶，流入宫墙。五步一楼，十步一阁。廊腰缦回，檐牙高啄。各抱地势，钩心斗角。盘盘焉，囷囷焉，蜂房水涡，矗不知乎几千万落。长桥卧波，未云何龙？复道行空，不霁何虹？高低冥迷，不知西东。歌台暖响，春光融融。舞殿冷袖，风雨凄凄。一日之内，一宫之间，而气候不齐。<br>　　妃嫔媵嫱，王子皇孙，辞楼下殿，辇来于秦。朝歌夜弦，为秦宫人。明星荧荧，开妆镜也。绿云扰扰，梳晓鬟也。渭流涨腻，弃脂水也。烟斜雾横，焚椒兰也。雷霆乍惊，宫车过也。辘辘远听，杳不知其所之也。一肌一容，尽态极妍。缦立远视，而望幸焉，有不得见者三十六年。<br>　　燕、赵之收藏，韩、魏之经营，齐、楚之精英，几世几年，剽掠其人，倚叠如山。一旦不能有，输来其间。鼎铛玉石，金块珠砾，弃掷逦迤。秦人视之，亦不甚惜。嗟乎！一人之心，千万人之心也。秦爱纷奢，人亦念其家。奈何取之尽锱铢，用之如泥沙！使负栋之柱，多于南亩之农夫。架梁之椽，多于机上之工女。钉头磷磷，多于在庾之粟粒。瓦缝参差，多于周身之帛缕。直栏横槛，多于九土之城郭。管弦呕哑，多于市人之言语。使天下之人，不敢言而敢怒。独夫之心，日益骄固。戍卒叫，函谷举。楚人一炬，可怜焦土。<br>　　呜呼！灭六国者，六国也，非秦也。族秦者，秦也，非天下也。嗟夫！使六国各爱其人，则足以拒秦。使秦复爱六国之人，则递三世可至万世而为君，谁得而族灭也。秦人不暇自哀，而后人哀之。后人哀之，而不鉴之，亦使后人而复哀后人也。</p>
<h1 id="《赤壁赋》-苏轼"><a href="#《赤壁赋》-苏轼" class="headerlink" title="《赤壁赋》 苏轼"></a>《赤壁赋》 苏轼</h1><pre><code>壬戌之秋，七月既望，苏子与客泛舟游于赤壁之下。清风徐来，水波不兴。举酒属客，诵明月之诗，歌窈窕之章。少焉，月出于东山之上，徘徊于斗牛之间。白露横江，水光接天。纵一苇之所如，凌万顷之茫然。浩浩乎如冯虚御风，而不知其所止；飘飘乎如遗世独立，羽化而登仙。
于是饮酒乐甚，扣舷而歌之。歌曰：“桂棹兮兰桨，击空明兮溯流光。渺渺兮于怀，望美人兮天一方。”客有吹洞箫者，倚歌而和之。其声呜呜然，如怨如慕，如泣如诉，余音袅袅，不绝如缕。舞幽壑之潜蛟，泣孤舟之嫠妇。
苏子愀然，正襟危坐而问客曰：“何为其然也？”客曰：“‘月明星稀，乌鹊南飞’，此非曹孟德之诗乎？西望夏口，东望武昌，山川相缪，郁乎苍苍，此非孟德之困于周郎者乎？方其破荆州，下江陵，顺流而东也，舳舻千里，旌旗蔽空，酾酒临江，横槊赋诗，固一世之雄也，而今安在哉？况吾与子渔樵于江渚之上，侣鱼虾而友麋鹿，驾一叶之扁舟，举匏樽以相属。寄蜉蝣与天地，渺沧海之一粟。哀吾生之须臾，羡长江之无穷。挟飞仙以遨游，抱明月而长终。知不可乎骤得，托遗响于悲风。”
苏子曰：“客亦知夫水与月乎？逝者如斯，而未尝往也；盈虚者如彼，而卒莫消长也。盖将自其变者而观之，则天地曾不能以一瞬；自其不变者而观之，则物与我皆无尽也。而又何羡乎！且夫天地之间，物各有主，苟非吾之所有，虽一毫而莫取。惟江上之清风，与山间之明月，耳得之而为声，目遇之而成色，取之无禁，用之不竭，是造物者之无尽藏也，而吾与子之所共适。”
客喜而笑，洗盏更酌。肴核既尽，杯盘狼藉。相与枕藉乎舟中，不知东方之既白。
</code></pre>
<h1 id="《氓》-诗经"><a href="#《氓》-诗经" class="headerlink" title="《氓》 诗经"></a>《氓》 诗经</h1><pre><code>氓之蚩蚩，抱布贸丝。匪来贸丝，来即我谋。送子涉淇，至于顿丘。匪我愆期，子无良媒。将子无怒，秋以为期。    ②乘彼垝垣，以望复关。不见复关，泣涕涟涟。既见复关，载笑载言。尔卜尔筮，体无咎言。以尔车来，以我贿迁。    ③桑之未落，其叶沃若。于嗟鸠兮，无食桑葚！于嗟女兮，无与士耽！士之耽兮，犹可说也。女之耽兮，不可说也！    ④桑之落矣，其黄而陨。自我徂尔，三岁食贫。淇水汤汤，渐车帷裳。女也不爽，士贰其行。士也罔极，二三其德。    ⑤三岁为妇，靡室劳矣。夙兴夜寐，靡有朝矣。言既遂矣，至于暴矣。兄弟不知，咥其笑矣。静言思之，躬自悼矣。    ⑥及尔偕老，老使我怨。淇则有岸，隰则有泮。总角之宴，言笑晏晏。信誓旦旦，不思其反。反是不思，亦已焉哉! 
</code></pre>
<h1 id="《离骚》-屈原"><a href="#《离骚》-屈原" class="headerlink" title="《离骚》 屈原"></a>《离骚》 屈原</h1><pre><code>长太息以掩涕兮，哀民生之多艰。余虽好修姱以鞿羁兮，謇朝谇而夕替。 既替余以蕙纕兮，又申之以揽茝。亦余心之所善兮，虽九死其尤未悔。 怨灵修之浩荡兮，终不察夫民心。众女嫉余之蛾眉兮，谣诼谓余以善淫。 固时俗之工巧兮，偭规矩而改错。背绳墨以追曲兮，竞周容以为度；忳郁邑余侘傺兮，吾独穷困乎此时也。宁溘死以流亡兮，余不忍为此态也。鸷鸟之不群兮，自前世而固然。何方圜之能周兮？夫孰异道而相安？ 屈心而抑志兮，忍尤而攘诟。伏清白以死直兮，固前圣之所厚。
悔相道之不察兮，延伫乎吾将反。回朕车以复路兮，及行迷之未远。步余马于兰皋兮，驰椒丘且焉止息。进不入以离尤兮，退将复修吾初服。制芰荷以为衣兮，集芙蓉以为裳。不吾知其亦已兮，苟余情其信芳。 高余冠之岌岌兮，长余佩之陆离。芳与泽其杂糅兮，唯昭质其犹未亏。忽反顾以游目兮，将往观乎四荒。 佩缤纷其繁饰兮，芳菲菲其弥章。 民生各有所乐兮，余独好修以为常。虽体解吾犹未变兮，岂余心之可惩？ 
</code></pre>
<h1 id="《蜀道难》-李白"><a href="#《蜀道难》-李白" class="headerlink" title="《蜀道难》 李白"></a>《蜀道难》 李白</h1><pre><code>噫吁嚱，危乎高哉！蜀道之难，难于上青天，蚕丛及鱼凫，开国何茫然！尔来四万八千岁，不与秦塞通人烟。西当太白有鸟道，可以横绝峨眉巅。地崩山摧壮士死，然后天梯石栈相钩连。上有六龙回日之高标，下有冲波逆折之回川。黄鹤之飞尚不得过，猿猱欲度愁攀援。青泥何盘盘，百步九折萦岩峦。扪参历井仰胁息，以手抚膺坐长叹。
问君西游何时还？畏途巉岩不可攀。但见悲鸟号古木，雄飞雌从绕林间。又闻子规啼夜月，愁空山。蜀道之难，难于上青天。使人听此凋朱颜！连峰去天不盈尺，枯松倒挂倚绝壁。飞湍瀑流争喧豗，砯崖转石万壑雷。其险也如此。嗟尔远道之人胡为乎来哉？
剑阁峥嵘而崔嵬，一夫当关，万夫莫开。所守或匪亲，化为狼与豺。朝避猛虎，夕避长蛇；磨牙吮血，杀人如麻。锦城虽云乐，不如早还家。蜀道之难，难于上青天，侧身西望长咨嗟！ 
</code></pre>
<h1 id="《登高》-杜甫"><a href="#《登高》-杜甫" class="headerlink" title="《登高》 杜甫"></a>《登高》 杜甫</h1><pre><code>风急天高猿啸哀，渚清沙白鸟飞回。无边落木萧萧下，不尽长江滚滚来。
万里悲秋常作客，百年多病独登台。艰难苦恨繁霜鬓，潦倒新停浊酒杯。 
</code></pre>
<h1 id="《琵琶行》白居易"><a href="#《琵琶行》白居易" class="headerlink" title="《琵琶行》白居易"></a>《琵琶行》白居易</h1><pre><code>浔阳江头夜送客。枫叶荻花秋瑟瑟。主人下马客在船，举酒欲饮无管弦。醉不成欢惨将别，别时茫茫江浸月。
忽闻水上琵琶声，主人忘归客不发。寻声暗问弹者谁，琵琶声停欲语迟。移船相近邀相见，添酒回灯重开宴。千呼万唤始出来，犹抱琵琶半遮面。转轴拨弦三两声，未成曲调先有情。弦弦掩抑声声思，似诉平生不得志。低眉信手续续弹，说尽心中无限事。轻拢慢捻抹复挑，初为霓裳后六幺。大弦嘈嘈如急雨，小弦切切如私语。嘈嘈切切错杂弹，大珠小珠落玉盘。间关莺语花底滑，幽咽泉流水下滩。水泉冷涩弦凝绝，凝绝不通声渐歇。别有幽愁暗恨生，此时无声胜有声。银瓶乍破水浆迸，铁骑突出刀枪鸣。曲终收拨当心画，四弦一声如裂帛。东船西舫悄无言，唯见江心秋月白。
沉吟放拨插弦中，整顿衣裳起敛容。自言本是京城女，家在虾蟆陵下住。十三学得琵琶成，名属教坊第一部。曲罢曾教善才服，妆成每被秋娘妒。五陵年少争缠头，一曲红绡不知数。钿头银篦击节碎，血色罗裙翻酒污。今年欢笑复明年，秋月春风等闲度。弟走从军阿姨死，暮去朝来颜色故。门前冷落车马稀，老大嫁作商人妇。商人重利轻别离，前月浮梁买茶去。去来江口守空船，绕船月明江水寒。夜深忽梦少年事，梦啼妆泪红阑干。
我闻琵琶已叹息，又闻此语重唧唧。同是天涯沦落人，相逢何必曾相识。我从去年辞帝京，谪居卧病浔阳城。浔阳地僻无音乐，终岁不闻丝竹声。住近湓江地低湿，黄芦苦竹绕宅生。其间旦暮闻何物，杜鹃啼血猿哀鸣。春江花朝秋月夜，往往取酒还独倾。岂无山歌与村笛，呕哑嘲哳难为听。今夜闻君琵琶语，如听仙乐耳暂明。莫辞更坐弹一曲，为君翻作琵琶行。
感我此言良久立，却坐促弦弦转急。凄凄不似向前声，满座重闻皆掩泣。座中泣下谁最多，江州司马青衫湿。
</code></pre>
<h1 id="《锦瑟》-李商隐"><a href="#《锦瑟》-李商隐" class="headerlink" title="《锦瑟》 李商隐"></a>《锦瑟》 李商隐</h1><p>锦瑟无端五十弦，一弦一柱思华年。庄生晓梦迷蝴蝶，望帝春心托杜鹃。<br>沧海月明珠有泪，蓝田日暖玉生烟。此情可待成追忆，只是当时已惘然！</p>
<h1 id="《虞美人》-李煜"><a href="#《虞美人》-李煜" class="headerlink" title="《虞美人》 李煜"></a>《虞美人》 李煜</h1><p>春花秋月何时了？往事知多少。小楼昨夜又东风，故国不堪回首月明中。<br>雕栏玉砌应犹在，只是朱颜改。问君能有几多愁？恰似一江春水向东流。 </p>
<h1 id="《念奴娇-赤壁怀古》-苏轼"><a href="#《念奴娇-赤壁怀古》-苏轼" class="headerlink" title="《念奴娇?赤壁怀古》 苏轼"></a>《念奴娇?赤壁怀古》 苏轼</h1><p>大江东去，浪淘尽、千古风流人物。故垒西边，人道是，三国周郎赤壁。乱石穿空，惊涛拍岸，卷起千堆雪。江山如画，一时多少豪杰。 遥想公瑾当年，小乔初嫁了，雄姿英发。羽扇纶巾，谈笑间，樯橹灰飞烟灭。故国神游，多情应笑我，早生华发。人生如梦，一尊还酹江月。 </p>
<h1 id="《永遇乐-京口北固亭怀古》-辛弃疾"><a href="#《永遇乐-京口北固亭怀古》-辛弃疾" class="headerlink" title="《永遇乐?京口北固亭怀古》 辛弃疾"></a>《永遇乐?京口北固亭怀古》 辛弃疾</h1><p>千古江山，英雄无觅孙仲谋处。舞榭歌台，风流总被，雨打风吹去。斜阳草树，寻常巷陌，人道寄奴曾住。想当年金戈铁马，气吞万里如虎。 元嘉草草，封狼居胥，赢得仓皇北顾。四十三年，望中犹记，烽火扬州路。可堪回首，佛狸祠下，一片神鸦社鼓！凭谁问 廉颇老矣，尚能饭否？ </p>
]]></content>
      <categories>
        <category>互联网</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>收集</tag>
      </tags>
  </entry>
</search>
